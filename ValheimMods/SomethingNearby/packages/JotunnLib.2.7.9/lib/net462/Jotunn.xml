<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Jotunn</name>
    </assembly>
    <members>
        <member name="T:Jotunn.Configs.ButtonConfig">
            <summary>
                Configuration class for adding custom inputs and custom key hints.<br />
                See <a href="https://docs.unity3d.com/2019.4/Documentation/ScriptReference/Input.html" />
                for more information on Unity Input handling.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.Name">
            <summary>
                Name of the config. Use this to react to the button press bound by this config.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.Axis">
            <summary>
                Axis string this config should be bound to.<br />
                Use special Axis "Mouse ScrollWheel" to display the scroll icon as the key hint.
            </summary>
        </member>
        <member name="F:Jotunn.Configs.ButtonConfig._key">
            <summary>
                Private store for the Key property
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.Key">
            <summary>
                Unity KeyCode this config should be bound to.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.Config">
            <summary>
                BepInEx configuration entry of a KeyCode that should be used.
                Overrides the <see cref="P:Jotunn.Configs.ButtonConfig.Key"/> value of this config.
            </summary>
        </member>
        <member name="F:Jotunn.Configs.ButtonConfig._shortcut">
            <summary>
                Private store for the shortcut
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.Shortcut">
            <summary>
                BepInEx KeyboardShortcut this config should be bound to.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.ShortcutConfig">
            <summary>
                BepInEx configuration entry of a KeyCode that should be used.
                Overrides the <see cref="P:Jotunn.Configs.ButtonConfig.Shortcut"/> value of this config.
            </summary>
        </member>
        <member name="F:Jotunn.Configs.ButtonConfig._gamepadButton">
            <summary>
                Private store for the GamepadButton property
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.GamepadButton">
            <summary>
                GamepadButton this config should be bound to for gamepads.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.GamepadConfig">
            <summary>
                BepInEx configuration entry of a GamepadButton that should be used.
                Overrides the <see cref="P:Jotunn.Configs.ButtonConfig.GamepadButton"/> value of this config.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.Inverted">
            <summary>
                Should the Axis value be inverted?
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.RepeatDelay">
            <summary>
                Delay until a constantly pressed key is considered "pressed" again.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.RepeatInterval">
            <summary>
                Interval in which the check timer for the repeat delay is decremented.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.Hint">
            <summary>
                Key hint text, overrides HintToken when set
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.HintToken">
            <summary>
                Token for translating the key hint text.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.ActiveInGUI">
            <summary>
                Should this button react on key presses when a Valheim GUI is open? Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.ActiveInCustomGUI">
            <summary>
                Should this button react on key presses when a custom GUI is open and requested to block input? Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.BlockOtherInputs">
            <summary>
                Should this button block all other inputs using the same key or button? Defaults to <c>false</c>.<br/>
                <b>Warning:</b> If set to <c>true</c>, all other input using the same key or axis is reset when queried via ZInput.
                Make sure to gate your usage properly.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ButtonConfig.IsConfigBacked">
            <summary>
                Internal flag if this button config is backed by any BepInEx ConfigEntry
            </summary>
        </member>
        <member name="T:Jotunn.Configs.ClutterConfig">
            <summary>
                Configuration class for adding custom clutter.<br />
                Use this in a constructor of <see cref="T:Jotunn.Entities.CustomClutter"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.Enabled">
            <summary>
                Whether this clutter gets spawned in the world. Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.Biome">
            <summary>
                Biome to spawn in, multiple Biomes can be allowed with <see cref="M:Jotunn.Managers.ZoneManager.AnyBiomeOf(Heightmap.Biome[])"/>.<br />
                Default to all biomes.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.Instanced">
            <summary>
                Whether this clutter has an <see cref="T:InstanceRenderer"/> attached that should be used.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.Amount">
            <summary>
                The amount of displayed clutter prefabs per patch.
                For high values an <see cref="T:InstanceRenderer"/> should be used to lower the amount of overall prefabs.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.OnUncleared">
            <summary>
                Whether this clutter should be shown on unmodified ground.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.OnCleared">
            <summary>
                Whether this clutter should be shown on modified ground.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.ScaleMin">
            <summary>
                Minimum random size of the prefab, only active when <see cref="P:Jotunn.Configs.ClutterConfig.Instanced"/> is used.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.ScaleMax">
            <summary>
                Maximum random size of the prefab, only active when <see cref="P:Jotunn.Configs.ClutterConfig.Instanced"/> is used.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.MaxTilt">
            <summary>
                Maximum terrain tilt in degrees this clutter will be placed on.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.MinAltitude">
            <summary>
                Minimum terrain height this clutter will be placed on.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.MaxAltitude">
            <summary>
                Maximum terrain height this clutter will be placed on.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.SnapToWater">
            <summary>
                Whether the y position will always be at water level.
                Used before <see cref="P:Jotunn.Configs.ClutterConfig.RandomOffset"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.RandomOffset">
            <summary>
                Random y offset of every individual prefab.
                Calculated after <see cref="P:Jotunn.Configs.ClutterConfig.SnapToWater"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.TerrainTilt">
            <summary>
                Whether this clutter will be rotated with the underlying terrain.
                Otherwise it will always point straight up.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.OceanDepthCheck">
            <summary>
                Whether the clutter should check for ocean height.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.MinOceanDepth">
            <summary>
                Minimum ocean depth that is needed to place this clutter.
                Needs <see cref="P:Jotunn.Configs.ClutterConfig.OceanDepthCheck"/> to be <c>true</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.MaxOceanDepth">
            <summary>
                Maximum ocean depth to place this clutter.
                Needs <see cref="P:Jotunn.Configs.ClutterConfig.OceanDepthCheck"/> to be <c>true</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.InForest">
            <summary>
                Whether the clutter should check for forest thresholds.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.ForestThresholdMin">
            <summary>
                Minimum value of the forest fractal:<br/>
                    0 - 1: inside the forest<br/>
                    1: forest edge<br/>
                    1 - infinity: outside the forest
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.ForestThresholdMax">
            <summary>
                Maximum value of the forest fractal:<br/>
                    0 - 1: inside the forest<br/>
                    1: forest edge<br/>
                    1 - infinity: outside the forest
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.FractalScale">
            <summary>
                Size of a noise map used to determine if the clutter should be placed.
                Set to 0 to disable and place it everywhere.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.FractalOffset">
            <summary>
                Offset of the noise map.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.FractalThresholdMin">
            <summary>
                Minimum value of the noise map that is needed to place the clutter.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ClutterConfig.FractalThresholdMax">
            <summary>
                Maximum value of the noise map to place the clutter.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.ClutterConfig.#ctor">
            <summary>
                Create a new <see cref="T:Jotunn.Configs.ClutterConfig"/>
            </summary>
        </member>
        <member name="M:Jotunn.Configs.ClutterConfig.#ctor(ClutterSystem.Clutter)">
            <summary>
                Create a copy of the <see cref="T:ClutterSystem.Clutter"/>
            </summary>
            <param name="clutter"></param>
        </member>
        <member name="T:Jotunn.Configs.ConversionConfig">
            <summary>
                Base class for adding new ItemConversions to various Valheim stations
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ConversionConfig.Station">
            <summary>
                The name of the station prefab this conversion is added to.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ConversionConfig.FromItem">
            <summary>
                The name of the item prefab you need to put ín the station.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ConversionConfig.ToItem">
            <summary>
                The name of the item prefab that your "FromItem" will be turned into.
            </summary>
        </member>
        <member name="T:Jotunn.Configs.CookingConversionConfig">
            <summary>
                Used to add new ItemConversions to the CookingStation
            </summary>
        </member>
        <member name="P:Jotunn.Configs.CookingConversionConfig.Station">
            <summary>
                The name of the station prefab this conversion is added to. Defaults to "piece_cookingstation".
            </summary>
        </member>
        <member name="P:Jotunn.Configs.CookingConversionConfig.CookTime">
            <summary>
                Amount of time it takes to perform the conversion. Defaults to 10f.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.CookingConversionConfig.GetItemConversion">
            <summary>
                Turns the CookingConversionConfig into a Valheim CookingStation.ItemConversion item.
            </summary>
            <returns>The Valheim CookingStation.ItemConversion</returns>
        </member>
        <member name="M:Jotunn.Configs.CookingConversionConfig.FromJson(System.String)">
            <summary>
                Loads a single CookingConversionConfig from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded CookingConversionConfig</returns>
        </member>
        <member name="M:Jotunn.Configs.CookingConversionConfig.ListFromJson(System.String)">
            <summary>
                Loads a list of CookingConversionConfigs from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded list of CookingConversionConfigs</returns>
        </member>
        <member name="T:Jotunn.Configs.CreatureConfig">
            <summary>
                Configuration class for adding custom creature spawns.<br />
                Use this in a constructor of <see cref="T:Jotunn.Entities.CustomCreature"/> 
            </summary>
        </member>
        <member name="P:Jotunn.Configs.CreatureConfig.Name">
            <summary>
                The unique name for your custom creature. May be tokenized.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.CreatureConfig.Group">
            <summary>
                Group tag of this creature.<br/>
                Creatures in the same group don't attack each other, regardless of faction.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.CreatureConfig.Faction">
            <summary>
                <see cref="T:Character.Faction"/> of this creature.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.CreatureConfig.UseCumulativeLevelEffects">
            <summary>
                If set to true, <see cref="T:LevelEffects"/> stack the "EnableObject" action for all levels
                instead of only activating the GameObject of the highest level matched.
            </summary>
        </member>
        <member name="F:Jotunn.Configs.CreatureConfig.DropConfigs">
            <summary>
                Array of <see cref="T:Jotunn.Configs.DropConfig">DropConfigs</see> to use for this creature's <see cref="T:CharacterDrop"/>.<br/>
                A <see cref="T:CharacterDrop"/> component will automatically be added if not present.<br/>
                The drop table of an existing component will be replaced.
            </summary>
        </member>
        <member name="F:Jotunn.Configs.CreatureConfig.SpawnConfigs">
            <summary>
                Array of <see cref="T:Jotunn.Configs.SpawnConfig">SpawnConfigs</see> used for world spawns of your custom creature.<br/>
                Leave empty if you don't want your creature to spawn in the world automatically.<br/>
            </summary>
        </member>
        <member name="F:Jotunn.Configs.CreatureConfig.Consumables">
            <summary>
                String array of items this creature can consume to use in the <see cref="T:MonsterAI"/> component.<br/>
                Jötunn will try to resolve all strings to <see cref="T:ItemDrop">ItemDrops</see> at runtime.<br/>
                An existing consumeItems table will be replaced.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.CreatureConfig.Apply(UnityEngine.GameObject)">
            <summary>
                Apply this config's values to a creature GameObject.
            </summary>
            <param name="prefab">Prefab to apply this config to</param>
        </member>
        <member name="M:Jotunn.Configs.CreatureConfig.GetDrops">
            <summary>
                Converts the <see cref="T:Jotunn.Configs.DropConfig">DropConfigs</see> to Valheim style <see cref="T:CharacterDrop.Drop"/> array.
            </summary>
            <returns>The Valheim <see cref="T:CharacterDrop.Drop"/> array</returns>
        </member>
        <member name="M:Jotunn.Configs.CreatureConfig.GetSpawns">
            <summary>
                Converts the <see cref="T:Jotunn.Configs.SpawnConfig">SpawnConfigs</see> to Valheim style <see cref="T:SpawnSystem.SpawnData"/> array.
            </summary>
            <returns>The Valheim <see cref="T:SpawnSystem.SpawnData"/> array</returns>
        </member>
        <member name="M:Jotunn.Configs.CreatureConfig.GetConsumeItems">
            <summary>
                Creates an array of <see cref="T:ItemDrop"/> mocks for the consumeItem list of the creature.
            </summary>
            <returns>An array of <see cref="T:ItemDrop"/> mocks</returns>
        </member>
        <member name="M:Jotunn.Configs.CreatureConfig.AddDropConfig(Jotunn.Configs.DropConfig)">
            <summary>
                Appends a new <see cref="T:Jotunn.Configs.DropConfig"/> to the array of existing ones.
            </summary>
            <param name="dropConfig"></param>
        </member>
        <member name="M:Jotunn.Configs.CreatureConfig.AddSpawnConfig(Jotunn.Configs.SpawnConfig)">
            <summary>
                Appends a new <see cref="T:Jotunn.Configs.SpawnConfig"/> to the array of existing ones.
            </summary>
            <param name="spawnConfig"></param>
        </member>
        <member name="M:Jotunn.Configs.CreatureConfig.AddConsumable(System.String)">
            <summary>
                Appends a new consumable to the array of existing ones.
            </summary>
            <param name="consumable"></param>
        </member>
        <member name="T:Jotunn.Configs.DropConfig">
            <summary>
                Configuration class for drops of <see cref="T:Jotunn.Entities.CustomCreature">CustomCreatures</see> used in <see cref="T:Jotunn.Configs.CreatureConfig"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.DropConfig.Item">
            <summary>
                Name of the item prefab of this drop. Gets resolved by Jötunn at runtime.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.DropConfig.MinAmount">
            <summary>
                Minimum amount of this drop. Defaults to 1.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.DropConfig.MaxAmount">
            <summary>
                Maximum amount of this drop. Defaults to 1.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.DropConfig.Chance">
            <summary>
                Chance of this drop in percent. Defaults to 100f.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.DropConfig.OnePerPlayer">
            <summary>
                If true, only one instance per active player will be dropped regardless of min/max amount. Defaults to false.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.DropConfig.LevelMultiplier">
            <summary>
                Should the drop amount be multiplied by the creature level. Defaults to true.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.DropConfig.GetDrop">
            <summary>
                Creates a Valheim <see cref="T:CharacterDrop.Drop"/> from this config.
            </summary>
            <returns>The Valheim <see cref="T:CharacterDrop.Drop"/></returns>
        </member>
        <member name="T:Jotunn.Configs.FermenterConversionConfig">
            <summary>
                Used to add new ItemConversions to the Fermenter
            </summary>
        </member>
        <member name="P:Jotunn.Configs.FermenterConversionConfig.Station">
            <summary>
                The name of the station prefab this conversion is added to. Defaults to "fermenter".
            </summary>
        </member>
        <member name="P:Jotunn.Configs.FermenterConversionConfig.ProducedItems">
            <summary>
                The amount of items one conversion yields. Defaults to 4.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.FermenterConversionConfig.GetItemConversion">
            <summary>
                Turns the FermenterConversionConfig into a Valheim Fermenter.ItemConversion item.
            </summary>
            <returns>The Valheim Fermenter.ItemConversion</returns>
        </member>
        <member name="M:Jotunn.Configs.FermenterConversionConfig.FromJson(System.String)">
            <summary>
                Loads a single FermenterConversionConfig from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded FermenterConversionConfig</returns>
        </member>
        <member name="M:Jotunn.Configs.FermenterConversionConfig.ListFromJson(System.String)">
            <summary>
                Loads a list of FermenterConversionConfigs from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded list of FermenterConversionConfigs</returns>
        </member>
        <member name="T:Jotunn.Configs.IncineratorConversionConfig">
            <summary>
                Used to add new IncineratorConversions to the Incinerator
            </summary>
        </member>
        <member name="P:Jotunn.Configs.IncineratorConversionConfig.Station">
            <summary>
                The name of the station prefab this conversion is added to. Defaults to "incinerator".
            </summary>
        </member>
        <member name="P:Jotunn.Configs.IncineratorConversionConfig.Requirements">
            <summary>
                List of requirements for this conversion.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.IncineratorConversionConfig.ProducedItems">
            <summary>
                The amount of items one conversion yields. Defaults to 1.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.IncineratorConversionConfig.Priority">
            <summary>
                Priority of this conversion.
                Lower prioritized conversions will be incinerated first when mulitple conversions requirements are met.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.IncineratorConversionConfig.RequireOnlyOneIngredient">
            <summary>
                True: Requires only one of the list of ingredients to be able to produce the result.
                False: All of the ingredients are required.
                Defaults to false.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.IncineratorConversionConfig.GetIncineratorConversion">
            <summary>
                Turns the IncineratorConversionConfig into a Valheim Incinerator.IncineratorConversion item.
            </summary>
            <returns>The Valheim Incinerator.IncineratorConversion</returns>
        </member>
        <member name="M:Jotunn.Configs.IncineratorConversionConfig.FromJson(System.String)">
            <summary>
                Loads a single IncineratorConversionConfig from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded IncineratorConversionConfig</returns>
        </member>
        <member name="M:Jotunn.Configs.IncineratorConversionConfig.ListFromJson(System.String)">
            <summary>
                Loads a list of IncineratorConversionConfigs from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded list of IncineratorConversionConfigs</returns>
        </member>
        <member name="T:Jotunn.Configs.IncineratorRequirementConfig">
            <summary>
                Wrapper for the <see cref="T:Incinerator.Requirement"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.IncineratorRequirementConfig.Item">
            <summary>
                Name of the item prefab of this incinerator requirement
            </summary>
        </member>
        <member name="P:Jotunn.Configs.IncineratorRequirementConfig.Amount">
            <summary>
                Amount that is needed to fulfill the requirement. Defaults to 1.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.IncineratorRequirementConfig.#ctor">
            <summary>
                Creates a new incinerator requirement config with default values.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.IncineratorRequirementConfig.#ctor(System.String,System.Int32)">
            <summary>
                Creates a new incinerator requirement config with the given values.
            </summary>
            <param name="item"></param>
            <param name="amount"></param>
        </member>
        <member name="M:Jotunn.Configs.IncineratorRequirementConfig.GetRequirement">
            <summary>
                Creates a Valheim Piece.Requirement from this config. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Configs.ItemConfig">
            <summary>
                Configuration class for adding custom items. Automatically creates a recipe for this item.<br />
                Use this in a constructor of <see cref="T:Jotunn.Entities.CustomItem"/> and 
                Jötunn resolves the references to the game objects at runtime.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.Name">
            <summary>
                The unique name for your item. May be tokenized.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.Description">
            <summary>
                The description of your item. May be tokenized.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.Item">
            <summary>
                The name of the item prefab. Is automatically set in <see cref="T:Jotunn.Entities.CustomItem"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.Amount">
            <summary>
                The amount of <see cref="P:Jotunn.Configs.ItemConfig.Item"/> that will be created when crafting this item. Defaults to <c>1</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.Enabled">
            <summary>
                Whether this item is craftable or not. Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.PieceTable">
            <summary>
                The name of the piece table prefab this item uses to build pieces.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.CraftingStation">
            <summary>
                The name of the crafting station prefab where this recipe can be crafted.<br/>
                Can be set to <c>null</c> to have the recipe be craftable without a crafting station.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.RepairStation">
            <summary>
                The name of the crafting station prefab where this item can be repaired.<br/>
                Can be set to <c>null</c> to have the item be repairable without a crafting station.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.MinStationLevel">
            <summary>
                The minimum required level for the crafting station. Defaults to <c>1</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.Icons">
            <summary>
                Icons for this item. If more than one icon is added, this item automatically has variants.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.StyleTex">
            <summary>
                Texture holding the variants different styles.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.ItemConfig.Requirements">
            <summary>
                Array of <see cref="T:Jotunn.Configs.RequirementConfig"/>s for all crafting materials it takes to craft the recipe.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.ItemConfig.Apply(UnityEngine.GameObject)">
            <summary>
                Apply this config's values to a GameObject's ItemDrop.
            </summary>
            <param name="prefab"></param>
        </member>
        <member name="M:Jotunn.Configs.ItemConfig.GetRequirements">
            <summary>
                Converts the RequirementConfigs to Valheim style Piece.Requirements
            </summary>
            <returns>The Valheim Piece.Requirement array</returns>
        </member>
        <member name="M:Jotunn.Configs.ItemConfig.GetRecipe">
            <summary>
                Converts the ItemConfig to a Valheim style Recipe.
            </summary>
            <returns>The Valheim recipe</returns>
        </member>
        <member name="M:Jotunn.Configs.ItemConfig.FromJson(System.String)">
            <summary>
                Loads a single ItemConfig from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded ItemConfig</returns>
        </member>
        <member name="M:Jotunn.Configs.ItemConfig.ListFromJson(System.String)">
            <summary>
                Loads a list of ItemConfigs from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded list of ItemConfigs</returns>
        </member>
        <member name="M:Jotunn.Configs.ItemConfig.AddRequirement(Jotunn.Configs.RequirementConfig)">
            <summary>
                Appends a new <see cref="T:Jotunn.Configs.RequirementConfig"/> to the array of existing ones.
            </summary>
            <param name="requirementConfig"></param>
        </member>
        <member name="T:Jotunn.Configs.KeyHintConfig">
            <summary>
                Configuration class for adding custom key hints.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KeyHintConfig.Item">
            <summary>
                Item for which the KeyHint should be displayed when equipped.<br />
                Must be the name of the prefab as registered in the <see cref="T:Jotunn.Managers.ItemManager"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KeyHintConfig.Piece">
            <summary>
                If not null or empty the KeyHint will also be bound to a specific 
                <see cref="T:Piece"/> which must be selected for building.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KeyHintConfig.ButtonConfigs">
            <summary>
                Array of <see cref="T:Jotunn.Configs.ButtonConfig"/>s used for this key hint.
            </summary>
        </member>
        <member name="F:Jotunn.Configs.KeyHintConfig.Dirty">
            <summary>
                Internal marker if any of the button configs backed by a BepInEx ConfigEntry did change
                to regenerate the key hint object
            </summary>
        </member>
        <member name="M:Jotunn.Configs.KeyHintConfig.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Configs.KitbashConfig">
            <summary>
                Kitbash configuration for a prefab
            </summary>
        </member>
        <member name="F:Jotunn.Configs.KitbashConfig.KitbashSources">
            <summary>
                A list of KitbashSourceConfigs to apply to the prefab
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KitbashConfig.Layer">
            <summary>
                Optional: The layer of the prefab, all Kitbashed parts will be set to this layer
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KitbashConfig.FixReferences">
            <summary>
                Whether to <see cref="M:Jotunn.PrefabExtension.FixReferences(UnityEngine.GameObject)">fix references</see> on the prefab
            </summary>
        </member>
        <member name="T:Jotunn.Configs.KitbashSourceConfig">
            <summary>
                Configuration class for defining kitbash parts to add to a prefab with <see cref="T:Jotunn.Managers.KitbashManager"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KitbashSourceConfig.Name">
            <summary>
                An optional name of the pasted GameObject<br/>
                Defaults to the source name
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KitbashSourceConfig.TargetParentPath">
            <summary>
                Target parent of the pasted GameObject <br/>
                Defaults to the root of the prefab
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KitbashSourceConfig.SourcePrefab">
            <summary>
                Source prefab that contains the GameObject to copy
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KitbashSourceConfig.SourcePath">
            <summary>
                Location of the GameObject to copy from the source prefab
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KitbashSourceConfig.Position">
            <summary>
                Position of the pasted GameObject<br/>
                Defaults to <see cref="P:UnityEngine.Vector3.zero"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KitbashSourceConfig.Rotation">
            <summary>
                Rotation of the pasted GameObject<br/>
                Defaults to <see cref="P:UnityEngine.Quaternion.identity"/> (no rotation)
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KitbashSourceConfig.Scale">
            <summary>
                Scale of the pasted GameObject<br/>
                Defaults to <see cref="P:UnityEngine.Vector3.one"/> (no rescale)
            </summary>
        </member>
        <member name="P:Jotunn.Configs.KitbashSourceConfig.Materials">
            <summary>
                An optional list of Materials to set on the pasted GameObject<br/>
                Defaults to the original materials
            </summary>
        </member>
        <member name="M:Jotunn.Configs.KitbashSourceConfig.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Configs.LocalizationConfig">
            <summary>
                Configuration class for adding custom localizations.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocalizationConfig.Language">
            <summary>
                Language of this localization. Defaults to English.
            </summary>
        </member>
        <member name="F:Jotunn.Configs.LocalizationConfig.Translations">
            <summary>
                Dictionary of tokens and their respective translation in this configs language.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.LocalizationConfig.#ctor(System.String)">
            <summary>
                A new localization for a specific language.
            </summary>
            <param name="language">Name of the language</param>
        </member>
        <member name="T:Jotunn.Configs.LocationConfig">
            <summary>
                Configuration class for adding custom locations.<br />
                Use this in a constructor of <see cref="T:Jotunn.Entities.CustomLocation"/> and 
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.Location">
            <summary>
                Associated <see cref="P:Jotunn.Configs.LocationConfig.Location"/> component
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.Biome">
            <summary>
                Biome to spawn in, multiple Biomes can be allowed with <see cref="M:Jotunn.Managers.ZoneManager.AnyBiomeOf(Heightmap.Biome[])"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.BiomeArea">
            <summary>
                BiomeArea to spawn in, defaults to Everything
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.Priotized">
            <summary>
                Enable to place this kind of location first, and make it twice as likely that the objects will all be placed (random samples increase from 100,000 to 200,000) 
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.Quantity">
            <summary>
                Upper limit on how many of these locations will be placed in the world
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.ChanceToSpawn">
            <summary>
                Unused in Valheim, but available in case that changes in the future
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.ExteriorRadius">
            <summary>
                Radius of the location. Terrain delta is calculated within this circle.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.CenterFirst">
            <summary>
                Attempt to place in the central zone first
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.InForest">
            <summary>
                Enable to check forest thresholds against the forest fractal.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.ForestTresholdMin">
            <summary>
                Minimum value of the forest fractal:
                    0 - 1: inside the forest
                    1: forest edge
                    1 - infinity: outside the forest
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.ForestTrasholdMax">
            <summary>
                Maximum value of the forest fractal:
                    0 - 1: inside the forest
                    1: forest edge
                    1 - infinity: outside the forest
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.Unique">
            <summary>
                Enable to make this location unique, it will not be replaced when locations change
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.MinAltitude">
            <summary>
                Minimal altitude of the location
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.MaxAltitude">
            <summary>
                Maximum altitude of the location
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.MinDistance">
            <summary>
                Minimum distance from the center of the map of the location
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.MaxDistance">
            <summary>
                Maximum distance from the center of the map of the location
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.Group">
            <summary>
                Group of the location. Used with <see cref="P:Jotunn.Configs.LocationConfig.MinDistanceFromSimilar"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.MinDistanceFromSimilar">
            <summary>
                Minimum distance to a similar location, either the same location or a location with the same <see cref="P:Jotunn.Configs.LocationConfig.Group"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.MinTerrainDelta">
            <summary>
                Minimum terrain delta (difference between min and max height) in the circle defined by <see cref="P:Jotunn.Configs.LocationConfig.ExteriorRadius"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.MaxTerrainDelta">
            <summary>
                Maximum terrain delta (difference between min and max height) in the circle defined by <see cref="P:Jotunn.Configs.LocationConfig.ExteriorRadius"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.SlopeRotation">
            <summary>
                Rotate towards the average slope of the terrain in the circle defined by <see cref="P:Jotunn.Configs.LocationConfig.ExteriorRadius"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.HasInterior">
            <summary>
                Enable to activate interior handling
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.InteriorRadius">
            <summary>
                Radius of the interior attached to the location
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.InteriorEnvironment">
            <summary>
                Environment string used by the interior
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.RandomRotation">
            <summary>
                Randomize location rotation when placing
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.SnapToWater">
            <summary>
                Place at water level
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.IconPlaced">
            <summary>
                Enable if the location places an icon to push the location icons
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.IconAlways">
            <summary>
                Always show the associated icon on the minimap
            </summary>
        </member>
        <member name="P:Jotunn.Configs.LocationConfig.ClearArea">
            <summary>
                Enable to forbid Vegetation from spawning inside the circle defined by <see cref="P:Jotunn.Configs.LocationConfig.ExteriorRadius"/>
            </summary>
        </member>
        <member name="M:Jotunn.Configs.LocationConfig.#ctor">
            <summary>
                Create a new <see cref="T:Jotunn.Configs.LocationConfig"/>
            </summary>
        </member>
        <member name="M:Jotunn.Configs.LocationConfig.#ctor(ZoneSystem.ZoneLocation)">
            <summary>
                Create a copy of the <see cref="T:ZoneSystem.ZoneLocation"/>
            </summary>
            <param name="zoneLocation">ZoneLocation to copy</param>
        </member>
        <member name="M:Jotunn.Configs.LocationConfig.GetZoneLocation">
            <summary>
                Converts the LocationConfig to a Valheim style <see cref="T:ZoneSystem.ZoneLocation"/>.
            </summary>
            <returns>The Valheim <see cref="T:ZoneSystem.ZoneLocation"/></returns>
        </member>
        <member name="T:Jotunn.Configs.PieceConfig">
            <summary>
                Configuration class for adding custom pieces.<br />
                Use this in a constructor of <see cref="T:Jotunn.Entities.CustomPiece"/> and 
                Jötunn resolves the references to the game objects at runtime.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceConfig.Name">
            <summary>
                The name for your piece. May be tokenized.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceConfig.Description">
            <summary>
                The description of your piece. May be tokenized.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceConfig.Enabled">
            <summary>
                Whether this piece is buildable or not. Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceConfig.AllowedInDungeons">
            <summary>
                Can this piece be built in dungeons? Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceConfig.PieceTable">
            <summary>
                The name of the piece table where this piece will be added.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceConfig.Category">
            <summary>
                The name of the category this piece will appear on. If categories are disabled on the 
                target <see cref="T:PieceTable"/>, this setting will be ignored.<br />
                If categories are enabled but the given category can't be found, a new 
                <see cref="T:Piece.PieceCategory"/> will be added to the table.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceConfig.CraftingStation">
            <summary>
                The name of the crafting station prefab which needs to be in close proximity to build this piece.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceConfig.ExtendStation">
            <summary>
                The name of the crafting station prefab to which this piece will be an upgrade to.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceConfig.Icon">
            <summary>
                Icon which is displayed in the crafting GUI.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceConfig.Requirements">
            <summary>
                Array of <see cref="T:Jotunn.Configs.RequirementConfig"/>s for all crafting materials it takes to craft the recipe.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.PieceConfig.Apply(UnityEngine.GameObject)">
            <summary>
                Apply this configs values to a piece GameObject.
            </summary>
            <param name="prefab"></param>
        </member>
        <member name="M:Jotunn.Configs.PieceConfig.GetRequirements">
            <summary>
                Converts the <see cref="T:Jotunn.Configs.RequirementConfig">RequirementConfigs</see> to Valheim style <see cref="T:Piece.Requirement"/> array.
            </summary>
            <returns>The Valheim <see cref="T:Piece.Requirement"/> array</returns>
        </member>
        <member name="M:Jotunn.Configs.PieceConfig.FromJson(System.String)">
            <summary>
                Loads a single PieceConfig from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded PieceConfig</returns>
        </member>
        <member name="M:Jotunn.Configs.PieceConfig.ListFromJson(System.String)">
            <summary>
                Loads a list of PieceConfigs from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded list of PieceConfigs</returns>
        </member>
        <member name="M:Jotunn.Configs.PieceConfig.AddRequirement(Jotunn.Configs.RequirementConfig)">
            <summary>
                Appends a new <see cref="T:Jotunn.Configs.RequirementConfig"/> to the array of existing ones.
            </summary>
            <param name="requirementConfig"></param>
        </member>
        <member name="T:Jotunn.Configs.PieceTableConfig">
            <summary>
                Configuration class for adding custom piece tables.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceTableConfig.UseCategories">
            <summary>
                Indicator if the <see cref="T:PieceTable"/> uses the vanilla categories. Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceTableConfig.UseCustomCategories">
            <summary>
                Indicator if the <see cref="T:PieceTable"/> uses custom categories. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceTableConfig.CustomCategories">
            <summary>
                Array of custom categories the <see cref="T:PieceTable"/> uses. 
                Will be ignored when <see cref="P:Jotunn.Configs.PieceTableConfig.UseCustomCategories"/> is false.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.PieceTableConfig.CanRemovePieces">
            <summary>
                Indicator if the <see cref="T:PieceTable"/> can also remove pieces. Defaults to <c>true</c>.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.PieceTableConfig.GetCategories">
            <summary>
                Creates the final categories array for this <see cref="T:PieceTable"/>. 
                Adds vanilla categories when <see cref="P:Jotunn.Configs.PieceTableConfig.UseCategories"/> is true.
                Adds custom categories when <see cref="P:Jotunn.Configs.PieceTableConfig.UseCustomCategories"/> is true.
            </summary>
            <returns>Array of category strings.</returns>
        </member>
        <member name="M:Jotunn.Configs.PieceTableConfig.Apply(UnityEngine.GameObject)">
            <summary>
                Apply this configs values to a piece table GameObject.
            </summary>
            <param name="prefab"></param>
        </member>
        <member name="T:Jotunn.Configs.RecipeConfig">
            <summary>
                Configuration class for adding custom recipes.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RecipeConfig.Name">
            <summary>
                The unique name for your recipe.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RecipeConfig.Item">
            <summary>
                The name of the item prefab that this recipe should create.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RecipeConfig.Amount">
            <summary>
                The amount of <see cref="P:Jotunn.Configs.RecipeConfig.Item"/> that will be created from this Recipe. Defaults to <c>1</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RecipeConfig.Enabled">
            <summary>
                Whether this recipe is craftable or not. Defaults to true.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RecipeConfig.CraftingStation">
            <summary>
                The name of the crafting station prefab where this recipe can be crafted.
                <br/>
                Can be set to <c>null</c> to have the recipe be craftable without a crafting station.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RecipeConfig.RepairStation">
            <summary>
                The name of the crafting station prefab where this item can be repaired.
                <br/>
                Can be set to <c>null</c> to have the recipe be repairable without a crafting station.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RecipeConfig.MinStationLevel">
            <summary>
                The minimum required level for the crafting station. Defaults to <c>1</c>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RecipeConfig.Requirements">
            <summary>
                Array of <see cref="T:Jotunn.Configs.RequirementConfig"/>s for all crafting materials it takes to craft the recipe.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.RecipeConfig.GetRequirements">
            <summary>
                Converts the RequirementConfigs to Valheim style Piece.Requirements
            </summary>
            <returns>The Valheim Piece.Requirement array</returns>
        </member>
        <member name="M:Jotunn.Configs.RecipeConfig.GetRecipe">
            <summary>
                Converts the RecipeConfig to a Valheim style Recipe.
            </summary>
            <returns>The Valheim recipe</returns>
        </member>
        <member name="M:Jotunn.Configs.RecipeConfig.FromJson(System.String)">
            <summary>
                Loads a single RecipeConfig from a JSON string.
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded RecipeConfig</returns>
        </member>
        <member name="M:Jotunn.Configs.RecipeConfig.ListFromJson(System.String)">
            <summary>
                Loads a list of RecipeConfigs from a JSON string.
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded list of RecipeConfigs</returns>
        </member>
        <member name="M:Jotunn.Configs.RecipeConfig.AddRequirement(Jotunn.Configs.RequirementConfig)">
            <summary>
                Appends a new <see cref="T:Jotunn.Configs.RequirementConfig"/> to the array of existing ones.
            </summary>
            <param name="requirementConfig"></param>
        </member>
        <member name="T:Jotunn.Configs.RequirementConfig">
            <summary>
                Configuration class for requirements needed to craft items or build pieces.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RequirementConfig.Item">
            <summary>
                Name of the item prefab of this requirement.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RequirementConfig.Amount">
            <summary>
                Amount that is needed to fulfill the requirement. Defaults to 1.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RequirementConfig.AmountPerLevel">
            <summary>
                How much more of this requirement is needed per item level. Defaults to 0.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.RequirementConfig.Recover">
            <summary>
                Determines if the used requirement will be rewarded again after dismanteling a piece. Defaults to false.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.RequirementConfig.#ctor">
            <summary>
                Creates a new requirement config with default values.
            </summary>
        </member>
        <member name="M:Jotunn.Configs.RequirementConfig.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Creates a new requirement config with the given values.
            </summary>
            <param name="item"></param>
            <param name="amount"></param>
            <param name="amountPerLevel"></param>
            <param name="recover"></param>
        </member>
        <member name="M:Jotunn.Configs.RequirementConfig.GetRequirement">
            <summary>
                Creates a Valheim Piece.Requirement from this config. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Configs.SkillConfig">
            <summary>
                Configuration class for adding custom skills.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SkillConfig.UID">
            <summary>
                A SkillType used to distinguish this skill from others. This is a unique ID that Jotunn generates
                based on the Identifier provided.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SkillConfig.Identifier">
            <summary>
                A <b>unique</b> string used to identify the skill, and used to generate the <see cref="P:Jotunn.Configs.SkillConfig.UID"/>.
                <para>
                    <b>Do not</b> change the Identifier after you have released a mod using it.
                    If the Identifier changes, so will the skill's SkillType/UID, so
                    all users who have your mod will lose their save progress for the skill.
                </para>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SkillConfig.Name">
            <summary>
                The in-game name for your skill.
                Can either be the name you want to see in-game, or a localization token.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SkillConfig.Description">
            <summary>
                The in-game description for your skill.
                Can either be the description you want to see in-game, or a localization token.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SkillConfig.Icon">
            <summary>
                The in-game icon for your skill. If null, will default to a "shield" icon.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SkillConfig.IncreaseStep">
            <summary>
                The multiplier applied to all XP gained for this skill via <see cref="M:Skills.RaiseSkill(Skills.SkillType,System.Single)"/>.
                If this is set to 0, your skill will be unable to gain XP at all.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SkillConfig.IconPath">
            <summary>
                The path to load an icon png/jpg file from.
                If you wish to load from an asset bundle, use a <c>$</c> to separate the path to the asset bundle,
                and your sprite name in the asset bundle
                
                <para>
                    This <b>cannot</b> be set if <see cref="P:Jotunn.Configs.SkillConfig.Icon"/> is also set. You can only set one of them at once.
                </para>
                
                <example>
                    This sample shows how you would load a sprite from an asset bundle:
                    <code>
                        IconPath = "MyMod/Assets/assetbundle$mysprite"
                    </code>
                </example>
            </summary>
        </member>
        <member name="M:Jotunn.Configs.SkillConfig.ToString">
            <summary>
                Converts the SkillConfig to a printable string.
            </summary>
            <returns>String representation of the SkillConfig</returns>
        </member>
        <member name="M:Jotunn.Configs.SkillConfig.ToSkillDef">
            <summary>
                Converts a Jotunn SkillConfig into a Valheim SkillDef.
            </summary>
            <returns>Valheim SkillDef representation of the SkillConfig</returns>
        </member>
        <member name="M:Jotunn.Configs.SkillConfig.FromSkillInjector(System.String,Skills.SkillType,System.String,System.String,System.Single,UnityEngine.Sprite)">
            <summary>
                Creates a SkillConfig object for mods that previously used SkillInjector.
            </summary>
            <param name="identifier">Unique identifier of the new skill, ex: "com.jotunn.testmod.testskill"</param>
            <param name="uid">"id" from SkillInjector</param>
            <param name="name">"name" from SkillInjector</param>
            <param name="description">"description" from SkillInjector</param>
            <param name="increaseStep">"increment" from SkillInjector</param>
            <param name="icon">"icon" from SkillInjector</param>
            <returns>New SkillConfig object that bridges SkillInjector to Jotunn without losing user progress</returns>
            <remarks>For any new skills please do not use this method!</remarks>
        </member>
        <member name="M:Jotunn.Configs.SkillConfig.FromJson(System.String)">
            <summary>
                Loads a single SkillConfig from a JSON string.
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded SkillConfig</returns>
        </member>
        <member name="M:Jotunn.Configs.SkillConfig.ListFromJson(System.String)">
            <summary>
                Loads a list of SkillConfigs from a JSON string.
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded list of SkillConfigs</returns>
        </member>
        <member name="T:Jotunn.Configs.SmelterConversionConfig">
            <summary>
                Used to add new ItemConversions to the Smelter
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SmelterConversionConfig.Station">
            <summary>
                The name of the station prefab this conversion is added to. Defaults to "smelter".
            </summary>
        </member>
        <member name="M:Jotunn.Configs.SmelterConversionConfig.GetItemConversion">
            <summary>
                Turns the SmelterConversionConfig into a Valheim Smelter.ItemConversion item.
            </summary>
            <returns>The Valheim Smelter.ItemConversion</returns>
        </member>
        <member name="M:Jotunn.Configs.SmelterConversionConfig.FromJson(System.String)">
            <summary>
                Loads a single SmelterConversionConfig from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded SmelterConversionConfig</returns>
        </member>
        <member name="M:Jotunn.Configs.SmelterConversionConfig.ListFromJson(System.String)">
            <summary>
                Loads a list of SmelterConversionConfigs from a JSON string
            </summary>
            <param name="json">JSON text</param>
            <returns>Loaded list of SmelterConversionConfigs</returns>
        </member>
        <member name="T:Jotunn.Configs.SpawnConfig">
            <summary>
                Configuration class for adding custom creature spawns.<br />
                Use this to define spawn configurations in your <see cref="T:Jotunn.Configs.CreatureConfig"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.Name">
            <summary>
                The unique name for your spawn configuration.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.WorldSpawnEnabled">
            <summary>
                Should this creature be loaded into the world spawn lists? Defaults to true.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.Biome">
            <summary>
                Biome to spawn in, multiple Biomes can be allowed with <see cref="M:Jotunn.Managers.ZoneManager.AnyBiomeOf(Heightmap.Biome[])"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.BiomeArea">
            <summary>
                BiomeArea to spawn in. Defaults to Everything.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MaxSpawned">
            <summary>
                Maximum count of instances of this creature that can be active at the same time. Defaults to 1.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.SpawnInterval">
            <summary>
                Spawning interval. Defaults to 4f.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.SpawnChance">
            <summary>
                Spawn chance each spawn interval. Defaults to 100f.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.SpawnDistance">
            <summary>
                Minimum distance to another instance. Defaults to 10f.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MinSpawnRadius">
            <summary>
                Minimun spawn range (0 = use global setting).
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MaxSpawnRadius">
            <summary>
                Maximum spawn range.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MinLevel">
            <summary>
                Minimum level the creature spawns with. Defaults to 1.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MaxLevel">
            <summary>
                Maximum level the creature spawns with. Defaults to 1.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.RequiredGlobalKey">
            <summary>
                Only spawn if this key is set. See <see cref="T:Jotunn.Utils.GameConstants.GlobalKey"/> for constant values
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.RequiredEnvironments">
            <summary>
                Only spawn if this environment is active, see <see cref="T:Jotunn.Utils.GameConstants.Weather"/> for constant values
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MinGroupSize">
            <summary>
                Minimum number of entities to attempt to spawn at a time. Defaults to 1.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MaxGroupSize">
            <summary>
                Maximum number of entities to attempt to spawn at a time. Defaults to 1.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.GroupRadius">
            <summary>
                Radius for the group to spawn in. Defaults to 3f.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.SpawnAtDay">
            <summary>
                Creature can spawn at day. Defaults to true.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.SpawnAtNight">
            <summary>
                Creature can spawn at night. Defaults to true.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MinAltitude">
            <summary>
                The minimum altitude (distance to water surface) for the creature to spawn. Defaults to -1000f.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MaxAltitude">
            <summary>
                The maximum altitude (distance to water surface) for the creature to spawn. Defaults to 1000f.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MinTilt">
            <summary>
                The minimum tilt of terrain required to spawn. Range 0 to 90.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MaxTilt">
            <summary>
                The maximum tilt of terrain required to spawn. Range 0 to 90. Defaults to 35f.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MinOceanDepth">
            <summary>
                The minimum ocean depth for the creature to spawn.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.MaxOceanDepth">
            <summary>
                The maximum ocean depth for the creature to spawn.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.SpawnInForest">
            <summary>
                Spawn can happen in forest areas. Defaults to true.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.SpawnOutsideForest">
            <summary>
                Spawn can happen outside forest areas. Defaults to true.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.HuntPlayer">
            <summary>
                Set true to let the AI hunt the player on spawn.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.SpawnConfig.GroundOffset">
            <summary>
                Offset to the ground the creature spawns on. Defaults to 0.5f
            </summary>
        </member>
        <member name="M:Jotunn.Configs.SpawnConfig.GetSpawnData">
            <summary>
                Converts the SpawnConfig to a Valheim style <see cref="T:SpawnSystem.SpawnData"/> without a prefab set.
            </summary>
            <returns>The Valheim <see cref="T:SpawnSystem.SpawnData"/></returns>
        </member>
        <member name="T:Jotunn.Configs.VegetationConfig">
            <summary>
                Configuration class for adding custom vegetation.<br />
                Use this in a constructor of <see cref="T:Jotunn.Entities.CustomVegetation"/> and 
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.Biome">
            <summary>
                Biome to spawn in, multiple Biomes can be allowed with <see cref="M:Jotunn.Managers.ZoneManager.AnyBiomeOf(Heightmap.Biome[])"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.BiomeArea">
            <summary>
                BiomeArea to spawn in, defaults to Everything
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.BlockCheck">
            <summary>
                Do a check before placing that there is nothing already from layers: "Default", "static_solid", "Default_small", "piece"
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.ForcePlacement">
            <summary>
                Unlike what the name suggests, Valheim will attempt 50 times the normal amount of placements, almost guaranteeing that everything will be placed
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.Min">
            <summary>
                Minimum amount per zone
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.Max">
            <summary>
                Values between 0 - 1 are used as a chance to place
                Values above 1 are used as integer amount of maximum per zone
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.MinAltitude">
            <summary>
                Minimal altitude of the vegetation
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.MaxAltitude">
            <summary>
                Maximum altitude of the vegetation
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.MinOceanDepth">
            <summary>
                Minimum ocean depth
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.MaxOceanDepth">
            <summary>
                Maximum ocean depth
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.MinTerrainDelta">
            <summary>
                Minimum terrain delta (difference between min and max height) in the circle defined by <see cref="P:Jotunn.Configs.VegetationConfig.TerrainDeltaRadius"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.MaxTerrainDelta">
            <summary>
                Maximum terrain delta (difference between min and max height) in the circle defined by <see cref="P:Jotunn.Configs.VegetationConfig.TerrainDeltaRadius"/>
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.MinTilt">
            <summary>
                Minimum tilt in degrees
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.MaxTilt">
            <summary>
                Maximum tilt in degrees
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.InForest">
            <summary>
                Enable to check forest thresholds against the forest fractal.
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.ForestThresholdMin">
            <summary>
                Minimum value of the forest fractal:<br/>
                    0 - 1: inside the forest<br/>
                    1: forest edge<br/>
                    1 - infinity: outside the forest
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.ForestThresholdMax">
            <summary>
                Maximum value of the forest fractal:<br/>
                    0 - 1: inside the forest<br/>
                    1: forest edge<br/>
                    1 - infinity: outside the forest
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.TerrainDeltaRadius">
            <summary>
                Size of the circle used to determine terrain delta
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.ScaleMin">
            <summary>
                Minimum scale of placed instances
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.ScaleMax">
            <summary>
                Maximum scale of place instances
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.GroupSizeMin">
            <summary>
                Minimum amount in group
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.GroupSizeMax">
            <summary>
                Maximum amount in group
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.GroupRadius">
            <summary>
                Radius of group
            </summary>
        </member>
        <member name="P:Jotunn.Configs.VegetationConfig.GroundOffset">
            <summary>
                Placement offset, use negatives to bury underground
            </summary>
        </member>
        <member name="M:Jotunn.Configs.VegetationConfig.#ctor">
            <summary>
                Create a new <see cref="T:Jotunn.Configs.VegetationConfig"/>
            </summary>
        </member>
        <member name="M:Jotunn.Configs.VegetationConfig.#ctor(ZoneSystem.ZoneVegetation)">
            <summary>
                Create a copy of the <see cref="T:ZoneSystem.ZoneVegetation"/>
            </summary>
            <param name="zoneVegetation">ZoneVegetation to copy</param>
        </member>
        <member name="M:Jotunn.DebugUtils.DebugHelper.ZoneSystem_SpawnLocation(ZoneSystem.ZoneLocation,ZoneSystem.SpawnMode)">
            <summary>
                Output custom location spawns
            </summary>
        </member>
        <member name="T:Jotunn.DebugUtils.DebugHelper.Debug_isDebugBuild">
            <summary>
                Pretend to be a debugBuild :)
            </summary>
        </member>
        <member name="T:Jotunn.Entities.ConsoleCommand">
            <summary>
                A custom console command.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.ConsoleCommand.Name">
            <summary>
                The command that the user will need to type in their console to run your command.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.ConsoleCommand.Help">
            <summary>
                The help text that will be displayed to the user for your command when they type `help` into their console.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.ConsoleCommand.IsCheat">
            <summary>
                If true, this command will only work after `devcommands` is run in the console.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.ConsoleCommand.IsNetwork">
            <summary>
                If true, this command will be allowed in networked play.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.ConsoleCommand.OnlyServer">
            <summary>
                If true, and IsNetwork is true, this command will be allowed in networked play, but only for the server.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.ConsoleCommand.IsSecret">
            <summary>
                If true, this command will not be shown when the user types `help` into their console.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.ConsoleCommand.Run(System.String[])">
            <summary>
                The function that will be called when the user runs your console command, with space-delimited arguments.
            </summary>
            <param name="args">The arguments the user types, with spaces being the delimiter.</param>
        </member>
        <member name="M:Jotunn.Entities.ConsoleCommand.CommandOptionList">
            <summary>
                Override this function to return a list of strings that are valid options for your command
            </summary>
            <returns>List of valid command options</returns>
        </member>
        <member name="M:Jotunn.Entities.ConsoleCommand.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomClutter">
            <summary>
                Main interface for adding custom clutter to the game.<br />
                Clutter are client side only objects scattered on the ground.<br />
                All custom clutter have to be wrapped inside this class to add it to Jötunns <see cref="T:Jotunn.Managers.ZoneManager"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomClutter.Prefab">
            <summary>
                The prefab for this custom clutter.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomClutter.Clutter">
            <summary>
                Associated <see cref="T:ClutterSystem.Clutter"/> class.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomClutter.Name">
            <summary>
                Name of this custom clutter.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomClutter.FixReference">
            <summary>
                Indicator if references from <see cref="T:Jotunn.Entities.Mock`1"/>s will be replaced at runtime.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomClutter.#ctor(UnityEngine.GameObject,System.Boolean,Jotunn.Configs.ClutterConfig)">
            <summary>
                Custom clutter from a prefab.<br />
                Can fix references for mocks.
            </summary>
            <param name="prefab">The prefab for this custom clutter.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="config">The <see cref="T:Jotunn.Configs.ClutterConfig"/> for this custom vegation.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomClutter.#ctor(UnityEngine.AssetBundle,System.String,System.Boolean,Jotunn.Configs.ClutterConfig)">
            <summary>
                Custom clutter from a prefab loaded from an <see cref="T:UnityEngine.AssetBundle"/>.<br />
                Can fix references for mocks.
            </summary>
            <param name="assetBundle">A preloaded <see cref="T:UnityEngine.AssetBundle"/></param>
            <param name="assetName">Name of the prefab in the bundle.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="config">The <see cref="T:Jotunn.Configs.ClutterConfig"/> for this custom clutter.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomClutter.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomCreature">
            <summary>
                Main interface for adding custom creatures to the game.<br />
                All custom creatures have to be wrapped inside this class to add it to Jötunns <see cref="T:Jotunn.Managers.CreatureManager"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomCreature.Prefab">
            <summary>
                The creature prefab.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomCreature.Spawns">
            <summary>
                Associated list of <see cref="T:SpawnSystem.SpawnData"/> of the creature.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomCreature.FixReference">
            <summary>
                Indicator if references from <see cref="T:Jotunn.Entities.Mock`1">mocks</see> will be replaced at runtime.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomCreature.FixConfig">
            <summary>
                Indicator if references from configs should get replaced
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomCreature.UseCumulativeLevelEffects">
            <summary>
                Internal flag for the cumulative level effects hook. Value is set in the config.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomCreature.#ctor(UnityEngine.GameObject,System.Boolean)">
            <summary>
                Custom creature from a prefab.
            </summary>
            <param name="creaturePrefab">The prefab of this custom creature.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomCreature.#ctor(UnityEngine.GameObject,System.Boolean,Jotunn.Configs.CreatureConfig)">
            <summary>
                Custom creature from a prefab with a <see cref="T:Jotunn.Configs.CreatureConfig"/> attached.
            </summary>
            <param name="creaturePrefab">The prefab of this custom creature.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="creatureConfig">The <see cref="T:Jotunn.Configs.CreatureConfig"/> for this custom creature.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomCreature.#ctor(System.String,System.String,Jotunn.Configs.CreatureConfig)">
            <summary>
                Custom creature created as a copy of a vanilla Valheim creature.<br />
                SpawnData is not cloned, you will have to add <see cref="T:Jotunn.Configs.SpawnConfig">SpawnConfigs</see>
                to your <see cref="T:Jotunn.Configs.CreatureConfig"/> if you want to spawn the cloned creature automatically.
            </summary>
            <param name="name">The new name of the creature after cloning.</param>
            <param name="basePrefabName">The name of the base prefab the custom creature is cloned from.</param>
            <param name="creatureConfig">The <see cref="T:Jotunn.Configs.CreatureConfig"/> for this custom creature.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomCreature.IsValid">
            <summary>
                Checks if a custom creature is valid (i.e. has a prefab and all required components).
            </summary>
            <returns>true if all criteria is met</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomCreature.IsCustomCreature(System.String)">
            <summary>
                Helper method to determine if a prefab with a given name is a custom creature created with Jötunn.
            </summary>
            <param name="prefabName">Name of the prefab to test.</param>
            <returns>true if the prefab is added as a custom creature to the <see cref="T:Jotunn.Managers.CreatureManager"/>.</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomCreature.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomCreature.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomCreature.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomEntity">
            <summary>
                Base class for all custom entities
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomEntity.SourceMod">
            <summary>
                Reference to the <see cref="T:BepInEx.BepInPlugin"/> which added this entity.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomEntity.#ctor">
            <summary>
                ctor automatically getting the SourceMod
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomEntity.#ctor(BepInEx.BepInPlugin)">
            <summary>
                ctor with manual assigned SourceMod
            </summary>
            <param name="sourceMod">Metadata of the mod adding this entity</param>
        </member>
        <member name="T:Jotunn.Entities.CustomItem">
            <summary>
                Main interface for adding custom items to the game.<br />
                All custom items have to be wrapped inside this class to add it to Jötunns <see cref="T:Jotunn.Managers.ItemManager"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomItem.ItemPrefab">
            <summary>
                The prefab for this custom item.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomItem.ItemDrop">
            <summary>
                The <see cref="T:ItemDrop"/> component for this custom item as a shortcut.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomItem.Recipe">
            <summary>
                The <see cref="T:Jotunn.Entities.CustomRecipe"/> associated with this custom item. Is needed to craft
                this item on a workbench or from the players crafting menu.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomItem.FixReference">
            <summary>
                Indicator if references from <see cref="T:Jotunn.Entities.Mock`1"/>s will be replaced at runtime.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomItem.FixConfig">
            <summary>
                Indicator if references from configs should get replaced
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.#ctor(UnityEngine.GameObject,System.Boolean)">
            <summary>
                Custom item from a prefab.<br />
                Can fix references for <see cref="T:Jotunn.Entities.Mock`1"/>s and the <see cref="T:Recipe"/>.
            </summary>
            <param name="itemPrefab">The prefab for this custom item.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.#ctor(UnityEngine.GameObject,System.Boolean,Jotunn.Configs.ItemConfig)">
            <summary>
                Custom item from a prefab with a <see cref="T:Recipe"/> made from a <see cref="T:Jotunn.Configs.ItemConfig"/>.<br />
                Can fix references for <see cref="T:Jotunn.Entities.Mock`1"/>s.
            </summary>
            <param name="itemPrefab">The prefab for this custom item.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="itemConfig">The item config for this custom item.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.#ctor(System.String,System.Boolean)">
            <summary>
                Custom item created as an "empty" primitive.<br />
                At least the name and the Icon of the <see cref="T:ItemDrop"/> must be edited after creation.
            </summary>
            <param name="name">Name of the new prefab. Must be unique.</param>
            <param name="addZNetView">If true a ZNetView component will be added to the prefab for network sync.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.#ctor(System.String,System.Boolean,Jotunn.Configs.ItemConfig)">
            <summary>
                Custom item created as an "empty" primitive with a <see cref="T:Recipe"/> made from a <see cref="T:Jotunn.Configs.ItemConfig"/>.
            </summary>
            <param name="name">Name of the new prefab. Must be unique.</param>
            <param name="addZNetView">If true a ZNetView component will be added to the prefab for network sync.</param>
            <param name="itemConfig">The item config for this custom item.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.#ctor(System.String,System.String)">
            <summary>
                Custom item created as a copy of a vanilla Valheim prefab.
            </summary>
            <param name="name">The new name of the prefab after cloning.</param>
            <param name="basePrefabName">The name of the base prefab the custom item is cloned from.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.#ctor(System.String,System.String,Jotunn.Configs.ItemConfig)">
            <summary>
                Custom item created as a copy of a vanilla Valheim prefab with a <see cref="T:Recipe"/> made from a <see cref="T:Jotunn.Configs.ItemConfig"/>.
            </summary>
            <param name="name">The new name of the prefab after cloning.</param>
            <param name="basePrefabName">The name of the base prefab the custom item is cloned from.</param>
            <param name="itemConfig">The item config for this custom item.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.#ctor(UnityEngine.AssetBundle,System.String,System.Boolean,Jotunn.Configs.ItemConfig)">
            <summary>
                Custom item from a prefab loaded from an <see cref="T:UnityEngine.AssetBundle"/> with a <see cref="T:Recipe"/> made from a <see cref="T:Jotunn.Configs.ItemConfig"/>.<br />
                Can fix references for <see cref="T:Jotunn.Entities.Mock`1"/>s.
            </summary>
            <param name="assetBundle">A preloaded <see cref="T:UnityEngine.AssetBundle"/></param>
            <param name="assetName">Name of the prefab in the bundle.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="itemConfig">The item config for this custom item.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.IsValid">
            <summary>
                Checks if a custom item is valid (i.e. has a prefab, an <see cref="P:Jotunn.Entities.CustomItem.ItemDrop"/> and an icon, if it should be craftable).
            </summary>
            <returns>true if all criteria is met</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.IsCustomItem(System.String)">
            <summary>
                Helper method to determine if a prefab with a given name is a custom item created with Jötunn.
            </summary>
            <param name="prefabName">Name of the prefab to test.</param>
            <returns>true if the prefab is added as a custom item to the <see cref="T:Jotunn.Managers.ItemManager"/>.</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomItem.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomItemConversion">
            <summary>
                Main interface for adding custom item conversions to the game.<br />
                Supports and combines conversions for the cooking station, fermenter and smelter.<br />
                All custom item conversions have to be wrapped inside this class to add it to Jötunns <see cref="T:Jotunn.Managers.ItemManager"/>.
            </summary>
        </member>
        <member name="T:Jotunn.Entities.CustomItemConversion.ConversionType">
            <summary>
                Type of the conversion component used in game.
            </summary>
        </member>
        <member name="F:Jotunn.Entities.CustomItemConversion.ConversionType.CookingStation">
            <summary>
                Add a conversion to a station with the CookingStation component attached.
            </summary>
        </member>
        <member name="F:Jotunn.Entities.CustomItemConversion.ConversionType.Fermenter">
            <summary>
                Add a conversion to a station with the Fermenter component attached.
            </summary>
        </member>
        <member name="F:Jotunn.Entities.CustomItemConversion.ConversionType.Smelter">
            <summary>
                Add a conversion to a station with the Smelter component attached.
            </summary>
        </member>
        <member name="F:Jotunn.Entities.CustomItemConversion.ConversionType.Incinerator">
            <summary>
                Add a conversion to a station with the Incinerator component attached.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomItemConversion.Type">
            <summary>
                Type of the item conversion. Defines to which station the conversion is added.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomItemConversion.Config">
            <summary>
                Config of the item conversion. Depends on the <see cref="P:Jotunn.Entities.CustomItemConversion.Type"/> of the conversion.
            </summary>
        </member>
        <member name="F:Jotunn.Entities.CustomItemConversion.FixReference">
            <summary>
                Indicator if the conversion needs fixing.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomItemConversion.ItemConversion">
            <summary>
                Actual ItemConversion type as <see cref="T:System.Object"/>. Needs to be cast according to <see cref="T:Jotunn.Entities.CustomItemConversion.ConversionType"/>.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomItemConversion.#ctor(Jotunn.Configs.ConversionConfig)">
            <summary>
                Create a custom item conversion. Depending on the config class this custom
                conversion represents one of the following item conversions:<br />
                <list type="bullet">
                    <item>CookingStation.ItemConversion</item>
                    <item>Fermenter.ItemConversion</item>
                    <item>Smelter.ItemConversion</item>
                </list>
            </summary>
            <param name="config">The item conversion config</param>
        </member>
        <member name="M:Jotunn.Entities.CustomItemConversion.IsValid">
            <summary>
                Checks if a custom item conversion is valid.
            </summary>
            <returns>true if all criteria is met</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomItemConversion.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomItemConversion.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomItemConversion.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomLocalization">
            <summary> Wrapper to hold each mod localization data. </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomLocalization.Map">
            <summary> Map that work as [language][token] = translation. </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.#ctor">
            <summary> Default constuctor. </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.#ctor(BepInEx.BepInPlugin)">
            <summary> SourceMod hint constuctor. </summary>
            <param name="sourceMod"> Mod data in the shape of BepInPlugin class. </param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.GetLanguages">
            <summary> Retrieve list of languages that have been added. </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.GetTranslations(System.String@)">
            <summary> Retrieve translations for given language. </summary>
            <param name="language"> Language of the translation you want to retrieve. </param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.TryTranslate(System.String)">
            <summary>
                Retrieve a translation from this custom localization or <see cref="M:Localization.Translate(System.String)"/>.
                Searches with the user language with a fallback to English.
            </summary>
            <param name="word">Word to translate.</param>
            <returns>Translated word in player language or english as a fallback.</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.Contains(System.String@,System.String@)">
            <summary> Checks if a translation exists for given language and token. </summary>
            <param name="language"> Language being checked. </param>
            <param name="token"> Token being checked. </param>
            <returns> True if the token was found. </returns>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.AddTranslation(System.String@,System.String)">
            <summary> Add a translation. </summary>
            <param name="token"> Token of the translation you want to add. </param>
            <param name="translation"> The translation. </param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.AddTranslation(System.String@,System.String@,System.String)">
            <summary> Add a translation. </summary>
            <param name="language"> Language of the translation you want to add. </param>
            <param name="token"> Token of the translation you want to add. </param>
            <param name="translation"> The translation. </param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.AddTranslation(System.String@,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> Add a group of translations. </summary>
            <param name="language"> Language of the translation you want to add. </param>
            <param name="tokenValue"> Token-Value dictionary. </param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.AddFileByPath(System.String,System.Boolean)">
            <summary> Add a translation file via absolute path. </summary>
            <param name="path"> Absolute path to file. </param>
            <param name="isJson"> Is the language file a json file. </param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.AddJsonFile(System.String,System.String)">
            <summary> Add a json language file (match crowdin format). </summary>
            <param name="language"> Language for the json file, for example, "English" </param>
            <param name="fileContent"> Entire file as string </param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.AddLanguageFile(System.String)">
            <summary> Add a Unity style translation file. </summary>
            <param name="fileContent"> Contents of the language file in string format. </param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.ClearToken(System.String@,System.String@)">
            <summary> Attempts to remove a given token from certain language. </summary>
            <param name="language"> Language from which to search the token. </param>
            <param name="token"> Token to clear. </param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.ClearToken(System.String@)">
            <summary> Attempts to remove a given token from default language. </summary>
            <param name="token"> Token to clear. </param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.ClearLanguage(System.String@)">
            <summary> Attempts to remove given language. </summary>
            <param name="language"> Language to clear. </param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.ClearAll">
            <summary> Clear all localization data. </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomLocalization.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomLocation">
            <summary>
                Main interface for adding custom locations to the game.<br />
                All custom locations have to be wrapped inside this class to add it to Jötunns <see cref="T:Jotunn.Managers.ZoneManager"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomLocation.Prefab">
            <summary>
                The exterior prefab for this custom location.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomLocation.ZoneLocation">
            <summary>
                Associated <see cref="T:ZoneSystem.ZoneLocation"/> component
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomLocation.Location">
            <summary>
                Associated <see cref="P:Jotunn.Entities.CustomLocation.Location"/> component
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomLocation.Name">
            <summary>
                Name of this custom location
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomLocation.FixReference">
            <summary>
                Indicator if references from <see cref="T:Jotunn.Entities.Mock`1"/>s will be replaced at runtime.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomLocation.#ctor(UnityEngine.GameObject,Jotunn.Configs.LocationConfig)">
            <summary>
                Custom location from a prefab with a <see cref="T:Jotunn.Configs.LocationConfig"/> attached.<br />
                Does not fix references.
            </summary>
            <param name="exteriorPrefab">The exterior prefab for this custom location.</param>
            <param name="locationConfig">The <see cref="T:Jotunn.Configs.LocationConfig"/> for this custom location.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocation.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,Jotunn.Configs.LocationConfig)">
            <summary>
                Custom location from a prefab with a <see cref="T:Jotunn.Configs.LocationConfig"/> attached.<br />
                Does not fix references.
            </summary>
            <param name="exteriorPrefab">The exterior prefab for this custom location.</param>
            <param name="interiorPrefab">The interior prefab for this custom location.</param>
            <param name="locationConfig">The <see cref="T:Jotunn.Configs.LocationConfig"/> for this custom location.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocation.#ctor(UnityEngine.GameObject,System.Boolean,Jotunn.Configs.LocationConfig)">
            <summary>
                Custom location from a prefab with a <see cref="T:Jotunn.Configs.LocationConfig"/> attached.
            </summary>
            <param name="exteriorPrefab">The exterior prefab for this custom location.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="locationConfig">The <see cref="T:Jotunn.Configs.LocationConfig"/> for this custom location.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocation.#ctor(UnityEngine.GameObject,UnityEngine.GameObject,System.Boolean,Jotunn.Configs.LocationConfig)">
            <summary>
                Custom location from a prefab with a <see cref="T:Jotunn.Configs.LocationConfig"/> attached.
            </summary>
            <param name="exteriorPrefab">The exterior prefab for this custom location.</param>
            <param name="interiorPrefab">The interior prefab for this custom location.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="locationConfig">The <see cref="T:Jotunn.Configs.LocationConfig"/> for this custom location.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomLocation.IsCustomLocation(System.String)">
            <summary>
                Helper method to determine if a location prefab with a given name is a custom location created with Jötunn.
            </summary>
            <param name="prefabName">Name of the prefab to test.</param>
            <returns>true if the prefab is added as a custom location to the <see cref="T:Jotunn.Managers.ZoneManager"/>.</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomLocation.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomPiece">
            <summary>
                Main interface for adding custom pieces to the game.<br />
                All custom pieces have to be wrapped inside this class to add it to Jötunns <see cref="T:Jotunn.Managers.PieceManager"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomPiece.PiecePrefab">
            <summary>
                The prefab for this custom piece.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomPiece.Piece">
            <summary>
                The <see cref="T:Piece"/> component for this custom piece as a shortcut. 
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomPiece.PieceTable">
            <summary>
                Name of the <see cref="T:PieceTable"/> this custom piece belongs to.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomPiece.FixReference">
            <summary>
                Indicator if references from <see cref="T:Jotunn.Entities.Mock`1"/>s will be replaced at runtime.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomPiece.FixConfig">
            <summary>
                Indicator if references from configs should get replaced
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.#ctor(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
                Custom piece from a prefab.<br />
                Will be added to the <see cref="T:PieceTable"/> provided by name.<br />
                Can fix references from <see cref="T:Jotunn.Entities.Mock`1"/>s or not.
            </summary>
            <param name="piecePrefab">The prefab for this custom piece.</param>
            <param name="pieceTable">
                Name of the <see cref="T:PieceTable"/> the custom piece should be added to.
                Can by the "internal" or the <see cref="T:UnityEngine.GameObject"/>s name (e.g. "_PieceTableHammer" or "Hammer")
            </param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.#ctor(UnityEngine.GameObject,Jotunn.Configs.PieceConfig)">
            <summary>
                Custom piece from a prefab with a <see cref="T:Jotunn.Configs.PieceConfig"/> attached.<br />
                The members and references from the <see cref="T:Jotunn.Configs.PieceConfig"/> will be referenced by Jötunn at runtime.
            </summary>
            <param name="piecePrefab">The prefab for this custom piece.</param>
            <param name="pieceConfig">The <see cref="T:Jotunn.Configs.PieceConfig"/> for this custom piece.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.#ctor(UnityEngine.GameObject,System.Boolean,Jotunn.Configs.PieceConfig)">
            <summary>
                Custom piece from a prefab with a <see cref="T:Jotunn.Configs.PieceConfig"/> attached.<br />
                The members and references from the <see cref="T:Jotunn.Configs.PieceConfig"/> will be referenced by Jötunn at runtime.
            </summary>
            <param name="piecePrefab">The prefab for this custom piece.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="pieceConfig">The <see cref="T:Jotunn.Configs.PieceConfig"/> for this custom piece.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.#ctor(UnityEngine.AssetBundle,System.String,System.String,System.Boolean)">
            <summary>
                Custom piece from a prefab loaded from an <see cref="T:UnityEngine.AssetBundle"/>.<br />
                Will be added to the <see cref="T:PieceTable"/> provided by name.<br />
                Can fix references from <see cref="T:Jotunn.Entities.Mock`1"/>s or not.
            </summary>
            <param name="assetBundle">A preloaded <see cref="T:UnityEngine.AssetBundle"/></param>
            <param name="assetName">Name of the prefab in the bundle.</param>
            <param name = "pieceTable" >
                Name of the <see cref="T:PieceTable"/> the custom piece should be added to.
                Can by the "internal" or the <see cref="T:UnityEngine.GameObject"/>s name (e.g. "_PieceTableHammer" or "Hammer")
            </param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.#ctor(UnityEngine.AssetBundle,System.String,Jotunn.Configs.PieceConfig)">
            <summary>
                Custom piece from a prefab loaded from an <see cref="T:UnityEngine.AssetBundle"/> with a <see cref="T:Jotunn.Configs.PieceConfig"/> attached.<br />
                The members and references from the <see cref="T:Jotunn.Configs.PieceConfig"/> will be referenced by Jötunn at runtime.
            </summary>
            <param name="assetBundle">A preloaded <see cref="T:UnityEngine.AssetBundle"/></param>
            <param name="assetName">Name of the prefab in the bundle.</param>
            <param name="pieceConfig">The <see cref="T:Jotunn.Configs.PieceConfig"/> for this custom piece.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.#ctor(UnityEngine.AssetBundle,System.String,System.Boolean,Jotunn.Configs.PieceConfig)">
            <summary>
                Custom piece from a prefab loaded from an <see cref="T:UnityEngine.AssetBundle"/> with a <see cref="T:Jotunn.Configs.PieceConfig"/> attached.<br />
                The members and references from the <see cref="T:Jotunn.Configs.PieceConfig"/> will be referenced by Jötunn at runtime.
            </summary>
            <param name="assetBundle">A preloaded <see cref="T:UnityEngine.AssetBundle"/></param>
            <param name="assetName">Name of the prefab in the bundle.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="pieceConfig">The <see cref="T:Jotunn.Configs.PieceConfig"/> for this custom piece.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.#ctor(System.String,System.Boolean,System.String)">
            <summary>
                Custom piece created as an "empty" primitive.<br />
                Will be added to the <see cref="T:PieceTable"/> provided by name.
            </summary>
            <param name="name">Name of the new prefab. Must be unique.</param>
            <param name="addZNetView">If true a ZNetView component will be added to the prefab for network sync.</param>
            <param name = "pieceTable" >
                Name of the <see cref="T:PieceTable"/> the custom piece should be added to.
                Can by the "internal" or the <see cref="T:UnityEngine.GameObject"/>s name (e.g. "_PieceTableHammer" or "Hammer")
            </param>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.#ctor(System.String,System.Boolean,Jotunn.Configs.PieceConfig)">
            <summary>
                Custom piece created as an "empty" primitive with a <see cref="T:Jotunn.Configs.PieceConfig"/> attached.<br />
                The members and references from the <see cref="T:Jotunn.Configs.PieceConfig"/> will be referenced by Jötunn at runtime.
            </summary>
            <param name="name">Name of the new prefab. Must be unique.</param>
            <param name="addZNetView">If true a ZNetView component will be added to the prefab for network sync.</param>
            <param name="pieceConfig">The <see cref="T:Jotunn.Configs.PieceConfig"/> for this custom piece.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.#ctor(System.String,System.String,System.String)">
            <summary>
                Custom piece created as a copy of a vanilla Valheim prefab.<br />
                Will be added to the <see cref="T:PieceTable"/> provided by name.
            </summary>
            <param name="name">The new name of the prefab after cloning.</param>
            <param name="baseName">The name of the base prefab the custom item is cloned from.</param>
            <param name = "pieceTable" >
                Name of the <see cref="T:PieceTable"/> the custom piece should be added to.
                Can by the "internal" or the <see cref="T:UnityEngine.GameObject"/>s name (e.g. "_PieceTableHammer" or "Hammer")
            </param>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.#ctor(System.String,System.String,Jotunn.Configs.PieceConfig)">
            <summary>
                Custom piece created as a copy of a vanilla Valheim prefab with a <see cref="T:Jotunn.Configs.PieceConfig"/> attached.<br />
                The members and references from the <see cref="T:Jotunn.Configs.PieceConfig"/> will be referenced by Jötunn at runtime.
            </summary>
            <param name="name">The new name of the prefab after cloning.</param>
            <param name="baseName">The name of the base prefab the custom item is cloned from.</param>
            <param name="pieceConfig">The <see cref="T:Jotunn.Configs.PieceConfig"/> for this custom piece.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.IsValid">
            <summary>
                Checks if a custom piece is valid (i.e. has a prefab, a target PieceTable is set,
                has a <see cref="T:Piece"/> component and that component has an icon).
            </summary>
            <returns>true if all criteria is met</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.IsCustomPiece(System.String)">
            <summary>
                Helper method to determine if a prefab with a given name is a custom piece created with Jötunn.
            </summary>
            <param name="prefabName">Name of the prefab to test.</param>
            <returns>true if the prefab is added as a custom piece to the <see cref="T:Jotunn.Managers.PieceManager"/>.</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomPiece.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomPieceTable">
            <summary>
                Main interface for adding custom piece tables to the game.<br />
                All custom piece tables have to be wrapped inside this class 
                to add it to Jötunns <see cref="T:Jotunn.Managers.PieceManager"/>.<br />
                Add strings to <see cref="P:Jotunn.Entities.CustomPieceTable.Categories"/> to use custom categories on your
                piece table. All categories will be replaced so list vanilla categories, too.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomPieceTable.PieceTablePrefab">
            <summary>
                The prefab for this custom piece table.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomPieceTable.PieceTable">
            <summary>
                The <see cref="T:PieceTable"/> component for this custom piece table as a shortcut.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomPieceTable.Categories">
            <summary>
                String array of categories used on the <see cref="T:PieceTable"/>. 
                Will be ignored when m_useCategories is false.<br />
                All categories provided here will be used and displayed on the <see cref="T:Hud"/>.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomPieceTable.#ctor(UnityEngine.GameObject)">
            <summary>
                Custom piece table from a prefab.
            </summary>
            <param name="pieceTablePrefab">The prefab for this custom piece table. It has to have a <see cref="P:Jotunn.Entities.CustomPieceTable.PieceTable"/> component attached</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPieceTable.#ctor(UnityEngine.GameObject,Jotunn.Configs.PieceTableConfig)">
            <summary>
                Custom piece table from a prefab with a <see cref="T:Jotunn.Configs.PieceTableConfig"/> attached.
            </summary>
            <param name="pieceTablePrefab">The prefab for this custom piece table. It has to have a <see cref="P:Jotunn.Entities.CustomPieceTable.PieceTable"/> component attached.</param>
            <param name="config">The <see cref="T:Jotunn.Configs.PieceTableConfig"/> for this custom piece table.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPieceTable.#ctor(System.String,Jotunn.Configs.PieceTableConfig)">
            <summary>
                "Empty" custom piece table with a <see cref="T:Jotunn.Configs.PieceTableConfig"/> attached.
            </summary>
            <param name="name">The name of the custom piece table.</param>
            <param name="config">The <see cref="T:Jotunn.Configs.PieceTableConfig"/> for this custom piece table.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPieceTable.#ctor(UnityEngine.AssetBundle,System.String,Jotunn.Configs.PieceTableConfig)">
            <summary>
                Custom piece table from a prefab loaded from an <see cref="T:UnityEngine.AssetBundle"/> with a <see cref="T:Jotunn.Configs.PieceTableConfig"/> attached.
            </summary>
            <param name="assetBundle">A preloaded <see cref="T:UnityEngine.AssetBundle"/></param>
            <param name="assetName">Name of the prefab in the bundle. It has to have a <see cref="P:Jotunn.Entities.CustomPieceTable.PieceTable"/> component attached.</param>
            <param name="config">The <see cref="T:Jotunn.Configs.PieceTableConfig"/> for this custom piece table.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPieceTable.IsValid">
            <summary>
                Checks if a custom piece table is valid (i.e. has a prefab and a PieceTable component).
            </summary>
            <returns>true if all criteria is met</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomPieceTable.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomPieceTable.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomPieceTable.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomPrefab">
            <summary>
                Wrapper for custom added GameObjects holding the mod reference.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomPrefab.Prefab">
            <summary>
                Original prefab
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomPrefab.FixReference">
            <summary>
                Indicator if references from <see cref="T:Jotunn.Entities.Mock`1"/>s will be replaced at runtime.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomPrefab.#ctor(UnityEngine.GameObject,BepInEx.BepInPlugin)">
            <summary>
                Internal ctor with provided <see cref="T:BepInEx.BepInPlugin"/> metadata.<br />
                Does not fix references.
            </summary>
            <param name="prefab">Prefab added</param>
            <param name="sourceMod">Metadata of the mod adding this prefab</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPrefab.#ctor(UnityEngine.GameObject,System.Boolean)">
            <summary>
                Custom prefab.<br />
                Can fix references for <see cref="T:Jotunn.Entities.Mock`1"/>s.
            </summary>
            <param name="prefab">The prefab for this custom item.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPrefab.#ctor(UnityEngine.AssetBundle,System.String,System.Boolean)">
            <summary>
                Custom prefab loaded from an <see cref="T:UnityEngine.AssetBundle"/>.<br />
                Can fix references for <see cref="T:Jotunn.Entities.Mock`1"/>s.
            </summary>
            <param name="assetBundle">A preloaded <see cref="T:UnityEngine.AssetBundle"/></param>
            <param name="assetName">Name of the prefab in the bundle.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomPrefab.IsValid">
            <summary>
                Checks if a custom item is valid (i.e. has a prefab, an <see cref="T:ItemDrop"/> and an icon, if it should be craftable).
            </summary>
            <returns>true if all criteria is met</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomPrefab.IsCustomPrefab(System.String)">
            <summary>
                Helper method to determine if a prefab with a given name is a custom prefab created with Jötunn.
            </summary>
            <param name="prefabName">Name of the prefab to test.</param>
            <returns>true if the prefab is added as a custom prefab to the <see cref="T:Jotunn.Managers.PrefabManager"/>.</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomPrefab.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomRecipe">
            <summary>
                Main interface for adding custom recipes to the game.<br />
                All custom recipes have to be wrapped inside this class to add it to Jötunns <see cref="T:Jotunn.Managers.ItemManager"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomRecipe.Recipe">
            <summary>
                The <see cref="T:Recipe"/> for this custom recipe.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomRecipe.FixReference">
            <summary>
                Indicator if references from <see cref="T:Jotunn.Entities.Mock`1"/>s will be replaced at runtime.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomRecipe.FixRequirementReferences">
            <summary>
                Indicator if references from <see cref="T:Jotunn.Entities.MockRequirement"/>s will be replaced at runtime.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomRecipe.#ctor(Recipe,System.Boolean,System.Boolean)">
            <summary>
                Custom recipe from a <see cref="T:Recipe"/>.<br />
                Can fix references for <see cref="T:Jotunn.Entities.Mock`1"/>s and <see cref="T:Jotunn.Entities.MockRequirement"/>s or not.
            </summary>
            <param name="recipe">The <see cref="T:Recipe"/> for a custom item.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="fixRequirementReferences">If true references for <see cref="T:Jotunn.Entities.MockRequirement"/>s get resolved at runtime by Jötunn.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomRecipe.#ctor(Jotunn.Configs.RecipeConfig)">
            <summary>
                Custom recipe from a <see cref="T:Jotunn.Configs.RecipeConfig"/>.<br />
                The <see cref="T:Recipe"/> is created automatically by Jötunn at runtime.
            </summary>
            <param name="recipeConfig">The <see cref="T:Jotunn.Configs.RecipeConfig"/> for a custom recipe.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomRecipe.IsValid">
            <summary>
                Checks if a custom status effect is valid (i.e. has a <see cref="T:Recipe"/>).
            </summary>
            <returns>true if all criteria is met</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomRecipe.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomRecipe.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomRecipe.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomRPC">
            <summary>
                Wrapper for Valheim's RPC calls implementing convenience delegate methods for client and server processing of packages.<br/>
                Automatically compresses and slices big packages to fit into the Steam package limit.<br/>
                All sending and processing of received packages is executed in Coroutines to ensure the game loop's execution.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomRPC.Name">
            <summary>
                Name of the custom RPC as defined at instantiation
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomRPC.IsSending">
            <summary>
                True, if this RPC is currently sending data
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomRPC.IsReceiving">
            <summary>
                True, if this RPC is currently receiving data
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomRPC.IsProcessing">
            <summary>
                True, if this RPC is currently processing received data.
                This is always true while executing the registered delegates.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomRPC.IsProcessingOther">
            <summary>
                True, if this RPC is processing received data outside the current delegate call.
                This should only be used in the registered delegate methods to determine
                if this RPC is already processing another package.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomRPC.ID">
            <summary>
                Unique ID of this RPC to prevent name clashes between mods
            </summary>
        </member>
        <member name="F:Jotunn.Entities.CustomRPC.OnServerReceive">
            <summary>
                Delegate called when a package is received on the server
            </summary>
        </member>
        <member name="F:Jotunn.Entities.CustomRPC.OnClientReceive">
            <summary>
                Delegate called when a package is received on the client
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomRPC.#ctor(BepInEx.BepInPlugin,System.String,Jotunn.Managers.NetworkManager.CoroutineHandler,Jotunn.Managers.NetworkManager.CoroutineHandler)">
            <summary>
                Internal constructor only, CustomRPCs are instantiated via <see cref="T:Jotunn.Managers.NetworkManager"/>
            </summary>
            <param name="sourceMod">Reference to the <see cref="T:BepInEx.BepInPlugin"/> which created this RPC.</param>
            <param name="name"></param>
            <param name="serverReceive"></param>
            <param name="clientReceive"></param>
        </member>
        <member name="M:Jotunn.Entities.CustomRPC.Initiate">
            <summary>
                Initiates a RPC exchange with the server by sending an empty package.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomRPC.SendPackage(System.Int64,ZPackage)">
            <summary>
                Send a package to a single target. Compresses and fragments the package if necessary.
            </summary>
            <param name="target"></param>
            <param name="package"></param>
        </member>
        <member name="M:Jotunn.Entities.CustomRPC.SendPackage(System.Collections.Generic.List{ZNetPeer},ZPackage)">
            <summary>
                Send a package to a list of peers. Compresses and fragments the package if necessary.
            </summary>
            <param name="peers"></param>
            <param name="package"></param>
        </member>
        <member name="M:Jotunn.Entities.CustomRPC.SendPackageRoutine(System.Int64,ZPackage)">
            <summary>
                Coroutine to send a package to a single target. Compresses and fragments the package if necessary.
            </summary>
            <param name="target"></param>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Entities.CustomRPC.SendPackageRoutine(System.Collections.Generic.List{ZNetPeer},ZPackage)">
            <summary>
                Coroutine to send a package to a list of peers. Compresses and fragments the package if necessary.
            </summary>
            <param name="peers"></param>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Entities.CustomRPC.SendToPeer(ZNetPeer,ZPackage)">
            <summary>
                Coroutine to send a package to an actual peer.
            </summary>
            <param name="peer"></param>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Entities.CustomRPC.ReceivePackage(System.Int64,ZPackage)">
            <summary>
                Receive and handle an incoming package
            </summary>
            <param name="sender"></param>
            <param name="package"></param>
        </member>
        <member name="T:Jotunn.Entities.CustomStatusEffect">
            <summary>
                Main interface for adding custom status effects to the game.<br />
                All custom status effects have to be wrapped inside this class to add it to Jötunns <see cref="T:Jotunn.Managers.ItemManager"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomStatusEffect.StatusEffect">
            <summary>
                The <see cref="T:StatusEffect"/> for this custom status effect.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomStatusEffect.FixReference">
            <summary>
                Indicator if references from <see cref="T:Jotunn.Entities.Mock`1"/>s will be replaced at runtime.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomStatusEffect.#ctor(StatusEffect,System.Boolean)">
            <summary>
                Custom status effect from a <see cref="T:StatusEffect"/>.<br />
                Can fix references for <see cref="T:Jotunn.Entities.Mock`1"/>s.
            </summary>
            <param name="statusEffect">A preloaded <see cref="T:StatusEffect"/></param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomStatusEffect.IsValid">
            <summary>
                Checks if a custom status effect is valid (i.e. has a <see cref="T:StatusEffect"/>).
            </summary>
            <returns>true if all criteria is met</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomStatusEffect.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomStatusEffect.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Jotunn.Entities.CustomStatusEffect.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.CustomVegetation">
            <summary>
                Main interface for adding custom vegetation to the game.<br />
                All custom vegetation have to be wrapped inside this class to add it to Jötunns <see cref="T:Jotunn.Managers.ZoneManager"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomVegetation.Prefab">
            <summary>
                The prefab for this custom vegetation.
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomVegetation.Vegetation">
            <summary>
                Associated <see cref="T:ZoneSystem.ZoneVegetation"/> component
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomVegetation.Name">
            <summary>
                Name of this custom vegetation
            </summary>
        </member>
        <member name="P:Jotunn.Entities.CustomVegetation.FixReference">
            <summary>
                Indicator if references from <see cref="T:Jotunn.Entities.Mock`1"/>s will be replaced at runtime.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.CustomVegetation.#ctor(UnityEngine.GameObject,Jotunn.Configs.VegetationConfig)">
            <summary>
                Custom vegetation from a prefab.<br />
            </summary>
            <param name="prefab">The prefab for this custom vegetation.</param>
            <param name="config">The vegetation config for this custom vegation.</param> 
        </member>
        <member name="M:Jotunn.Entities.CustomVegetation.#ctor(UnityEngine.GameObject,System.Boolean,Jotunn.Configs.VegetationConfig)">
            <summary>
                Custom vegetation from a prefab.<br />
                Can fix references for mocks.
            </summary>
            <param name="prefab">The prefab for this custom vegetation.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="config">The <see cref="T:Jotunn.Configs.VegetationConfig"/> for this custom vegation.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomVegetation.#ctor(UnityEngine.AssetBundle,System.String,System.Boolean,Jotunn.Configs.VegetationConfig)">
            <summary>
                Custom vegetation from a prefab loaded from an <see cref="T:UnityEngine.AssetBundle"/>.<br />
                Can fix references for mocks.
            </summary>
            <param name="assetBundle">A preloaded <see cref="T:UnityEngine.AssetBundle"/></param>
            <param name="assetName">Name of the prefab in the bundle.</param>
            <param name="fixReference">If true references for <see cref="T:Jotunn.Entities.Mock`1"/> objects get resolved at runtime by Jötunn.</param>
            <param name="config">The <see cref="T:Jotunn.Configs.VegetationConfig"/> for this custom vegation.</param>
        </member>
        <member name="M:Jotunn.Entities.CustomVegetation.IsCustomVegetation(System.String)">
            <summary>
                Helper method to determine if a prefab with a given name is a custom Vegetation created with Jötunn.
            </summary>
            <param name="prefabName">Name of the prefab to test.</param>
            <returns>true if the prefab is added as a custom vegetation to the <see cref="T:Jotunn.Managers.ZoneManager"/>.</returns>
        </member>
        <member name="M:Jotunn.Entities.CustomVegetation.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.KitbashObject">
            <summary>
                Container class for Kitbashed prefabs, returned by <see cref="T:Jotunn.Managers.KitbashManager"/>
            </summary>
        </member>
        <member name="F:Jotunn.Entities.KitbashObject.OnKitbashApplied">
            <summary>
                Callback that is called when Kitbashes are applied
            </summary>
        </member>
        <member name="P:Jotunn.Entities.KitbashObject.Prefab">
            <summary>
                The Kitbashed prefab
            </summary>
        </member>
        <member name="P:Jotunn.Entities.KitbashObject.Config">
            <summary>
                Config for the KitbashObject
            </summary>
        </member>
        <member name="M:Jotunn.Entities.KitbashObject.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Entities.Mock`1">
            <summary>
                Helper class for creating Mocks of a given vanilla Component.
            </summary>
            <typeparam name="T">Type of the mocked <see cref="T:UnityEngine.Component"/></typeparam>
        </member>
        <member name="M:Jotunn.Entities.Mock`1.Create(System.String)">
            <summary>
                Create a new Mock of type T : Component
            </summary>
            <param name="name">Name of the original component</param>
            <returns>Mocked <see cref="T:UnityEngine.Component"/></returns>
        </member>
        <member name="T:Jotunn.Entities.MockRequirement">
            <summary>
                Helper class for creating Mocks of item/piece requirements.
            </summary>
        </member>
        <member name="M:Jotunn.Entities.MockRequirement.Create(System.String,System.Int32,System.Boolean)">
            <summary>
                Creates a mocked Piece.Requirement
            </summary>
            <param name="name">Prefab name</param>
            <param name="amount">Amount</param>
            <param name="recover">Whether the resource is returned after deconstruction</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Entities.MockRequirement.CreateArray(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean)">
            <summary>
                Creates a mocked Piece.Requirement array
            </summary>
            <param name="requirements">List of prefab names and amounts</param>
            <param name="recover">Whether the resources are returned after deconstruction</param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.ArrayExtensions">
            <summary>
                Helper for Arrays
            </summary>
        </member>
        <member name="M:Jotunn.ArrayExtensions.Populate``1(``0[],``0)">
            <summary>
                Populate an array with a default value
            </summary>
            <typeparam name="T">Array value type</typeparam>
            <param name="arr">Array instance</param>
            <param name="value">Default value</param>
            <returns>Reference to the array instance</returns>
        </member>
        <member name="T:Jotunn.ConfigEntryBaseExtension">
            <summary>
                Extends <see cref="T:BepInEx.Configuration.ConfigEntryBase"/> with convenience functions.
            </summary>
        </member>
        <member name="M:Jotunn.ConfigEntryBaseExtension.IsVisible(BepInEx.Configuration.ConfigEntryBase)">
            <summary>
                Check, if this config entry is "visible"
            </summary>
            <param name="configurationEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.ConfigEntryBaseExtension.IsSyncable(BepInEx.Configuration.ConfigEntryBase)">
            <summary>
                Check, if this config entry is "syncable"
            </summary>
            <param name="configurationEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.ConfigEntryBaseExtension.GetBoundButtonName(BepInEx.Configuration.ConfigEntryBase)">
            <summary>
                Get bound button's name
            </summary>
            <param name="configurationEntry"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Jotunn.ConfigEntryBaseExtension.GetButtonConfig(BepInEx.Configuration.ConfigEntryBase)">
            <summary>
                Get bound button config
            </summary>
            <param name="configurationEntry"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Jotunn.ConfigEntryBaseExtension.GetLocalValue(BepInEx.Configuration.ConfigEntryBase)">
            <summary>
                Get the local value of an admin config
            </summary>
            <param name="configurationEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.ConfigEntryBaseExtension.SetLocalValue(BepInEx.Configuration.ConfigEntryBase,System.Object)">
            <summary>
                Set the local value of an admin config
            </summary>
            <param name="configurationEntry"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.EventExtensions">
            <summary>
                Helper class for C# Events.
            </summary>
        </member>
        <member name="M:Jotunn.EventExtensions.SafeInvoke(System.Action)">
            <summary>
                try/catch the delegate chain so that it doesnt break on the first failing Delegate.
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:Jotunn.EventExtensions.SafeInvoke``1(System.Action{``0},``0)">
            <summary>
                try/catch the delegate chain so that it doesnt break on the first failing Delegate.
            </summary>
            <typeparam name="TArg1"></typeparam>
            <param name="events"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Jotunn.EventExtensions.SafeInvoke``2(System.Action{``0,``1},``0,``1)">
            <summary>
                try/catch the delegate chain so that it doesnt break on the first failing Delegate.
            </summary>
            <typeparam name="TArg1"></typeparam>
            <typeparam name="TArg2"></typeparam>
            <param name="events"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:Jotunn.EventExtensions.SafeInvoke``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
                try/catch the delegate chain so that it doesnt break on the first failing Delegate.
            </summary>
            <typeparam name="TEventArg"></typeparam>
            <param name="events"></param>
            <param name="sender"></param>
            <param name="arg1"></param>
        </member>
        <member name="T:Jotunn.ExposedGameObjectExtension">
            <summary>
                Extends GameObject with a shortcut for the Unity bool operator override.
            </summary>
        </member>
        <member name="M:Jotunn.ExposedGameObjectExtension.OrNull(UnityEngine.GameObject)">
            <summary>
                Facilitates use of null propagation operator for unity GameObjects by respecting op_equality.
            </summary>
            <param name="this"> this </param>
            <returns>Returns null when GameObject.op_equality returns false.</returns>
        </member>
        <member name="M:Jotunn.ExposedGameObjectExtension.OrNull``1(``0)">
            <summary>
                Facilitates use of null propagation operator for unity MonBehaviours by respecting op_equality.
            </summary>
            <typeparam name="T">Any type that inherits MonoBehaviour</typeparam>
            <param name="this">this</param>
            <returns>Returns null when MonoBehaviours.op_equality returns false.</returns>
        </member>
        <member name="M:Jotunn.ExposedGameObjectExtension.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
                Returns the component of Type type. If one doesn't already exist on the GameObject it will be added.
            </summary>
            <remarks>Source: https://wiki.unity3d.com/index.php/GetOrAddComponent</remarks>
            <typeparam name="T">The type of Component to return.</typeparam>
            <param name="gameObject">The GameObject this Component is attached to.</param>
            <returns>Component</returns>
        </member>
        <member name="M:Jotunn.ExposedGameObjectExtension.AddComponentCopy``1(UnityEngine.GameObject,``0)">
            <summary>
                Adds a new copy of the provided component to a gameObject
            </summary>
            <param name="gameObject"></param>
            <param name="duplicate"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Jotunn.GameObjectGUIExtension">
            <summary>
                Use only, if you know what you do.
                There are no checks if a component exists.
            </summary>
        </member>
        <member name="T:Jotunn.GameObjectExtension">
            <summary>
                Extends GameObject with a check if the GameObject is valid
            </summary>
        </member>
        <member name="M:Jotunn.GameObjectExtension.IsValid(UnityEngine.GameObject)">
            <summary>
                Check for validity
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.ItemDropExtension">
            <summary>
                Extends ItemDrop with a TokenName
            </summary>
        </member>
        <member name="M:Jotunn.ItemDropExtension.TokenName(ItemDrop)">
            <summary>
                m_itemData.m_shared.m_name
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.ItemDataExtension">
            <summary>
                Extends ItemData with a TokenName.
            </summary>
        </member>
        <member name="M:Jotunn.ItemDataExtension.TokenName(ItemDrop.ItemData)">
            <summary>
                m_shared.m_name
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.RecipeExtension">
            <summary>
                Extends StatusEffect with a TokenName and a check if the StatusEffect is valid so it can be added to the game.
            </summary>
        </member>
        <member name="M:Jotunn.RecipeExtension.IsValid(Recipe)">
            <summary>
                Check for validity
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.PieceExtension">
            <summary>
                Extends Piece with a TokenName
            </summary>
        </member>
        <member name="M:Jotunn.PieceExtension.TokenName(Piece)">
            <summary>
                m_name
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.StatusEffectExtension">
            <summary>
                Extends StatusEffect with a TokenName and a check if the StatusEffect is valid so it can be added to the game.
            </summary>
        </member>
        <member name="M:Jotunn.StatusEffectExtension.TokenName(StatusEffect)">
            <summary>
                m_name
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.StatusEffectExtension.IsValid(StatusEffect)">
            <summary>
                Check for validity
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.PrefabExtension">
            <summary>
                Extends prefab GameObjects with functionality related to the mocking system.
            </summary>
        </member>
        <member name="M:Jotunn.PrefabExtension.FixReferences(System.Object)">
            <summary>
                Will attempt to fix every field that are mocks gameObjects / Components from the given object.
            </summary>
            <param name="objectToFix"></param>
        </member>
        <member name="M:Jotunn.PrefabExtension.FixReferences(UnityEngine.GameObject)">
            <summary>
                Resolves all references for mocks in this GameObject's components recursively
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="M:Jotunn.PrefabExtension.FixReferences(UnityEngine.GameObject,System.Boolean)">
            <summary>
                Resolves all references for mocks in this GameObject recursively.
                Can additionally traverse the transforms hierarchy to fix child GameObjects recursively.
            </summary>
            <param name="gameObject">This GameObject</param>
            <param name="recursive">Traverse all child transforms</param>
        </member>
        <member name="M:Jotunn.PrefabExtension.CloneFields(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
                Clones all fields from this GameObject to objectToClone.
            </summary>
            <param name="gameObject"></param>
            <param name="objectToClone"></param>
        </member>
        <member name="T:Jotunn.ObjectExtension">
            <summary>
                Helpful Unity Object extensions.
            </summary>
        </member>
        <member name="T:Jotunn.RectTransformExtensions">
            <summary>
                Extensions for working with Unity UI RectTransforms
            </summary>
        </member>
        <member name="M:Jotunn.RectTransformExtensions.Overlaps(UnityEngine.RectTransform,UnityEngine.RectTransform)">
            <summary>
                Test if a RectTransform overlaps another RectTransform in world space
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.RectTransformExtensions.Overlaps(UnityEngine.RectTransform,UnityEngine.RectTransform,System.Boolean)">
            <summary>
                Test if a RectTransform overlaps another RectTransform in world space
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="allowInverse"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.RectTransformExtensions.WorldRect(UnityEngine.RectTransform)">
            <summary>
                Calculate the world rect of a RectTransform
            </summary>
            <param name="rectTransform"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.ZNetExtension">
            <summary>
                Extends ZNet with a clear diversion between local, client and server instances.
            </summary>
        </member>
        <member name="T:Jotunn.ZNetExtension.ZNetInstanceType">
            <summary>
                Possible states of the game regarding to networking.
            </summary>
        </member>
        <member name="F:Jotunn.ZNetExtension.ZNetInstanceType.Local">
            <summary>
                A local game instance playing on a local world.
            </summary>
        </member>
        <member name="F:Jotunn.ZNetExtension.ZNetInstanceType.Client">
            <summary>
                A local game instance playing on a dedicated server.
            </summary>
        </member>
        <member name="F:Jotunn.ZNetExtension.ZNetInstanceType.Server">
            <summary>
                A dedicated server instance.
            </summary>
        </member>
        <member name="M:Jotunn.ZNetExtension.IsLocalInstance(ZNet)">
            <summary>
                Returns true if the game was started locally and a local world was started.
            </summary>
            <param name="znet"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.ZNetExtension.IsClientInstance(ZNet)">
            <summary>
                Returns true if the game was started locally and is connected to a server.
            </summary>
            <param name="znet"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.ZNetExtension.IsServerInstance(ZNet)">
            <summary>
                Returns true if the game was started as a dedicated server.
            </summary>
            <param name="znet"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.ZNetExtension.GetInstanceType(ZNet)">
            <summary>
                Determine the current game instance type regarding to networking.
            </summary>
            <param name="znet"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.ZNetExtension.IsAdmin(ZNet,System.Int64)">
            <summary>
                Determine if a peer uid is in the admin list on the current <see cref="T:ZNet"/>
            </summary>
            <param name="znet"></param>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.IManager">
            <summary>
                The base class for all the library's various Managers
            </summary>
        </member>
        <member name="M:Jotunn.IManager.Init">
            <summary>
                Initialize manager class after all manager scripts have been added to the root game object
            </summary>
        </member>
        <member name="T:Jotunn.Logger">
            <summary>
                A namespace wide Logger class, which automatically creates a ManualLogSource
                for every Class from which it is being called.
            </summary>
        </member>
        <member name="F:Jotunn.Logger.ShowDate">
            <summary>
                Add DateTime to the log output
            </summary>
        </member>
        <member name="M:Jotunn.Logger.Init">
            <summary>
                Singleton init
            </summary>
        </member>
        <member name="M:Jotunn.Logger.Destroy">
            <summary>
                Remove and clear all Logger instances
            </summary>
        </member>
        <member name="M:Jotunn.Logger.GetLogger">
            <summary>
                Get or create a <see cref="T:BepInEx.Logging.ManualLogSource"/> with the callers <see cref="P:System.Type.FullName"/>
            </summary>
            <returns>A BepInEx <see cref="T:BepInEx.Logging.ManualLogSource"/></returns>
        </member>
        <member name="M:Jotunn.Logger.LogFatal(System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="data">Data to log</param>
        </member>
        <member name="M:Jotunn.Logger.LogFatal(BepInEx.BepInPlugin,System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Fatal"/> level.
                This is used when the responsible mod is different from mod logging this message.
            </summary>
            <param name="sourceMod">Known mod that is responsible for this log</param>
            <param name="data">Data to log</param>
        </member>
        <member name="M:Jotunn.Logger.LogError(System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="data">Data to log</param>
        </member>
        <member name="M:Jotunn.Logger.LogError(BepInEx.BepInPlugin,System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Error"/> level.
                This is used when the responsible mod is different from mod logging this message.
            </summary>
            <param name="sourceMod">Known mod that is responsible for this log</param>
            <param name="data">Data to log</param>
        </member>
        <member name="M:Jotunn.Logger.LogWarning(System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Warning"/> level.
            </summary>
            <param name="data">Data to log</param>
        </member>
        <member name="M:Jotunn.Logger.LogWarning(BepInEx.BepInPlugin,System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Warning"/> level.
                This is used when the responsible mod is different from mod logging this message.
            </summary>
            <param name="sourceMod">Known mod that is responsible for this log</param>
            <param name="data">Data to log</param>
        </member>
        <member name="M:Jotunn.Logger.LogMessage(System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Message"/> level.
            </summary>
            <param name="data">Data to log</param>
        </member>
        <member name="M:Jotunn.Logger.LogMessage(BepInEx.BepInPlugin,System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Message"/> level.
                This is used when the responsible mod is different from mod logging this message.
            </summary>
            <param name="sourceMod">Known mod that is responsible for this log</param>
            <param name="data">Data to log</param>
        </member>
        <member name="M:Jotunn.Logger.LogInfo(System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="data">Data to log</param>
        </member>
        <member name="M:Jotunn.Logger.LogInfo(BepInEx.BepInPlugin,System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Info"/> level.
                This is used when the responsible mod is different from mod logging this message.
            </summary>
            <param name="sourceMod">Known mod that is responsible for this log</param>
            <param name="data">Data to log</param>
        </member>
        <member name="M:Jotunn.Logger.LogDebug(System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="data">Data to log</param>
        </member>
        <member name="M:Jotunn.Logger.LogDebug(BepInEx.BepInPlugin,System.Object)">
            <summary>
                Logs a message with <see cref="F:BepInEx.Logging.LogLevel.Debug"/> level.
                This is used when the responsible mod is different from mod logging this message.
            </summary>
            <param name="sourceMod">Known mod that is responsible for this log</param>
            <param name="data">Data to log</param>
        </member>
        <member name="T:Jotunn.Main">
            <summary>
                Main class implementing BaseUnityPlugin.
            </summary>
        </member>
        <member name="F:Jotunn.Main.Version">
            <summary>
                The current version of the Jotunn library.
            </summary>
        </member>
        <member name="F:Jotunn.Main.ModName">
            <summary>
                The name of the library.
            </summary>
        </member>
        <member name="F:Jotunn.Main.ModGuid">
            <summary>
                The BepInEx plugin Mod GUID being used (com.jotunn.jotunn).
            </summary>
        </member>
        <member name="M:Jotunn.Main.InitializePatches">
            <summary>
                Invoke patch initialization methods for all loaded mods.
            </summary>
        </member>
        <member name="T:Jotunn.Managers.CommandManager">
            <summary>
                Manager for handling custom console and chat commands.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.CommandManager.Instance">
            <summary>
                The singleton instance of this manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.CommandManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="F:Jotunn.Managers.CommandManager.OnGetTabOptions">
            <summary>
                Internal Action delegate to add custom entities into vanilla command's option list
            </summary>
        </member>
        <member name="P:Jotunn.Managers.CommandManager.CustomCommands">
            <summary>
                A list of all the custom console commands that have been added to the game through this manager,
                either by Jotunn or by mods using Jotunn.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.CommandManager.Init">
            <summary>
                Initialize console commands that come with Jotunn.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.CommandManager.AddConsoleCommand(Jotunn.Entities.ConsoleCommand)">
            <summary>
                Adds a new console command to Valheim.
            </summary>
            <param name="cmd">The console command to add</param>
        </member>
        <member name="M:Jotunn.Managers.CommandManager.ConsoleCommand_GetTabOptions(Terminal.ConsoleCommand,System.Collections.Generic.List{System.String}@)">
            <summary>
                Fire <see cref="F:Jotunn.Managers.CommandManager.OnGetTabOptions"/> for any ConsoleCommand when its tabOptions member
                is first populated to add Jötunn entities to the option list
            </summary>
            <param name="self"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Managers.CreatureManager">
            <summary>
               Manager for handling all custom data added to the game related to creatures.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.CreatureManager.Instance">
            <summary>
                The singleton instance of this manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="F:Jotunn.Managers.CreatureManager.CharacterLayer">
            <summary>
                Unity "character" layer ID. 
            </summary>
        </member>
        <member name="E:Jotunn.Managers.CreatureManager.OnVanillaCreaturesAvailable">
            <summary>
                Event that gets fired after the vanilla creatures are in memory and available for cloning.
                Your code will execute every time before a new <see cref="T:ObjectDB"/> is copied (on every menu start).
                If you want to execute just once you will need to unregister from the event after execution.
            </summary>
        </member>
        <member name="E:Jotunn.Managers.CreatureManager.OnCreaturesRegistered">
            <summary>
                Event that gets fired after registering all custom creatures to <see cref="T:ZNetScene"/>.
                Your code will execute every time a new ZNetScene is created (on every game start).
                If you want to execute just once you will need to unregister from the event after execution.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.CreatureManager.Creatures">
            <summary>
                Internal lists of all custom entities added
            </summary>
        </member>
        <member name="F:Jotunn.Managers.CreatureManager.SpawnListContainer">
            <summary>
                Container for Jötunn's SpawnSystemList in the DontDestroyOnLoad scene.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.CreatureManager.SpawnList">
            <summary>
                Reference to the SpawnList component of the container.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.Init">
            <summary>
                Creates the spawner container and registers all hooks.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.AddCreature(Jotunn.Entities.CustomCreature)">
            <summary>
                Add a <see cref="T:Jotunn.Entities.CustomCreature"/> to the game.<br />
                Checks if the custom creature is valid and unique and adds it to the list of custom creatures.
            </summary>
            <param name="customCreature">The custom Creature to add.</param>
            <returns>true if the custom Creature was added to the manager.</returns>
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.GetCreature(System.String)">
            <summary>
                Get a custom creature by its name.
            </summary>
            <param name="creatureName">Name of the custom creature to search.</param>
            <returns>The <see cref="T:Jotunn.Entities.CustomCreature"/> if found.</returns>
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.GetCreaturePrefab(System.String)">
            <summary>
                Get a custom or vanilla creature prefab by its name.
            </summary>
            <param name="creatureName">Name of the creature to search.</param>
            <returns>The prefab of the creature if found.</returns>
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.RemoveCreature(System.String)">
            <summary>
                Remove a custom creature by its name.
            </summary>
            <param name="creatureName">Name of the creature to remove.</param>
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.RemoveCreature(Jotunn.Entities.CustomCreature)">
            <summary>
                Remove a custom creature by its ref. Removes the custom recipe, too.
            </summary>
            <param name="creature"><see cref="T:Jotunn.Entities.CustomCreature"/> to remove.</param>
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.InvokeOnVanillaCreaturesAvailable">
            <summary>
                Safely invoke the <see cref="E:Jotunn.Managers.CreatureManager.OnVanillaCreaturesAvailable"/> event
            </summary>
            
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.FixReferences(ZNetScene)">
            <summary>
                Resolve mocks of all custom creatures if necessary.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.InvokeOnCreaturesRegistered">
            <summary>
                Safely invoke the <see cref="E:Jotunn.Managers.CreatureManager.OnCreaturesRegistered"/> event.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.AddSpawnListToSpawnSystem(SpawnSystem)">
            <summary>
                Add the internal <see cref="T:SpawnSystemList"/> to the awoken spawner if not already added.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.CreatureManager.EnableCumulativeLevelEffects(LevelEffects,System.Int32)">
            <summary>
                Enable cumulative level effects for custom creatures requesting it. Thx ASP for the code.
            </summary>
        </member>
        <member name="T:Jotunn.Managers.GUIManager">
            <summary>
                Manager for handling anything GUI related. Provides Valheim style 
                GUI elements as well as an anchor for custom GUI prefabs.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.GUIManager.Instance">
            <summary>
                Singleton instance
            </summary>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="E:Jotunn.Managers.GUIManager.OnPixelFixCreated">
            <summary>
                Event that gets fired every time the Unity scene changed and a new PixelFix
                object was created. Subscribe to this event to create your custom GUI objects
                and add them as a child to the <see cref="P:Jotunn.Managers.GUIManager.PixelFix"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.GUIManager.PixelFix">
            <summary>
                GUI container with automatic scaling for high res displays.
                Gets rebuild at every scene change so make sure to add your custom
                GUI prefabs again on each scene change.
            </summary>
        </member>
        <member name="E:Jotunn.Managers.GUIManager.OnCustomGUIAvailable">
            <summary>
                Event that gets fired every time the Unity scene changed and new CustomGUI 
                objects were created. Subscribe to this event to create your custom GUI objects
                and add them as a child to either <see cref="P:Jotunn.Managers.GUIManager.CustomGUIFront"/> or <see cref="P:Jotunn.Managers.GUIManager.CustomGUIBack"/>.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.GUIManager.CustomGUIFront">
            <summary>
                GUI container in front of Valheim's GUI elements with automatic scaling for
                high res displays and pixel correction.
                Gets rebuild at every scene change so make sure to add your custom
                GUI prefabs again on each scene change.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.GUIManager.CustomGUIBack">
            <summary>
                GUI container behind Valheim's GUI elements with automatic scaling for
                high res displays and pixel correction.
                Gets rebuild at every scene change so make sure to add your custom
                GUI prefabs again on each scene change.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.UILayer">
            <summary>
                Unity layer constant for UI objects.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.ValheimOrange">
            <summary>
                The default Valheim orange color.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.ValheimScrollbarHandleColorBlock">
            <summary>
                Scrollbar handle color block in default Valheim orange.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.ValheimToggleColorBlock">
            <summary>
                Toggle color block in Valheim style.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.ValheimButtonColorBlock">
            <summary>
                Button color block in Valheim style
            </summary>
        </member>
        <member name="P:Jotunn.Managers.GUIManager.AveriaSerif">
            <summary>
                Valheim standard font normal faced.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.GUIManager.AveriaSerifBold">
            <summary>
                Valheims standard font bold faced.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.ValheimControlResources">
            <summary>
                <see cref="T:UnityEngine.UI.DefaultControls.Resources"/> with default Valheim assets.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.UIAtlas">
            <summary>
                SpriteAtlas holding the references to the sprites used in the helper methods.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.IconAtlas">
            <summary>
                SpriteAtlas holding the references to the sprites used in the helper methods.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.GUIInStart">
            <summary>
                Indicates if the PixelFix must be created for the start or main scene.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.Headless">
            <summary>
                Cache headless state
            </summary>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.IsHeadless">
            <summary>
                Detect headless mode (aka dedicated server)
            </summary>
            <returns></returns>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.InputBlocked">
            <summary>
                Global indicator if the input is currently blocked by the GUIManager.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.GUIManager.InputBlockRequests">
            <summary>
                Counter to track multiple block requests.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.BlockInput(System.Boolean)">
            <summary>
                Block all input except GUI
            </summary>
            <param name="state">Indicator if the input should be blocked or released</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.EnableInputBlock">
            <summary>
                Enable the InputBlock
            </summary>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ResetInputBlock">
            <summary>
                Reset the InputBlock to its initial state (disabled)
            </summary>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.Init">
            <summary>
                Initialize the manager
            </summary>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.InitialLoad(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.LoadSceneMode)">
            <summary>
                Load GUI assets on first start
            </summary>
            <param name="scene"></param>
            <param name="loadMode"></param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateCustomGUI(UnityEngine.Transform)">
            <summary>
                Create GameObjects for mods to append their custom GUI to
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.AddKeyHint(Jotunn.Configs.KeyHintConfig)">
            <summary>
                Add a <see cref="T:Jotunn.Configs.KeyHintConfig"/> to the manager.<br />
                Checks if the custom key hint is unique (i.e. the first one registered for an item).<br />
                Custom status effects are displayed in the game instead of the default 
                KeyHints for equipped tools or weapons they are registered for.
            </summary>
            <param name="hintConfig">The custom key hint config to add.</param>
            <returns>true if the custom key hint config was added to the manager.</returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.RemoveKeyHint(Jotunn.Configs.KeyHintConfig)">
            <summary>
                Removes a <see cref="T:Jotunn.Configs.KeyHintConfig"/> from the game.
            </summary>
            <param name="hintConfig">The custom key hint config to add.</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.GetSprite(System.String)">
            <summary>
                Get a sprite by name.
            </summary>
            <param name="spriteName">The sprite name</param>
            <returns>The sprite with given name</returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateColorPicker(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Color,System.String,Jotunn.GUI.ColorPicker.ColorEvent,Jotunn.GUI.ColorPicker.ColorEvent,System.Boolean)">
            <summary>
                Creates and displays a Valheim style ColorPicker
            </summary>
            <param name="anchorMin">Min anchor on first instantiation</param>
            <param name="anchorMax">Max anchor on first instantiation</param>
            <param name="position">Position on first instantiation</param>
            <param name="original">Color before editing</param>
            <param name="message">Display message</param>
            <param name="onColorChanged">Event that gets called when the color gets modified</param>
            <param name="onColorSelected">Event that gets called when one of the buttons done or cancel get pressed</param>
            <param name="useAlpha">When set to false the colors used don't have an alpha channel</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateGradientPicker(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Gradient,System.String,Jotunn.GUI.GradientPicker.GradientEvent,Jotunn.GUI.GradientPicker.GradientEvent)">
            <summary>
                Creates and displays a Valheim style GradientPicker
            </summary>
            <param name="anchorMin">Min anchor on first instantiation</param>
            <param name="anchorMax">Max anchor on first instantiation</param>
            <param name="position">Position on first instantiation</param>
            <param name="original">Color before editing</param>
            <param name="message">Display message</param>
            <param name="onGradientChanged">Event that gets called when the gradient gets modified</param>
            <param name="onGradientSelected">Event that gets called when one of the buttons done or cancel gets pressed</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateWoodpanel(UnityEngine.Transform,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
                Creates a Valheim style woodpanel which is draggable per default
            </summary>
            <param name="parent">Parent <see cref="T:UnityEngine.Transform"/></param>
            <param name="anchorMin">Minimal anchor</param>
            <param name="anchorMax">Maximal anchor</param>
            <param name="position">Anchored position</param>
            <param name="width">Optional width</param>
            <param name="height">Optional height</param>
            <returns>A <see cref="T:UnityEngine.GameObject"/> as a Valheim style woodpanel</returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateWoodpanel(UnityEngine.Transform,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,System.Boolean)">
            <summary>
                Creates a Valheim style woodpanel, can optionally be draggable
            </summary>
            <param name="parent">Parent <see cref="T:UnityEngine.Transform"/></param>
            <param name="anchorMin">Minimal anchor</param>
            <param name="anchorMax">Maximal anchor</param>
            <param name="position">Anchored position</param>
            <param name="width">Optional width</param>
            <param name="height">Optional height</param>
            <param name="draggable">Optional flag if the panel should be draggable (default true)</param>
            <returns>A <see cref="T:UnityEngine.GameObject"/> as a Valheim style woodpanel</returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateScrollView(UnityEngine.Transform,System.Boolean,System.Boolean,System.Single,System.Single,UnityEngine.UI.ColorBlock,UnityEngine.Color,System.Single,System.Single)">
            <summary>
                Create a complete scroll view
            </summary>
            <param name="parent">parent transform</param>
            <param name="showHorizontalScrollbar">show horizontal scrollbar</param>
            <param name="showVerticalScrollbar">show vertical scrollbar</param>
            <param name="handleSize">size of the handle</param>
            <param name="handleDistanceToBorder"></param>
            <param name="handleColors">Colorblock for the handle</param>
            <param name="slidingAreaBackgroundColor">Background color for the sliding area</param>
            <param name="width">rect width</param>
            <param name="height">rect height</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateText(System.String,UnityEngine.Transform,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Font,System.Int32,UnityEngine.Color,System.Boolean,UnityEngine.Color,System.Single,System.Single,System.Boolean)">
            <summary>
                Create a <see cref="T:UnityEngine.GameObject"/> with a Text (and optional Outline and ContentSizeFitter) component
            </summary>
            <param name="text">Text to show</param>
            <param name="parent">Parent transform</param>
            <param name="anchorMin">Anchor min</param>
            <param name="anchorMax">Anchor max</param>
            <param name="position">Anchored position</param>
            <param name="font">Font</param>
            <param name="fontSize">Font size</param>
            <param name="color">Font color</param>
            <param name="outline">Add outline component</param>
            <param name="outlineColor">Outline color</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
            <param name="addContentSizeFitter">Add ContentSizeFitter</param>
            <returns>A text <see cref="T:UnityEngine.GameObject"/></returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateButton(System.String,UnityEngine.Transform,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
                Create a new button (Valheim style).
            </summary>
            <param name="text">Text to display on the button</param>
            <param name="parent">Parent transform</param>
            <param name="anchorMin">Min anchor</param>
            <param name="anchorMax">Max anchor</param>
            <param name="position">Position</param>
            <param name="width">Set width if > 0</param>
            <param name="height">Set height if > 0</param>
            <returns>Button GameObject in Valheim style</returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateInputField(UnityEngine.Transform,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.UI.InputField.ContentType,System.String,System.Int32,System.Single,System.Single)">
            <summary>
                Create a new InputField (Valheim style).
            </summary>
            <param name="parent">Parent transform</param>
            <param name="anchorMin">Min anchor</param>
            <param name="anchorMax">Max anchor</param>
            <param name="position">Position</param>
            <param name="contentType">Content type for the input field</param>
            <param name="placeholderText">Text to display as a placeholder (can be null)</param>
            <param name="fontSize">Optional font size, defaults to 16</param>
            <param name="width">Set width if > 0</param>
            <param name="height">Set height if > 0</param>
            <returns>Input field GameObject in Valheim style</returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateToggle(UnityEngine.Transform,System.Single,System.Single)">
            <summary>
                Create toggle field
            </summary>
            <param name="parent">Parent transform</param>
            <param name="width">Set width</param>
            <param name="height">Set height</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateDropDown(UnityEngine.Transform,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
            <summary>
                Create dropdown field
            </summary>
            <param name="parent">Parent transform</param>
            <param name="anchorMin">Min anchor</param>
            <param name="anchorMax">Max anchor</param>
            <param name="position">Position</param>
            <param name="fontSize">Optional font size, defaults to 16</param>
            <param name="width">Set width if > 0</param>
            <param name="height">Set height if > 0</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.CreateKeyBindField(System.String,UnityEngine.Transform,System.Single,System.Single)">
            <summary>
                Create key binding field
            </summary>
            <param name="text"></param>
            <param name="parent"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplyWoodpanelStyle(UnityEngine.Transform)">
            <summary>
                Apply Valheim style to a woodpanel.
            </summary>
            <param name="woodpanel"></param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplyTextStyle(UnityEngine.UI.Text,UnityEngine.Font,UnityEngine.Color,System.Int32,System.Boolean)">
            <summary>
                Apply Valheim style to a <see cref="T:UnityEngine.UI.Text"/> Component
            </summary>
            <param name="text">Target component</param>
            <param name="font">Own font or <code>GUIManager.Instance.AveriaSerifBold</code>/<code>GUIManager.Instance.AveriaSerif</code></param>
            <param name="color">Custom color or <code>GUIManager.Instance.ValheimOrange</code></param>
            <param name="createOutline">creates an <see cref="T:UnityEngine.UI.Outline"/> component when true</param>
            <param name="fontSize">Optional font size, defaults to 16</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplyTextStyle(UnityEngine.UI.Text,UnityEngine.Color,System.Int32,System.Boolean)">
            <summary>
                Apply Valheim style to a <see cref="T:UnityEngine.UI.Text"/> Component.
                Uses <code>GUIManager.Instance.AveriaSerifBold</code> by default
            </summary>
            <param name="text">Target component</param>
            <param name="color">Custom color or <code>GUIManager.Instance.ValheimOrange</code></param>
            <param name="createOutline">creates an <see cref="T:UnityEngine.UI.Outline"/> component when true</param>
            <param name="fontSize">Optional font size, defaults to 16</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplyTextStyle(UnityEngine.UI.Text,System.Int32)">
            <summary>
                Apply Valheim style to a <see cref="T:UnityEngine.UI.Text"/> Component.
                Uses <code>GUIManager.Instance.AveriaSerifBold</code>, <code>Color.white</code> and creates an outline by default
            </summary>
            <param name="text">Target component</param>
            <param name="fontSize">Optional font size, defaults to 16</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplyButtonStyle(UnityEngine.UI.Button,System.Int32)">
            <summary>
                Apply valheim style to a <see cref="T:UnityEngine.UI.Button"/> Component
            </summary>
            <param name="button">Component to apply the style to</param>
            <param name="fontSize">Optional font size, defaults to 16</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplyInputFieldStyle(UnityEngine.UI.InputField)">
            <summary>
                Apply Valheim style to an <see cref="T:UnityEngine.UI.InputField"/> Component.
            </summary>
            <param name="field">Component to apply the style to</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplyInputFieldStyle(UnityEngine.UI.InputField,System.Int32)">
            <summary>
                Apply Valheim style to an <see cref="T:UnityEngine.UI.InputField"/> Component.
            </summary>
            <param name="field">Component to apply the style to</param>
            <param name="fontSize">Optional font size, defaults to 16</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplyToogleStyle(UnityEngine.UI.Toggle)">
            <summary>
                Apply Valheim style to a <see cref="T:UnityEngine.UI.Toggle"/> component.
            </summary>
            <param name="toggle">Component to apply the style to</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplyDropdownStyle(UnityEngine.UI.Dropdown,System.Int32)">
            <summary>
                Apply Valheim style to a <see cref="T:UnityEngine.UI.Dropdown"/> component.
            </summary>
            <param name="dropdown">Component to apply the style to</param>
            <param name="fontSize">Optional font size, defaults to 16</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplyScrollRectStyle(UnityEngine.UI.ScrollRect)">
            <summary>
                Apply Valheim style to a <see cref="T:UnityEngine.UI.ScrollRect"/> component.
            </summary>
            <param name="scrollRect">Component to apply the style to</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplyScrollbarStyle(UnityEngine.UI.Scrollbar)">
            <summary>
                Apply Valheim style to a <see cref="T:UnityEngine.UI.Scrollbar"/> component.
            </summary>
            <param name="scrollbar">Component to apply the style to</param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplySliderStyle(UnityEngine.UI.Slider)">
            <summary>
                Apply Valheim style to a <see cref="T:UnityEngine.UI.Slider"/> component.
            </summary>
            <param name="slider"></param>
        </member>
        <member name="M:Jotunn.Managers.GUIManager.ApplySliderStyle(UnityEngine.UI.Slider,UnityEngine.Vector2)">
            <summary>
                Apply Valheim style to a <see cref="T:UnityEngine.UI.Slider"/> component.
            </summary>
            <param name="slider"></param>
            <param name="handleSize"></param>
        </member>
        <member name="T:Jotunn.Managers.InputManager">
            <summary>
               Manager for handling custom inputs registered by mods.
            </summary>
        </member>
        <member name="T:Jotunn.Managers.InputManager.GamepadButton">
            <summary>
                Abstraction for gamepad buttons and axes used as inputs
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.None">
            <summary>
                No gamepad button, internally treated as null
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.DPadUp">
            <summary>
                Up direction on the directional pad
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.DPadDown">
            <summary>
                Down direction on the directional pad
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.DPadLeft">
            <summary>
                Left direction on the directional pad
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.DPadRight">
            <summary>
                Right direction on the directional pad
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.ButtonSouth">
            <summary>
                Southern button on the gamepad (A on XBox-like)
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.ButtonEast">
            <summary>
                Eastern button on the gamepad (B on XBox-like)
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.ButtonWest">
            <summary>
                Western button on the gamepad (X on XBox-like)
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.ButtonNorth">
            <summary>
                Nothern button on the gamepad (Y on XBox-like)
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.LeftShoulder">
            <summary>
                Left shoulder button
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.RightShoulder">
            <summary>
                Right shoulder button
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.LeftTrigger">
            <summary>
                Left trigger
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.RightTrigger">
            <summary>
                Right trigger
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.SelectButton">
            <summary>
                Left special button (Back on XBox-like)
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.StartButton">
            <summary>
                Right special button (Menu on XBox-like)
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.LeftStickButton">
            <summary>
                Left Joystick press
            </summary>
        </member>
        <member name="F:Jotunn.Managers.InputManager.GamepadButton.RightStickButton">
            <summary>
                Right Joystick press
            </summary>
        </member>
        <member name="M:Jotunn.Managers.InputManager.GetGamepadKeyCode(Jotunn.Managers.InputManager.GamepadButton)">
            <summary>
                Translate a <see cref="T:Jotunn.Managers.InputManager.GamepadButton"/> to its <see cref="T:UnityEngine.KeyCode"/> value
            </summary>
        </member>
        <member name="M:Jotunn.Managers.InputManager.GetGamepadAxis(Jotunn.Managers.InputManager.GamepadButton)">
            <summary>
                Translate a <see cref="T:Jotunn.Managers.InputManager.GamepadButton"/> to its axis string value
            </summary>
        </member>
        <member name="M:Jotunn.Managers.InputManager.GetGamepadString(Jotunn.Managers.InputManager.GamepadButton)">
            <summary>
                Translate a <see cref="T:Jotunn.Managers.InputManager.GamepadButton"/> to its printable string value
            </summary>
        </member>
        <member name="M:Jotunn.Managers.InputManager.GetGamepadButton(System.String)">
            <summary>
                Translate an axis string to its <see cref="T:Jotunn.Managers.InputManager.GamepadButton"/> value
            </summary>
        </member>
        <member name="M:Jotunn.Managers.InputManager.GetGamepadButton(UnityEngine.KeyCode)">
            <summary>
                Translate a <see cref="T:UnityEngine.KeyCode"/> to its <see cref="T:Jotunn.Managers.InputManager.GamepadButton"/> value
            </summary>
        </member>
        <member name="P:Jotunn.Managers.InputManager.Instance">
            <summary>
                Singleton instance
            </summary>
        </member>
        <member name="M:Jotunn.Managers.InputManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="M:Jotunn.Managers.InputManager.Init">
            <summary>
                Initialize the manager
            </summary>
        </member>
        <member name="M:Jotunn.Managers.InputManager.AddButton(System.String,Jotunn.Configs.ButtonConfig)">
            <summary>
                Add a Button to Valheim
            </summary>
            <param name="modGuid">Mod GUID</param>
            <param name="buttonConfig">Button config</param>
        </member>
        <member name="T:Jotunn.Managers.ItemManager">
            <summary>
               Manager for handling all custom data added to the game related to items.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.ItemManager.Instance">
            <summary>
                The singleton instance of this manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="E:Jotunn.Managers.ItemManager.OnVanillaItemsAvailable">
            <summary>
                Event that gets fired after the vanilla items are in memory and available for cloning.
                Your code will execute every time a new ObjectDB is copied (on every menu start).
                If you want to execute just once you will need to unregister from the event after execution.
            </summary>
        </member>
        <member name="E:Jotunn.Managers.ItemManager.OnKitbashItemsAvailable">
            <summary>
                Internal event that gets fired after <see cref="E:Jotunn.Managers.ItemManager.OnVanillaItemsAvailable"/> did run.
                On this point all mods should have their items and pieces registered with the managers.
            </summary>
        </member>
        <member name="E:Jotunn.Managers.ItemManager.OnItemsRegisteredFejd">
            <summary>
                Event that gets fired after all items were added to the ObjectDB on the FejdStartup screen.
                Your code will execute every time a new ObjectDB is copied (on every menu start).
                If you want to execute just once you will need to unregister from the event after execution.
            </summary>
        </member>
        <member name="E:Jotunn.Managers.ItemManager.OnItemsRegistered">
            <summary>
                Event that gets fired after all items were added to the ObjectDB.
                Your code will execute every time a new ObjectDB is created (on every game start).
                If you want to execute just once you will need to unregister from the event after execution.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.Init">
            <summary>
                Registers all hooks.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.AddItem(Jotunn.Entities.CustomItem)">
            <summary>
                Add a <see cref="T:Jotunn.Entities.CustomItem"/> to the game.<br />
                Checks if the custom item is valid and unique and adds it to the list of custom items.<br />
                Also adds the prefab of the custom item to the <see cref="T:Jotunn.Managers.PrefabManager"/>.<br />
                Custom items are added to the current <see cref="T:ObjectDB"/> on every <see cref="M:ObjectDB.Awake"/>.
            </summary>
            <param name="customItem">The custom item to add.</param>
            <returns>true if the custom item was added to the manager.</returns>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.GetItem(System.String)">
            <summary>
                Get a custom item by its name.
            </summary>
            <param name="itemName">Name of the item to search.</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RemoveItem(System.String)">
            <summary>
                Remove a custom item by its name. Removes the custom recipe, too.
            </summary>
            <param name="itemName">Name of the item to remove.</param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RemoveItem(Jotunn.Entities.CustomItem)">
            <summary>
                Remove a custom item by its ref. Removes the custom recipe, too.
            </summary>
            <param name="item"><see cref="T:Jotunn.Entities.CustomItem"/> to remove.</param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.AddRecipe(Jotunn.Entities.CustomRecipe)">
            <summary>
                Add a <see cref="T:Jotunn.Entities.CustomRecipe"/> to the game.<br />
                Checks if the custom recipe is unique and adds it to the list of custom recipes.<br />
                Custom recipes are added to the current <see cref="T:ObjectDB"/> on every <see cref="M:ObjectDB.Awake"/>.
            </summary>
            <param name="customRecipe">The custom recipe to add.</param>
            <returns>true if the custom recipe was added to the manager.</returns>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.AddRecipesFromJson(System.String)">
            <summary>
                Adds recipes defined in a JSON file at given path, relative to BepInEx/plugins
            </summary>
            <param name="path">JSON file path, relative to BepInEx/plugins folder</param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.GetRecipe(System.String)">
            <summary>
                Get a custom recipe by its name.
            </summary>
            <param name="recipeName">Name of the recipe to search.</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RemoveRecipe(System.String)">
            <summary>
                Remove a custom recipe by its name. Removes it from the manager and the <see cref="T:ObjectDB"/>, if instantiated.
            </summary>
            <param name="recipeName">Name of the recipe to remove.</param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RemoveRecipe(Jotunn.Entities.CustomRecipe)">
            <summary>
                Remove a custom recipe by its ref. Removes it from the manager and the <see cref="T:ObjectDB"/>, if instantiated.
            </summary>
            <param name="recipe"><see cref="T:Jotunn.Entities.CustomRecipe"/> to remove.</param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.AddStatusEffect(Jotunn.Entities.CustomStatusEffect)">
            <summary>
                Add a <see cref="T:Jotunn.Entities.CustomStatusEffect"/> to the game.<br />
                Checks if the custom status effect is unique and adds it to the list of custom status effects.<br />
                Custom status effects are added to the current <see cref="T:ObjectDB"/> on every <see cref="M:ObjectDB.Awake"/>.
            </summary>
            <param name="customStatusEffect">The custom status effect to add.</param>
            <returns>true if the custom status effect was added to the manager.</returns>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.AddItemConversion(Jotunn.Entities.CustomItemConversion)">
            <summary>
                Add a new item conversion
            </summary>
            <param name="itemConversion">Item conversion details</param>
            <returns>Whether the addition was successful or not</returns>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RegisterCustomItems(ObjectDB)">
            <summary>
                Register all custom items added to the manager to the given <see cref="T:ObjectDB"/>
            </summary>
            <param name="objectDB"></param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RegisterItemInObjectDB(UnityEngine.GameObject)">
            <summary>
                Register a single item in the current ObjectDB.
                Also adds the prefab to the <see cref="T:Jotunn.Managers.PrefabManager"/> and <see cref="T:ZNetScene"/> if necessary.<br />
                No mock references are fixed.
            </summary>
            <param name="prefab"><see cref="T:UnityEngine.GameObject"/> with an <see cref="T:ItemDrop"/> component to add to the <see cref="T:ObjectDB"/></param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RegisterItemInObjectDB(ObjectDB,UnityEngine.GameObject)">
            <summary>
                Internal method for adding a prefab to a specific ObjectDB.
            </summary>
            <param name="objectDB"><see cref="T:ObjectDB"/> the prefab should be added to</param>
            <param name="prefab"><see cref="T:UnityEngine.GameObject"/> with an <see cref="T:ItemDrop"/> component to add</param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RegisterCustomRecipes(ObjectDB)">
            <summary>
                Register the custom recipes added to the manager to the given <see cref="T:ObjectDB"/>
            </summary>
            <param name="objectDB"></param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RegisterCustomStatusEffects(ObjectDB)">
            <summary>
                Register the custom status effects added to the manager to the given <see cref="T:ObjectDB"/>
            </summary>
            <param name="objectDB"></param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RegisterCustomItemConversions">
            <summary>
                Register the custom item conversions added to the manager
            </summary>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RegisterCustomDataFejd(ObjectDB,ObjectDB)">
            <summary>
                Prefix on <see cref="M:ObjectDB.CopyOtherDB(ObjectDB)"/> to add custom items to FejdStartup screen (aka main menu)
            </summary>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.InvokeOnVanillaItemsAvailable">
            <summary>
                Safely invoke the <see cref="E:Jotunn.Managers.ItemManager.OnVanillaItemsAvailable"/> event
            </summary>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.InvokeOnKitbashItemsAvailable">
            <summary>
                Safely invoke the <see cref="E:Jotunn.Managers.ItemManager.OnKitbashItemsAvailable"/> event
            </summary>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.InvokeOnItemsRegisteredFejd(ObjectDB)">
            <summary>
                Safely invoke the <see cref="E:Jotunn.Managers.ItemManager.OnItemsRegisteredFejd"/> event late in the detour chain
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.RegisterCustomData(ObjectDB)">
            <summary>
                Hook on <see cref="M:ObjectDB.Awake"/> to register all custom entities from this manager to the <see cref="T:ObjectDB"/>.
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.InvokeOnItemsRegistered(ObjectDB)">
            <summary>
                Safely invoke the <see cref="E:Jotunn.Managers.ItemManager.OnItemsRegistered"/> event
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Jotunn.Managers.ItemManager.ReloadKnownRecipes(Player)">
            <summary>
                Hook on <see cref="M:Player.OnSpawned"/> to refresh recipes for the custom items.
            </summary>
            <param name="self"></param>
        </member>
        <member name="T:Jotunn.Managers.KeyHintManager">
            <summary>
                Manager for handling custom key hints
            </summary>
        </member>
        <member name="P:Jotunn.Managers.KeyHintManager.Instance">
            <summary>
                Singleton instance
            </summary>
        </member>
        <member name="M:Jotunn.Managers.KeyHintManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="F:Jotunn.Managers.KeyHintManager.KeyHints">
            <summary>
                Internal Dictionary holding the references to the custom key hints added to the manager
            </summary>
        </member>
        <member name="F:Jotunn.Managers.KeyHintManager.KeyHintObjects">
            <summary>
                Internal Dictionary holding the references to the key hint GameObjects created per KeyHintConfig
            </summary>
        </member>
        <member name="F:Jotunn.Managers.KeyHintManager.KeyHintInstance">
            <summary>
                Reference to the current "KeyHints" instance
            </summary>
        </member>
        <member name="F:Jotunn.Managers.KeyHintManager.KeyHintContainer">
            <summary>
                Reference to the games "KeyHint" GameObjects RectTransform
            </summary>
        </member>
        <member name="F:Jotunn.Managers.KeyHintManager.BaseKey">
            <summary>
                Base GameObjects of vanilla key hint parts
            </summary>
        </member>
        <member name="M:Jotunn.Managers.KeyHintManager.Init">
            <summary>
                Initialize the manager
            </summary>
        </member>
        <member name="M:Jotunn.Managers.KeyHintManager.AddKeyHint(Jotunn.Configs.KeyHintConfig)">
            <summary>
                Add a <see cref="T:Jotunn.Configs.KeyHintConfig"/> to the manager.<br />
                Checks if the custom key hint is unique (i.e. the first one registered for an item).<br />
                Custom key hints are displayed in the game instead of the default 
                KeyHints for equipped tools or weapons they are registered for.
            </summary>
            <param name="hintConfig">The custom key hint config to add.</param>
            <returns>true if the custom key hint config was added to the manager.</returns>
        </member>
        <member name="M:Jotunn.Managers.KeyHintManager.RemoveKeyHint(Jotunn.Configs.KeyHintConfig)">
            <summary>
                Removes a <see cref="T:Jotunn.Configs.KeyHintConfig"/> from the game.
            </summary>
            <param name="hintConfig">The custom key hint config to add.</param>
        </member>
        <member name="M:Jotunn.Managers.KeyHintManager.GetBaseGameObjects(KeyHints)">
            <summary>
                Instantiate base GameObjects from vanilla KeyHints to use in our custom key hints
            </summary>
        </member>
        <member name="M:Jotunn.Managers.KeyHintManager.KeyHints_Start(KeyHints)">
            <summary>
                Extract base key hint elements and create key hint objects.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.KeyHintManager.CreateKeyHintObject(Jotunn.Configs.KeyHintConfig)">
            <summary>
                Copy vanilla BuildHints object and create a custom one from a KeyHintConfig.
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Jotunn.Managers.KeyHintManager.KeyHints_UpdateHints(KeyHints)">
            <summary>
                Hook on <see cref="M:KeyHints.UpdateHints" /> to show custom key hints instead of the vanilla ones.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.KeyHintManager.ZInput_Save(ZInput)">
            <summary>
                Set any key hint config using buttons without a backing bep config dirty
            </summary>
        </member>
        <member name="T:Jotunn.Managers.KitbashManager">
            <summary>
                Manager for handling Kitbashed objects
            </summary>
        </member>
        <member name="P:Jotunn.Managers.KitbashManager.Instance">
            <summary>
                The singleton instance of this manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.KitbashManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="F:Jotunn.Managers.KitbashManager.KitbashObjects">
            <summary>
                Internal list of objects to which Kitbashing should be applied.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.KitbashManager.Init">
            <summary>
                Registers all hooks.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.KitbashManager.AddKitbash(UnityEngine.GameObject,Jotunn.Configs.KitbashConfig)">
            <summary>
                Register a prefab with a KitbashConfig to be applied when the vanilla prefabs are available
            </summary>
            <param name="prefab">Prefab to add kitbashed parts to</param>
            <param name="kitbashConfig">KitbashConfig to apply to the prefab</param>
            <returns>The KitbashObject container for this prefab</returns>
        </member>
        <member name="M:Jotunn.Managers.KitbashManager.ApplyKitbashes">
            <summary>
                Apply all Kitbashs to the objects registered in the manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.KitbashManager.ApplyKitbash(Jotunn.Entities.KitbashObject)">
            <summary>
                Apply kitbash to a single object.
            </summary>
            <param name="kitbashObject"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Managers.LocalizationManager">
            <summary> 
                Manager for handling localizations for all custom content added to the game.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.LocalizationManager.Localizations">
            <summary> 
                List where all data is collected.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.LocalizationManager.TokenFirstChar">
            <summary> 
                Your token must start with this character.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.LocalizationManager.DefaultLanguage">
            <summary> 
                Default language of the game.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.LocalizationManager.TranslationsFolderName">
            <summary> 
                Name of the folder that will hold the custom .json translations files.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.LocalizationManager.CommunityTranslationFileName">
            <summary> 
                Name of the community translation files that will be the first custom languages files loaded before any others.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.LocalizationManager.ForbiddenChars">
            <summary> 
                String of chars not allowed in a token string.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.LocalizationManager.ForbiddenCharsArr">
            <summary> 
                Array of chars not allowed in a token string.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.LocalizationManager.Instance">
            <summary> 
                The singleton instance of this manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="F:Jotunn.Managers.LocalizationManager.JotunnLocalization">
            <summary> 
                Localizations for internal use.
            </summary>
        </member>
        <member name="E:Jotunn.Managers.LocalizationManager.OnLocalizationAdded">
            <summary>
                Event that gets fired after all custom localization has been added to the game.
                Use this event if you need to translate strings using the vanilla <see cref="T:Localization"/> class.
                Your code will execute every time the localization gets reset (on every menu start).
                If you want to execute just once you will need to unregister from the event after execution.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.LocalizationManager.DoQuoteLineSplit">
            <summary> 
                Call into unity's DoQuoteLineSplit.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.Init">
            <summary> 
                Initialize localization manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.AddLocalization(Jotunn.Entities.CustomLocalization)">
            <summary>
                Add your mod's custom localization. Only one <see cref="T:Jotunn.Entities.CustomLocalization"/> can be added per mod.
            </summary>
            <param name="customLocalization">The localization to add.</param>
            <returns>true if the custom localization was added to the manager.</returns>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.GetLocalization">
            <summary>
                Get the CustomLocalization for your mod.
                Creates a new <see cref="T:Jotunn.Entities.CustomLocalization"/> if no localization was added before.
            </summary>
            <returns>Existing or newly created <see cref="T:Jotunn.Entities.CustomLocalization"/>.</returns>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.GetLocalization(BepInEx.BepInPlugin)">
            <summary>
                Get the CustomLocalization for a given mod.
                Creates a new <see cref="T:Jotunn.Entities.CustomLocalization"/> if no localization was added before.
            </summary>
            <returns>Existing or newly created <see cref="T:Jotunn.Entities.CustomLocalization"/>.</returns>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.TryTranslate(System.String)">
            <summary>
                Retrieve a translation if it's found in any CustomLocalization or <see cref="M:Localization.Translate(System.String)"/>.
            </summary>
            <param name="word"> Word to translate. </param>
            <returns> Translated word in player language or english as a fallback. </returns>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.AddLocalization(Jotunn.Configs.LocalizationConfig)">
            <summary> 
                Registers a new Localization for a language.
            </summary>
            <param name="config"> Wrapper which contains a language and a Token-Value dictionary. </param>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.AddLocalization(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> 
                Registers a new Localization for a language.
            </summary>
            <param name="language"> The language being added. </param>
            <param name="localization"> Token-Value dictionary. </param>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.AddToken(System.String,System.String,System.Boolean)">
            <summary> 
                Add a token and its value to the "English" language.
            </summary>
            <param name="token"> Token </param>
            <param name="value"> Translation. </param>
            <param name="forceReplace"> Replace the token if it already exists </param>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.AddToken(System.String,System.String,System.String,System.Boolean)">
            <summary> 
                Add a token and its value to the specified language (default to "English").
            </summary>
            <param name="token"> Token </param>
            <param name="value"> Translation. </param>
            <param name="language"> Language ID for this token. </param>
            <param name="forceReplace"> Replace the token if it already exists </param>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.AddPath(System.String,System.Boolean)">
            <summary> 
                Add a file via absolute path.
            </summary>
            <param name="path"> Absolute path to file. </param>
            <param name="isJson"> Is the language file a json file. </param>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.AddJson(System.String,System.String)">
            <summary>
                Add a json language file (match crowdin format).
            </summary>
            <param name="language"> Language for the json file, for example, "English" </param>
            <param name="fileContent"> Entire file as string </param>
        </member>
        <member name="M:Jotunn.Managers.LocalizationManager.AddLanguageFile(System.String)">
            <summary>
                Add a language file that matches Valheim's language format.
            </summary>
            <param name="fileContent"> Entire file as string </param>
        </member>
        <member name="T:Jotunn.Managers.MinimapManager">
            <summary>
                Manager for adding custom Map Overlays to the game.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.Instance">
            <summary>
                The singleton instance of this manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="E:Jotunn.Managers.MinimapManager.OnVanillaMapAvailable">
            <summary>
                Event that gets fired once the Map for a World has started and Mods can begin to draw.
            </summary>
        </member>
        <member name="E:Jotunn.Managers.MinimapManager.OnVanillaMapDataLoaded">
            <summary>
                Event that gets fired once data for a specific Map for a world has been loaded. Eg, Pins are available after this has fired.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.MinimapManager.FilterOn">
            <summary>
                Colour which sets a filter on. Used for ForestFilter and FogFilter.
                A full alpha value enables this pixel, and then the red value is written to the result texture.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.MinimapManager.FilterOff">
            <summary>
                Colour which sets a filter off. See FilterOn.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.MinimapManager.MeadowHeight">
            <summary>
                Height "Colour" used for the base height of "Meadows"
            </summary>
        </member>
        <member name="F:Jotunn.Managers.MinimapManager.Overlays">
            <summary>
                Container to hold all live Overlays.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.MinimapManager.Drawings">
            <summary>
                Container to hold all live Drawings.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.Init">
            <summary>
                Creates the Overlays and registers hooks.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.GetMapOverlay(System.String,System.Boolean)">
            <summary>
                Create a new MapOverlay with a custom overlay name
            </summary>
            <param name="name">Custom name for the MapOverlay</param>
            <param name="ignoreFog">When set to true, that layer will be drawn regardless of exploration status, defaults to false</param>
            <returns>Reference to MapOverlay for modder to edit</returns>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.GetMapDrawing(System.String)">
            <summary>
                Create a new MapDrawing with a custom overlay name
            </summary>
            <param name="name">Custom name for the MapDrawing</param>
            <returns>Reference to MapDrawing for modder to edit</returns>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.RemoveMapOverlay(System.String)">
            <summary>
                Causes MapManager to stop updating the MapOverlay object and removes this Manager's reference to that overlay.
            </summary>
            <param name="name">The name of the MapOverlay to be removed</param>
            <returns>True if removal was successful. False if there was an error removing the object from the internal dict.</returns>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.RemoveMapDrawing(System.String)">
            <summary>
                Causes MapManager to stop updating the MapDrawing object and removes this Manager's reference to that drawing.
            </summary>
            <param name="name">The name of the MapDrawing to be removed</param>
            <returns>True if removal was successful. False if there was an error removing the object from the internal dict.</returns>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.GetOverlayNames">
            <summary>
                Return a list of all current overlay names
            </summary>
            <returns>List of names</returns>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.GetDrawingNames">
            <summary>
                Return a list of all current MapDrawing names
            </summary>
            <returns>List of names</returns>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.WorldToOverlayCoords(UnityEngine.Vector3,System.Int32)">
            <summary>
                Input a World Coordinate and the size of the overlay texture to retrieve the translated overlay coordinates. 
            </summary>
            <param name="input">World Coordinates</param>
            <param name="texSize">Size of the image from your MapOverlay</param>
            <returns>The 2D coordinate space on the MapOverlay</returns>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.OverlayToWorldCoords(UnityEngine.Vector2,System.Int32)">
            <summary>
                Input a MapOverlay Coordinate and the size of the overlay texture to retrieve the translated World coordinates.
            </summary>
            <param name="input">The 2D Overlay coordinate</param>
            <param name="texSize">The size of the Overlay</param>
            <returns>The 3D World coordinate that corresponds to the input Vector</returns>
            
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.Minimap_Start">
            <summary>
                Setup GUI on <see cref="M:Minimap.Start"/>.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.InvokeOnVanillaMapAvailable">
            <summary>
                Safely invoke OnVanillaMapAvailable event.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.Minimap_LoadMapData">
            <summary>
                Setup textures and GUI on <see cref="M:Minimap.LoadMapData"/>
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.InvokeOnVanillaMapDataLoaded">
            <summary>
                Safely invoke InvokeOnVanillaMapDataLoaded event.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.DrawingsActive">
            <summary>
                Return whether the Drawings functionality is active.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.SetupDrawings">
            <summary>
                Called when the first MapDraw object is created.
                Initializes all variables required for MapDraw objects to be rendered.
                Changes the behaviour of some vanilla shaders.
            </summary>
        </member>
        <member name="T:Jotunn.Managers.MinimapManager.MapOverlay">
            <summary>
                Object for modders to use to access and modify their Overlay.
                Modders should modify the texture directly.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.MapOverlay.OverlayTex">
            <summary>
                Texture to draw overlay texture information to
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.MapOverlay.Enabled">
            <summary>
                Set true to render this overlay, false to hide
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.MapOverlay.Dirty">
            <summary>
                Flag to determine if this overlay had changes since its last draw
            </summary>
        </member>
        <member name="F:Jotunn.Managers.MinimapManager.MapOverlay.IgnoreFog">
            <summary>
                Flag to determine if this overlay should be hidden in unexplored areas
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.MapOverlay.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.MapOverlay.SetTextureDirty(UnityEngine.Texture2D)">
            <summary>
                Function called on Texture2D.Apply to check if one of our member textures was changed
            </summary>
            <param name="tex"></param>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.MapOverlay.Destroy">
            <summary>
                Destroys the overlay texture
            </summary>
        </member>
        <member name="T:Jotunn.Managers.MinimapManager.MapDrawing">
            <summary>
                Object for modders to use to access and modify their Overlay.
                Modders should modify the texture directly.
                
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.MapDrawing.MainTex">
            <summary>
                Texture to draw main texture information to
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.MapDrawing.HeightFilter">
            <summary>
                Texture to draw height filter information to
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.MapDrawing.ForestFilter">
            <summary>
                Texture to draw forest filter information to
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.MapDrawing.FogFilter">
            <summary>
                Texture to draw fog filter information to
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.MapDrawing.Enabled">
            <summary>
                Set true to render this overlay, false to hide
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.MapDrawing.Dirty">
            <summary>
                Flag to determine if this overlay had changes since its last draw
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.MapDrawing.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.MapDrawing.SetTextureDirty(UnityEngine.Texture2D)">
            <summary>
                Function called on Texture2D.Apply to check if one of our member textures was changed
            </summary>
            <param name="tex"></param>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.MapDrawing.Destroy">
            <summary>
                Destroys all textures
            </summary>
        </member>
        <member name="T:Jotunn.Managers.MinimapManager.MapOverlayBase">
            <summary>
                Overlay Base to inherit from
                
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.MapOverlayBase.Name">
            <summary>
                Unique name per overlay
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MinimapManager.MapOverlayBase.TextureSize">
            <summary>
                Initial texture size to calculate the relative drawing position
            </summary>
        </member>
        <member name="F:Jotunn.Managers.MinimapManager.MapOverlayBase.Toggle">
            <summary>
                Reference to the GUI toggle element to notify changes on the overlay state
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.MapOverlayBase.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MinimapManager.MapOverlayBase.Create(UnityEngine.Texture2D)">
            <summary>
                Helper function to create and copy overlay texture instances
            </summary>
        </member>
        <member name="T:Jotunn.Managers.MockManager">
            <summary>
                Handles all logic to do with managing mocked prefabs added into the game.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MockManager.Instance">
            <summary>
                The singleton instance of this manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MockManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="F:Jotunn.Managers.MockManager.MockPrefix">
            <summary>
                Legacy ValheimLib prefix used by the Mock System to recognize Mock gameObject that must be replaced at some point.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.MockManager.JVLMockPrefix">
            <summary>
                Prefix used by the Mock System to recognize Mock gameObject that must be replaced at some point.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.MockManager.MockPrefabContainer">
            <summary>
                Internal container for mocked prefabs
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MockManager.Init">
            <summary>
                Creates the container and registers all hooks
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MockManager.CreateMockedGameObject(System.String)">
            <summary>
                Create an empty GameObject with the mock string prepended
            </summary>
            <param name="prefabName">Name of the mocked vanilla prefab</param>
            <returns>Mocked GameObject reference</returns>
        </member>
        <member name="M:Jotunn.Managers.MockManager.CreateMockedPrefab``1(System.String)">
            <summary>
                Create a mocked component on an empty GameObject
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prefabName"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.MockManager.GetRealPrefabFromMock``1(UnityEngine.Object)">
            <summary>
                Will try to find the real vanilla prefab from the given mock
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unityObject"></param>
            <returns>the real prefab</returns>
        </member>
        <member name="M:Jotunn.Managers.MockManager.GetRealPrefabFromMock(UnityEngine.Object,System.Type)">
            <summary>
                Will try to find the real vanilla prefab from the given mock
            </summary>
            <param name="unityObject"></param>
            <param name="mockObjectType"></param>
            <returns>the real prefab</returns>
        </member>
        <member name="T:Jotunn.Managers.MockSystem.MockResolveException">
            <summary>
                Exception that is thrown for a mock prefab, that could not be resolved to a real prefab.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MockSystem.MockResolveException.FailedMockName">
            <summary>
                Name of the prefab that could not be resolved. Mock prefix is already removed.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.MockSystem.MockResolveException.MockType">
            <summary>
                Type of the prefab that could not be resolved.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.MockSystem.MockResolveException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of the <see cref="T:Jotunn.Managers.MockSystem.MockResolveException" /> class.
            </summary>
            <param name="message"></param>
            <param name="failedMockName"></param>
        </member>
        <member name="M:Jotunn.Managers.MockSystem.MockResolveException.#ctor(System.String,System.String,System.Type)">
            <summary>
                Creates a new instance of the <see cref="T:Jotunn.Managers.MockSystem.MockResolveException" /> class.
            </summary>
            <param name="message"></param>
            <param name="failedMockName"></param>
            <param name="mockType"></param>
        </member>
        <member name="T:Jotunn.Managers.NetworkManager">
            <summary>
                Manager handling all network related code
            </summary>
        </member>
        <member name="P:Jotunn.Managers.NetworkManager.Instance">
            <summary>
                Singleton instance
            </summary>
        </member>
        <member name="M:Jotunn.Managers.NetworkManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="T:Jotunn.Managers.NetworkManager.CoroutineHandler">
            <summary>
                Delegate for receiving <see cref="T:ZPackage">ZPackages</see>.
                Gets called inside a <see cref="T:UnityEngine.Coroutine"/>.
            </summary>
            <param name="sender">Sender ID of the package</param>
            <param name="package">Package sent</param>
            <returns></returns>
        </member>
        <member name="F:Jotunn.Managers.NetworkManager.RPCs">
            <summary>
                Internal list of registered RPCs
            </summary>
        </member>
        <member name="M:Jotunn.Managers.NetworkManager.Init">
            <summary>
                Manager's main init
            </summary>
        </member>
        <member name="M:Jotunn.Managers.NetworkManager.AddRPC(System.String,Jotunn.Managers.NetworkManager.CoroutineHandler,Jotunn.Managers.NetworkManager.CoroutineHandler)">
            <summary>
                Get a <see cref="T:Jotunn.Entities.CustomRPC"/> for your mod
            </summary>
            <param name="name">Unique name for your RPC</param>
            <param name="serverReceive">Delegate which gets called on client instances when packages are received</param>
            <param name="clientReceive">Delegate which gets called on server instances when packages are received</param>
            <returns>Existing or newly created <see cref="T:Jotunn.Entities.CustomRPC"/></returns>
        </member>
        <member name="M:Jotunn.Managers.NetworkManager.AddRPC(BepInEx.BepInPlugin,System.String,Jotunn.Managers.NetworkManager.CoroutineHandler,Jotunn.Managers.NetworkManager.CoroutineHandler)">
            <summary>
                Get the <see cref="T:Jotunn.Entities.CustomRPC"/> for a given mod.
            </summary>
            <param name="sourceMod">Reference to the <see cref="T:BepInEx.BepInPlugin"/> which added this entity</param>
            <param name="name">Unique name for your RPC</param>
            <param name="serverReceive">Delegate which gets called on client instances when packages are received</param>
            <param name="clientReceive">Delegate which gets called on server instances when packages are received</param>
            <returns>Existing or newly created <see cref="T:Jotunn.Entities.CustomRPC"/>.</returns>
        </member>
        <member name="M:Jotunn.Managers.NetworkManager.Game_Start">
            <summary>
                Register all custom RPCs as <see cref="T:ZRoutedRpc">ZRoutedRPCs</see>
            </summary>
        </member>
        <member name="T:Jotunn.Managers.PieceManager">
            <summary>
                Manager for handling custom pieces added to the game.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.PieceManager.Instance">
            <summary>
                The singleton instance of this manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="E:Jotunn.Managers.PieceManager.OnPiecesRegistered">
            <summary>
                Event that gets fired after all pieces were added to their respective PieceTables.
                Your code will execute every time a new ObjectDB is created (on every game start).
                If you want to execute just once you will need to unregister from the event after execution.
            </summary>
        </member>
        <member name="T:Jotunn.Managers.PieceManager.PieceCategorySettings">
            <summary>
                Settings of the hammer UI tab selection.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.PieceManager.PieceCategorySettings.HeaderWidth">
            <summary>
                Piece table tab header width.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.PieceManager.PieceCategorySettings.MinTabSize">
            <summary>
                Minimum size of a piece table tab. The tab can grow bigger than this the name doesn't fit.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.PieceManager.PieceCategorySettings.TabSizePerCharacter">
            <summary>
                Tab size per name character. This determines how fast the tab size grows.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.PieceManager.PieceCategorySettings.TabMargin">
            <summary>
                Minimum left/right space that is visible for not selected adjacent tabs.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.Init">
            <summary>
                Creates the piece table container and registers all hooks.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.AddPieceTable(Jotunn.Entities.CustomPieceTable)">
            <summary>
                Add a <see cref="T:Jotunn.Entities.CustomPieceTable"/> to the game.<br />
                Checks if the custom piece table is valid and unique and adds it to the list of custom piece tables.
            </summary>
            <param name="customPieceTable">The custom piece table to add.</param>
            <returns>true if the custom piece table was added to the manager.</returns>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.AddPieceTable(UnityEngine.GameObject)">
            <summary>
                Add a new <see cref="T:PieceTable"/> from <see cref="T:UnityEngine.GameObject"/>.<br />
                Creates a <see cref="T:Jotunn.Entities.CustomPieceTable"/> and adds it to the manager.
            </summary>
            <param name="prefab">The <see cref="T:UnityEngine.GameObject"/> to add.</param>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.AddPieceTable(System.String)">
            <summary>
                Add a new <see cref="T:PieceTable"/> from string.<br />
                Creates a <see cref="T:Jotunn.Entities.CustomPieceTable"/> and adds it to the manager.
            </summary>
            <param name="name">Name of the new piece table.</param>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.GetPieceTable(System.String)">
            <summary>
                Get a <see cref="T:PieceTable"/> by name.<br /><br />
                Search hierarchy:<br />
                <list type="number">
                    <item>PieceTable with the exact name (e.g. "_HammerPieceTable")</item>
                    <item>PieceTable via "item" name (e.g. "Hammer")</item>
                </list>
            </summary>
            <param name="name">Prefab or item name of the PieceTable</param>
            <returns><see cref="T:PieceTable"/> component</returns>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.GetPieceTables">
            <summary>
                Returns all <see cref="T:PieceTable"/> instances in the game.
                The list is gathered on every ObjectDB.Awake() from all items in it,
                so depending on the timing of the call, the list might not be complete.
            </summary>
            <returns>A list of <see cref="T:PieceTable"/> instances</returns>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.AddPieceCategory(System.String,System.String)">
            <summary>
                Add a new <see cref="T:Piece.PieceCategory"/> by name. A new category
                gets assigned a random integer for internal use. If you pass a vanilla category
                the actual integer value of the enum is returned. 
            </summary>
            <param name="table">Prefab or item name of the PieceTable.</param>
            <param name="name">Name of the category.</param>
            <returns>int value of the vanilla or custom category</returns>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.GetPieceCategory(System.String)">
            <summary>
                Get a <see cref="T:Piece.PieceCategory"/> by name. Translates
                vanilla or custom Piece Categories to their current integer value.
            </summary>
            <param name="name">Name of the category.</param>
            <returns>int value of the vanilla or custom category</returns>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.RemovePieceCategory(System.String,System.String)">
            <summary>
                Remove a <see cref="T:Piece.PieceCategory"/> from a table by name.
                This does not remove the category from the game but "hides" it
                in the given table.
            </summary>
            <param name="table">Prefab or item name of the PieceTable.</param>
            <param name="name">Name of the category.</param>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.GetPieceCategories">
            <summary>
                Get a list of all custom piece category names
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.AddPiece(Jotunn.Entities.CustomPiece)">
            <summary>
                Add a <see cref="T:Jotunn.Entities.CustomPiece"/> to the game.<br />
                Checks if the custom piece is valid and unique and adds it to the list of custom pieces.<br />
                Custom pieces are added to their respective <see cref="T:PieceTable"/>s after <see cref="M:ObjectDB.Awake"/>.
            </summary>
            <param name="customPiece">The custom piece to add.</param>
            <returns>true if the custom piece was added to the manager.</returns>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.GetPiece(System.String)">
            <summary>
                Get a custom piece by its name.
            </summary>
            <param name="pieceName">Name of the piece to search.</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.RemovePiece(System.String)">
            <summary>
                Remove a custom piece by its name.
            </summary>
            <param name="pieceName">Name of the piece to remove.</param>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.RemovePiece(Jotunn.Entities.CustomPiece)">
            <summary>
                Remove a custom piece by its ref.
            </summary>
            <param name="piece"><see cref="T:Jotunn.Entities.CustomPiece"/> to remove.</param>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.LoadPieceTables">
            <summary>
                Loop all items in the game and get all PieceTables used (vanilla and custom ones).
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.CreatePieceTableCategories">
            <summary>
                Create piece categories per table if custom categories were added.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.UpdatePieceCategories">
            <summary>
                Reorder piece table tabs if the table if opened currently
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.TogglePieceCategories">
            <summary>
                Hook for piece table toggle
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.RegisterInPieceTables">
            <summary>
                Registers all custom pieces to their respective piece tables.
                Removes erroneous ones from the manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.RegisterPieceInPieceTable(UnityEngine.GameObject,System.String,System.String)">
            <summary>
                Register a single piece prefab into a piece table by name.<br />
                Also adds the prefab to the <see cref="T:Jotunn.Managers.PrefabManager"/> and <see cref="T:ZNetScene"/> if necessary.<br />
                Custom categories can be referenced if they have been added to the manager before.<br />
                No mock references are fixed.
            </summary>
            <param name="prefab"><see cref="T:UnityEngine.GameObject"/> with a <see cref="T:Piece"/> component to add to the table</param>
            <param name="pieceTable">Prefab or item name of the PieceTable</param>
            <param name="category">Optional category string, does not create new custom categories</param>
        </member>
        <member name="M:Jotunn.Managers.PieceManager.ReloadKnownRecipes(Player)">
            <summary>
                Hook on <see cref="M:Player.OnSpawned"/> to refresh recipes for the custom items.
            </summary>
            <param name="self"></param>
        </member>
        <member name="T:Jotunn.Managers.PrefabManager">
            <summary>
                Manager for handling custom prefabs added to the game.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.PrefabManager.Instance">
            <summary>
                The singleton instance of this manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="E:Jotunn.Managers.PrefabManager.OnVanillaPrefabsAvailable">
            <summary>
                Event that gets fired after the vanilla prefabs are in memory and available for cloning.
                Your code will execute every time before a new <see cref="T:ObjectDB"/> is copied (on every menu start).
                If you want to execute just once you will need to unregister from the event after execution.
            </summary>
        </member>
        <member name="E:Jotunn.Managers.PrefabManager.OnPrefabsRegistered">
            <summary>
                Event that gets fired after registering all custom prefabs to <see cref="T:ZNetScene"/>.
                Your code will execute every time a new ZNetScene is created (on every game start). 
                If you want to execute just once you will need to unregister from the event after execution.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.PrefabManager.PrefabContainer">
            <summary>
                Container for custom prefabs in the DontDestroyOnLoad scene.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.PrefabManager.Prefabs">
            <summary>
                Dictionary of all added custom prefabs by name hash.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.Init">
            <summary>
                Creates the prefab container and registers all hooks.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.AddPrefab(UnityEngine.GameObject,BepInEx.BepInPlugin)">
            <summary>
                Add a custom prefab to the manager with known source mod metadata. Don't fix references.
            </summary>
            <param name="prefab">Prefab to add</param>
            <param name="sourceMod">Metadata of the mod adding this prefab</param>
            <returns>true if the custom prefab was added to the manager.</returns>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.AddPrefab(UnityEngine.GameObject)">
            <summary>
                Add a custom prefab to the manager.<br />
                Checks if a prefab with the same name is already added.<br />
                Added prefabs get registered to the <see cref="T:ZNetScene"/> on <see cref="M:ZNetScene.Awake"/>.
            </summary>
            <param name="prefab">Prefab to add</param>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.AddPrefab(Jotunn.Entities.CustomPrefab)">
            <summary>
                Add a custom prefab to the manager.<br />
                Checks if a prefab with the same name is already added.<br />
                Added prefabs get registered to the <see cref="T:ZNetScene"/> on <see cref="M:ZNetScene.Awake"/>.
            </summary>
            <param name="customPrefab">Prefab to add</param>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.CreateEmptyPrefab(System.String,System.Boolean)">
            <summary>
                Create a new prefab from an empty primitive.
            </summary>
            <param name="name">The name of the new GameObject</param>
            <param name="addZNetView" >
                When true a ZNetView component is added to the new GameObject for ZDO generation and networking. Default: true
            </param>
            <returns>The newly created empty prefab</returns>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.CreateClonedPrefab(System.String,System.String)">
            <summary>
                Create a copy of a given prefab without modifying the original.
            </summary>
            <param name="name">Name of the new prefab.</param>
            <param name="baseName">Name of the vanilla prefab to copy from.</param>
            <returns>Newly created prefab object</returns>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.CreateClonedPrefab(System.String,UnityEngine.GameObject)">
            <summary>
                Create a copy of a given prefab without modifying the original.
            </summary>
            <param name="name">Name of the new prefab.</param>
            <param name="prefab">Prefab instance to copy.</param>
            <returns>Newly created prefab object</returns>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.GetPrefab(System.String)">
            <summary>
                Get a prefab by its name.<br /><br />
                Search hierarchy:
                <list type="number">
                    <item>Custom prefab with the exact name</item>
                    <item>Vanilla prefab with the exact name from <see cref="T:ZNetScene"/> if already instantiated</item>
                    <item>Vanilla prefab from the prefab cache</item>
                </list>
            </summary>
            <param name="name">Name of the prefab to search for.</param>
            <returns>The existing prefab, or null if none exists with given name</returns>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.RemovePrefab(System.String)">
            <summary>
                Remove a custom prefab from the manager.
            </summary>
            <param name="name">Name of the prefab to remove</param>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.DestroyPrefab(System.String)">
            <summary>
                Destroy a custom prefab.<br />
                Removes it from the manager and if already instantiated also from the <see cref="T:ZNetScene"/>.
            </summary>
            <param name="name">The name of the prefab to destroy</param>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.RegisterAllToZNetScene(ZNetScene)">
            <summary>
                Register all custom prefabs to m_prefabs/m_namedPrefabs in <see cref="T:ZNetScene" />.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.RegisterToZNetScene(UnityEngine.GameObject)">
            <summary>
                Register a single prefab to the current <see cref="T:ZNetScene"/>.<br />
                Checks for existence of the object via GetStableHashCode() and adds the prefab if it is not already added.
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.InvokeOnVanillaObjectsAvailable(ObjectDB,ObjectDB)">
            <summary>
                Safely invoke the <see cref="E:Jotunn.Managers.PrefabManager.OnVanillaPrefabsAvailable"/> event
            </summary>
            
        </member>
        <member name="T:Jotunn.Managers.PrefabManager.Cache">
            <summary>
                The global cache of prefabs per scene.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.Cache.GetPrefab(System.Type,System.String)">
            <summary>
                Get an instance of an Unity Object from the current scene with the given name.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to search for.</param>
            <param name="name">Name of the actual object to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.Cache.GetPrefab``1(System.String)">
            <summary>
                Get an instance of an Unity Object from the current scene by name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.Cache.GetPrefabs(System.Type)">
            <summary>
                Get all instances of an Unity Object from the current scene by type.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to search for.</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.PrefabManager.Cache.FindBestAsset(System.Collections.Generic.IDictionary{System.String,UnityEngine.Object},UnityEngine.Object,System.String)">
            <summary>
                Determines the best matching asset for a given name.
                Only one asset can be associated with a name, this ties to find the best match if there is already a cached one present.
            </summary>
            <param name="map"></param>
            <param name="unityObject"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Managers.RenderManager">
            <summary>
                Manager for rendering <see cref="T:UnityEngine.Sprite">Sprites</see> of <see cref="T:UnityEngine.GameObject">GameObjects</see>
            </summary>
        </member>
        <member name="F:Jotunn.Managers.RenderManager.IsometricRotation">
            <summary>
                Rotation of the prefab that will result in an isometric view
            </summary>
        </member>
        <member name="P:Jotunn.Managers.RenderManager.Instance">
            <summary>
                Singleton instance
            </summary>
        </member>
        <member name="M:Jotunn.Managers.RenderManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="F:Jotunn.Managers.RenderManager.Layer">
            <summary>
                Unused Layer in Unity
            </summary>
        </member>
        <member name="M:Jotunn.Managers.RenderManager.Init">
            <summary>
                Initialize the manager
            </summary>
        </member>
        <member name="M:Jotunn.Managers.RenderManager.EnqueueRender(UnityEngine.GameObject,System.Action{UnityEngine.Sprite})">
            <summary>
                Create a <see cref="T:UnityEngine.Sprite"/> of the <paramref name="target"/>
            </summary>
            <param name="target">GameObject to render</param>
            <param name="callback">Callback for the generated <see cref="T:UnityEngine.Sprite"/></param>
            <returns>If this is called on a headless server or when there is no active visual Mesh attached to the target, this method invokes the callback with null immediately and returns false.</returns>
        </member>
        <member name="M:Jotunn.Managers.RenderManager.EnqueueRender(Jotunn.Managers.RenderManager.RenderRequest,System.Action{UnityEngine.Sprite})">
            <summary>
                Enqueue a render of the <see cref="T:Jotunn.Managers.RenderManager.RenderRequest"/>
            </summary>
            <param name="renderRequest"></param>
            <param name="callback">Callback for the generated <see cref="T:UnityEngine.Sprite"/></param>
            <returns>If this is called on a headless server or when there is no active visual Mesh attached to the target, this method invokes the callback with null immediately and returns false.</returns>
        </member>
        <member name="M:Jotunn.Managers.RenderManager.EnqueueRender(UnityEngine.GameObject,System.Action{UnityEngine.Sprite},System.Int32,System.Int32)">
            <summary>
                Queues a new prefab to be rendered. The resulting <see cref="T:UnityEngine.Sprite"/> will be ready at the next frame.
                If there is no active visual Mesh attached to the target, this method invokes the callback with null immediately.
            </summary>
            <param name="target">Object to be rendered. A copy of the provided GameObject will be created for rendering</param>
            <param name="callback">Action that gets called when the rendering is complete</param>
            <param name="width">Width of the resulting <see cref="T:UnityEngine.Sprite"/></param>
            <param name="height">Height of the resulting <see cref="T:UnityEngine.Sprite"/></param>
            <returns>Only true if the target was queued for rendering</returns>
        </member>
        <member name="M:Jotunn.Managers.RenderManager.Render(UnityEngine.GameObject)">
            <summary>
                Create a <see cref="T:UnityEngine.Sprite"/> of the <paramref name="target"/>
            </summary>
            <param name="target">Can be a prefab or any existing GameObject in the world</param>
            <returns>If this is called on a headless server or when there is no active visual Mesh attached to the target, this method returns null.</returns>
        </member>
        <member name="M:Jotunn.Managers.RenderManager.Render(UnityEngine.GameObject,UnityEngine.Quaternion)">
            <summary>
                Create a <see cref="T:UnityEngine.Sprite"/> of the <paramref name="target"/>
            </summary>
            <param name="target">Can be a prefab or any existing GameObject in the world</param>
            <param name="rotation">Rotation while rendering of the GameObject. See <code>RenderManager.IsometricRotation</code> for example/></param>
            <returns>If this is called on a headless server or when there is no active visual Mesh attached to the target, this method returns null.</returns>
        </member>
        <member name="M:Jotunn.Managers.RenderManager.Render(Jotunn.Managers.RenderManager.RenderRequest)">
            <summary>
                Create a <see cref="T:UnityEngine.Sprite"/> from a <see cref="T:Jotunn.Managers.RenderManager.RenderRequest"/>/>
            </summary>
            <param name="renderRequest"></param>
            <returns>If this is called on a headless server or when there is no active visual Mesh attached to the target, this method returns null.</returns>
        </member>
        <member name="M:Jotunn.Managers.RenderManager.SpawnSafe(Jotunn.Managers.RenderManager.RenderRequest)">
            <summary>
                Spawn a prefab without any Components except visuals. Also prevents calling Awake methods of the prefab.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Managers.RenderManager.RenderRequest">
            <summary>
                Queues a new prefab to be rendered. The resulting <see cref="T:UnityEngine.Sprite"/> will be ready at the next frame. 
            </summary>
            <returns>Only true if the target was queued for rendering</returns>
        </member>
        <member name="F:Jotunn.Managers.RenderManager.RenderRequest.Target">
            <summary>
                Target GameObject to create a <see cref="T:UnityEngine.Sprite"/> from
            </summary>
        </member>
        <member name="P:Jotunn.Managers.RenderManager.RenderRequest.Width">
            <summary>
                Pixel width of the generated <see cref="T:UnityEngine.Sprite"/>
            </summary>
        </member>
        <member name="P:Jotunn.Managers.RenderManager.RenderRequest.Height">
            <summary>
                Pixel height of the generated <see cref="T:UnityEngine.Sprite"/>
            </summary>
        </member>
        <member name="P:Jotunn.Managers.RenderManager.RenderRequest.Rotation">
            <summary>
                Rotation of the prefab to capture
            </summary>
        </member>
        <member name="P:Jotunn.Managers.RenderManager.RenderRequest.FieldOfView">
            <summary>
                Field of view of the camera used to create the <see cref="T:UnityEngine.Sprite"/>. Default is small to simulate orthographic view. An orthographic camera is not possible because of shaders
            </summary>
        </member>
        <member name="P:Jotunn.Managers.RenderManager.RenderRequest.DistanceMultiplier">
            <summary>
                Distance multiplier, should not be required with the default <see cref="P:Jotunn.Managers.RenderManager.RenderRequest.FieldOfView"/>
            </summary>
        </member>
        <member name="P:Jotunn.Managers.RenderManager.RenderRequest.Callback">
            <summary>
                Callback for the generated <see cref="T:UnityEngine.Sprite"/>
            </summary>
        </member>
        <member name="P:Jotunn.Managers.RenderManager.RenderRequest.TargetPlugin">
            <summary>
                Optional, Used for <see cref="P:Jotunn.Managers.RenderManager.RenderRequest.UseCache"/> to determine a unique name-version combination
            </summary>
        </member>
        <member name="P:Jotunn.Managers.RenderManager.RenderRequest.UseCache">
            <summary>
                Save the render on the disc and reuse when called again. This reduces the time to re-render drastically.
                When the game version changes, a new render will be made. When a <see cref="P:Jotunn.Managers.RenderManager.RenderRequest.TargetPlugin"/> is set, the version and name
                will be used to determine if a new render should be made
            </summary>
        </member>
        <member name="M:Jotunn.Managers.RenderManager.RenderRequest.#ctor(UnityEngine.GameObject)">
            <summary>
                Create a new RenderRequest
            </summary>
            <param name="target">Object to be rendered. A copy of the provided GameObject will be created for rendering</param> 
        </member>
        <member name="T:Jotunn.Managers.SkillManager">
            <summary>
               Manager for handling custom skills added to the game.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.SkillManager.Instance">
            <summary>
                Global singleton instance of the manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SkillManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SkillManager.Init">
            <summary>
                Initialize the manager
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SkillManager.AddSkill(Jotunn.Configs.SkillConfig)">
            <summary>
                Add a new skill with given SkillConfig object.
            </summary>
            <param name="skillConfig">SkillConfig object representing new skill to register</param>
            <returns>The SkillType of the newly added skill</returns>
        </member>
        <member name="M:Jotunn.Managers.SkillManager.AddSkill(System.String,System.String,System.String,System.Single,UnityEngine.Sprite)">
            <summary>
                Register a new skill with given parameters, and registers translations for it in the current localization.
            </summary>
            <param name="identifer">Unique identifier of the new skill, ex: "com.jotunn.testmod.testskill"</param>
            <param name="name">Name of the new skill</param>
            <param name="description">Description of the new skill</param>
            <param name="increaseStep"></param>
            <param name="icon">Icon for the skill</param>
            <returns>The SkillType of the newly registered skill</returns>
        </member>
        <member name="M:Jotunn.Managers.SkillManager.AddSkillsFromJson(System.String)">
            <summary>
                Adds skills defined in a JSON file at given path, relative to BepInEx/plugins
            </summary>
            <param name="path">JSON file path, relative to BepInEx/plugins folder</param>
        </member>
        <member name="M:Jotunn.Managers.SkillManager.GetSkill(Skills.SkillType)">
            <summary>
                Gets a custom skill with given SkillType.
            </summary>
            <param name="skillType">SkillType to look for</param>
            <returns>Custom skill with given SkillType</returns>
        </member>
        <member name="M:Jotunn.Managers.SkillManager.GetSkill(System.String)">
            <summary>
                Gets a custom skill with given skill identifier.
            </summary>
            <param name="identifier">String indentifer of SkillType to look for</param>
            <returns>Custom skill with given SkillType</returns>
        </member>
        <member name="T:Jotunn.Managers.SynchronizationManager">
            <summary>
               Manager for handling synchronisation between client and server instances.
            </summary>
        </member>
        <member name="E:Jotunn.Managers.SynchronizationManager.OnConfigurationSynchronized">
            <summary>
                Event triggered after server configuration is applied to client
            </summary>
        </member>
        <member name="E:Jotunn.Managers.SynchronizationManager.OnAdminStatusChanged">
            <summary>
                Event triggered after a clients admin status changed on the server
            </summary>
        </member>
        <member name="P:Jotunn.Managers.SynchronizationManager.Instance">
            <summary>
                Singleton instance
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="P:Jotunn.Managers.SynchronizationManager.PlayerIsAdmin">
            <summary>
                Clientside indicator if the current player has admin status on 
                the current world, always true on local games
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.Init">
            <summary>
                Manager's main init
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.SceneManager_sceneLoaded(UnityEngine.SceneManagement.Scene,UnityEngine.SceneManagement.LoadSceneMode)">
            <summary>
                Init or reset admin and configuration state
            </summary>
            <param name="scene"></param>
            <param name="loadMode"></param>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.ZNet_Awake(ZNet)">
            <summary>
                Hook <see cref="M:ZNet.Awake"/> to start a watchdog Coroutine which monitors the admin list.
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.ZNet_RPC_Pre_PeerInfo(ZNet,ZRpc,Jotunn.Managers.SynchronizationManager.PeerInfoBlockingSocket@)">
            <summary>
                Hook ZNet.RPC_PeerInfo on the server to send initial data
            </summary>
            <param name="self"></param>
            <param name="rpc"></param>
            <param name="__state"></param>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.SyncedList_Save(SyncedList)">
            <summary>
                Hook <see cref="M:SyncedList.Save"/> to synchronize the admin status to the clients
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.SyncedList_Load(SyncedList)">
            <summary>
                Hook <see cref="M:SyncedList.Load"/> to synchronize the admin status to the clients
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.SynchronizeAdminStatus">
            <summary>
                Checks the ZNet.m_instance.m_adminList against the cached list and send any
                changes to the corresponding clients.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.SendAdminStateToClient(System.String,System.Boolean)">
            <summary>
                Sends the current admin state of a player on a server to the client
            </summary>
            <param name="entry">Socket host name of the peer</param>
            <param name="admin">Admin state to send to the client</param>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.InvokeOnAdminStatusChanged">
            <summary>
                Safely invoke the <see cref="E:Jotunn.Managers.SynchronizationManager.OnAdminStatusChanged"/> event
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.UnlockConfigurationEntries">
            <summary>
                Unlock configuration entries.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.LockConfigurationEntries">
            <summary>
                Lock configuration entries.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.Menu_IsVisible(System.Boolean@)">
            <summary>
                Hook <see cref="M:Menu.IsVisible"/> to unlock cursor properly and disable camera rotation
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.ConfigurationManager_DisplayingWindowChanged(System.Object,System.Object)">
            <summary>
                Window display state changed event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.FejdStartup_Awake(FejdStartup)">
            <summary>
                Initial cache the config values of dependent plugins and register ourself to config change events
            </summary>
            <param name="self"></param>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.Config_ConfigReloaded(System.Object,System.EventArgs)">
            <summary>
                Sync the local bep config on reload
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.ConfigEntryBase_GetSerializedValue(BepInEx.Configuration.ConfigEntryBase,System.String@)">
            <summary>
                Return the cached local value of a bep config thats locked
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.ConfigEntryBase_SetSerializedValue(BepInEx.Configuration.ConfigEntryBase,System.String)">
            <summary>
                Prevent overwriting bep config value when the setting is locked on config file reload
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.CacheConfigurationValues">
            <summary>
                Cache the synchronizable configuration values for comparison
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.GetSyncConfigValues">
            <summary>
                Get syncable configuration values as tuples
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.SynchronizeChangedConfig">
            <summary>
                Syncs the changed configuration of a client to the server
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.InitAdminConfigs">
            <summary>
                Cache local config values for synced entries
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.ResetAdminConfigs">
            <summary>
                Reset configs which may have been overwritten with server values to the local value
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.InvokeOnConfigurationSynchronized(System.Boolean)">
            <summary>
                Safely invoke the <see cref="E:Jotunn.Managers.SynchronizationManager.OnConfigurationSynchronized"/> event
            </summary>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.ApplyConfigZPackage(ZPackage,System.Boolean@)">
            <summary>
                Apply received configuration values locally and regenerate the cache
            </summary>
            <param name="configPkg">Package of config tuples</param>
            <param name="initial">Indicator if this was an initial config package</param>
        </member>
        <member name="M:Jotunn.Managers.SynchronizationManager.GenerateConfigZPackage(System.Boolean,System.Collections.Generic.List{System.Tuple{System.String,System.String,System.String,System.String}})">
            <summary>
                Generate ZPackage from configuration tuples
            </summary>
            <param name="initial">Indicator if this is the initial config package</param>
            <param name="values">List of config tuples to include in the package</param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Managers.SynchronizationManager.PeerInfoBlockingSocket">
            <summary>
                Wrapper Socket which holds up and preserves PeerInfo or RoutedRPC packages until
                the finished member is set to true. All other packages get sent. This will
                stop the client from completing the login handshake with the server until ready.
            </summary>
        </member>
        <member name="T:Jotunn.Managers.UndoManager">
            <summary>
                Manager for handling undo and redo actions in mods. Can handle multiple undo queues.<br/>
                Mods can make their own UndoActions using the provided <see cref="T:Jotunn.Managers.UndoManager.IUndoAction">interface</see>
                or use the default ones Jötunn provides in <see cref="T:Jotunn.Utils.UndoActions"/>.<br />
                Undo queues get automatically reset on every login and logout.
            </summary>
        </member>
        <member name="T:Jotunn.Managers.UndoManager.IUndoAction">
            <summary>
                Interface for actions which can be added to the undo queue.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.IUndoAction.Description">
            <summary>
                Description of this action to show on the queue's history.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.IUndoAction.Undo">
            <summary>
                Code to revert whatever was executed.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.IUndoAction.Redo">
            <summary>
                Code to replay whatever was executed.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.IUndoAction.UndoMessage">
            <summary>
                Message being displayed after a successful undo.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.IUndoAction.RedoMessage">
            <summary>
                Message being displayed after a successful redo.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.UndoManager.Instance">
            <summary>
                The singleton instance of this manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="F:Jotunn.Managers.UndoManager.Queues">
            <summary>
                Container to hold all Queues.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.Init">
            <summary>
                Registers all hooks.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.AddMessage(System.String,System.Boolean)">
            <summary>
                Add a message to the console or in the player HUD
            </summary>
            <param name="message"></param>
            <param name="priority"></param>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.CreateQueue(System.String,System.Int32)">
            <summary>
                Manually create a new queue by name and return it. If the queue already exists
                no new queue is created but the existing is returned.
            </summary>
            <param name="queueName">Global name of the queue</param>
            <param name="maxSteps">Optionally define the max history capacity of a newly generated queue</param>
            <returns>The <see cref="T:Jotunn.Managers.UndoManager.UndoQueue"/> with the given name</returns>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.GetQueueNames">
            <summary>
                Get a list of all current undo queues.
            </summary>
            <returns>List of all registered queue names</returns>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.GetQueue(System.String)">
            <summary>
                Get a queue by name. Creates a new queue if it does not exist.
            </summary>
            <param name="queueName">Global name of the queue</param>
            <returns>The <see cref="T:Jotunn.Managers.UndoManager.UndoQueue"/> with the given name</returns>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.Add(System.String,Jotunn.Managers.UndoManager.IUndoAction)">
            <summary>
                Add a new action to a queue.<br/>
                If a queue with the provided name does not exist it is automatically created.
            </summary>
            <param name="queueName">Global name of the queue</param>
            <param name="action">Mod provided action which can undo and redo whatever was executed</param>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.Undo(System.String)">
            <summary>
                Execute the undo action of the item at the queue's current position and decrease the position pointer.<br/>
                If a queue with the provided name does not exist it is automatically created.
            </summary>
            <param name="queueName">Global name of the queue</param>
            <returns>true if an action was undone, false if no actions exist or the action failed</returns>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.Redo(System.String)">
            <summary>
                Execute the redo action of the item after the queue's current position and increase the position pointer.<br/>
                If a queue with the provided name does not exist it is automatically created.
            </summary>
            <param name="queueName">Global name of the queue</param>
            <returns>true if an action was redone, false if no actions exist or the action failed</returns>
        </member>
        <member name="T:Jotunn.Managers.UndoManager.UndoQueue">
            <summary>
                Undo queue implementation.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.UndoQueue.Add(Jotunn.Managers.UndoManager.IUndoAction)">
            <summary>
                Add a new action to this queue.
            </summary>
            <param name="action">Mod provided action which can undo and redo whatever was executed</param>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.UndoQueue.Undo">
            <summary>
                Execute the undo action of the item at the queue's current position and decrease the position pointer.
            </summary>
            <returns>true if an action was undone, false if no actions exist or the action failed</returns>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.UndoQueue.Redo">
            <summary>
                Execute the redo action of the item after the queue's current position and increase the position pointer.
            </summary>
            <returns>true if an action was redone, false if no actions exist or the action failed</returns>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.UndoQueue.Reset">
            <summary>
                Reset the queue's history and position pointer to its initial state.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.UndoQueue.GetIndex">
            <summary>
                Get this queue's current position index, -1 when empty.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.UndoQueue.GetHistory">
            <summary>
                Get a string array of this queue's current history.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.UndoManager.UndoQueue.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Jotunn.Managers.ZoneManager">
            <summary>
                Manager for adding custom Locations and Vegetation.
            </summary>
        </member>
        <member name="P:Jotunn.Managers.ZoneManager.Instance">
            <summary>
                The singleton instance of this manager.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.#ctor">
            <summary>
                Hide .ctor
            </summary>
        </member>
        <member name="E:Jotunn.Managers.ZoneManager.OnVanillaLocationsAvailable">
            <summary>
                Event that gets fired after the vanilla locations are in memory and available for cloning or editing.
                Your code will execute every time before a new <see cref="T:ObjectDB"/> is copied (on every menu start).
                If you want to execute just once you will need to unregister from the event after execution.
            </summary>
        </member>
        <member name="E:Jotunn.Managers.ZoneManager.OnVanillaClutterAvailable">
            <summary>
                Event that gets fired after the vanilla clutter is in memory and available obtain.
                Your code will execute every time before a new <see cref="T:ClutterSystem"/> is instantiated.
                If you want to execute just once you will need to unregister from the event after execution.
            </summary>
        </member>
        <member name="F:Jotunn.Managers.ZoneManager.LocationContainer">
            <summary>
                Container for custom locations in the DontDestroyOnLoad scene.
            </summary>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.Init">
            <summary>
                Initialize the manager
            </summary>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.AnyBiomeOf(Heightmap.Biome[])">
            <summary>
                Return a <see cref="T:Heightmap.Biome"/> that matches any of the provided Biomes
            </summary>
            <param name="biomes">Biomes that should match</param> 
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.GetMatchingBiomes(Heightmap.Biome)">
            <summary>
                Returns a list of all <see cref="T:Heightmap.Biome"/> that match <paramref name="biome"/>
            </summary>
            <param name="biome"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.CreateLocationContainer(System.String)">
            <summary>
                Create an empty GameObject that is disabled, so any Components in instantiated GameObjects will not start their lifecycle.
            </summary>
            <param name="name">Name of the location</param>
            <returns>Empty and hierarchy disabled GameObject</returns>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.CreateLocationContainer(UnityEngine.GameObject)">
            <summary>
                Create a copy that is disabled, so any Components in instantiated child GameObjects will not start their lifecycle.<br />
                Use this if you plan to alter your location prefab in code after importing it. <br />
                Don't create a separate container if you won't alter the prefab afterwards as it creates a new instance for the container.
            </summary>
            <param name="gameObject">Instantiated and hierarchy disabled location prefab</param>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.CreateLocationContainer(UnityEngine.GameObject,System.Boolean)">
            <summary>
                Create a copy that is disabled, so any Components in instantiated GameObjects will not start their lifecycle     
            </summary>
            <param name="gameObject">Prefab to copy</param>
            <param name="fixLocationReferences">Replace JVLmock GameObjects with a copy of their real prefab</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.AddCustomLocation(Jotunn.Entities.CustomLocation)">
            <summary>
                Register a CustomLocation to be added to the ZoneSystem
            </summary>
            <param name="customLocation"></param>
            <returns>true if the custom location could be added to the manager</returns>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.GetCustomLocation(System.String)">
            <summary>
                Get a custom location by name.
            </summary>
            <param name="name">Name of the location (normally the prefab name)</param>
            <returns>The <see cref="T:Jotunn.Entities.CustomLocation"/> object with the given name if found</returns>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.GetZoneLocation(System.String)">
            <summary>
                Get a ZoneLocation by its name.<br /><br />
                Search hierarchy:
                <list type="number">
                    <item>Custom Location with the exact name</item>
                    <item>Vanilla Location with the exact name from <see cref="T:ZoneSystem"/></item>
                </list>
            </summary>
            <param name="name">Name of the ZoneLocation to search for.</param>
            <returns>The existing ZoneLocation, or null if none exists with given name</returns>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.CreateClonedLocation(System.String,System.String)">
            <summary>
                Create a CustomLocation that is a deep copy of the original.<br />
                Changes will not affect the original. The CustomLocation is already registered in the manager.
            </summary>
            <param name="name">name of the custom location</param>
            <param name="baseName">name of the existing location to copy</param>
            <returns>A CustomLocation object with the cloned location prefab</returns>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.AddCustomVegetation(Jotunn.Entities.CustomVegetation)">
            <summary>
                Register a CustomVegetation to be added to the ZoneSystem
            </summary>
            <param name="customVegetation"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.GetZoneVegetation(System.String)">
            <summary>
                Get a ZoneVegetation by its name.<br /><br />
                Search hierarchy:
                <list type="number">
                    <item>Custom Vegetation with the exact name</item>
                    <item>Vanilla Vegetation with the exact name from <see cref="T:ZoneSystem"/></item>
                </list>
            </summary>
            <param name="name">Name of the ZoneVegetation to search for.</param>
            <returns>The existing ZoneVegetation, or null if none exists with given name</returns>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.AddCustomClutter(Jotunn.Entities.CustomClutter)">
            <summary>
                Register a CustomClutter to be added to the ClutterSystem
            </summary>
            <param name="customClutter"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.GetClutter(System.String)">
            <summary>
                Get a Clutter by its name.<br /><br />
                Search hierarchy:
                <list type="number">
                    <item>Custom Clutter with the exact name</item>
                    <item>Vanilla Clutter with the exact name from <see cref="T:ClutterSystem"/></item>
                </list>
            </summary>
            <param name="name">Name of the Clutter to search for.</param>
            <returns>The existing Clutter, or null if none exists with given name</returns>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.InvokeOnVanillaLocationsAvailable">
            <summary>
                Safely invoke OnVanillaLocationsAvailable
            </summary>
        </member>
        <member name="M:Jotunn.Managers.ZoneManager.InvokeOnVanillaClutterAvailable">
            <summary>
                Safely invoke OnVanillaClutterAvailable
            </summary>
        </member>
        <member name="T:Jotunn.GUI.ColorPicker">
            <summary>
                Custom MonoBehaviour for the ColorPicker
            </summary>
        </member>
        <member name="T:Jotunn.GUI.ColorPicker.ColorEvent">
            <summary>
            Event that gets called by the ColorPicker
            </summary>
            <param name="c">received Color</param>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.instance">
            <summary>
                Singeleton instance
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.done">
            <returns>
                True when the ColorPicker is closed
            </returns>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.onCC">
            <summary>
                OnColorChanged event
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.onCS">
            <summary>
                OnColorSelected event
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.originalColor">
            <summary>
                Color before editing
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.modifiedColor">
            <summary>
                Current Color
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.useA">
            <summary>
                UseAlpha bool
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.interact">
            <summary>
                Interact bool
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.positionIndicator">
            <summary>
                Component ref
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.mainComponent">
            <summary>
                Component ref
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.rComponent">
            <summary>
                Component ref
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.gComponent">
            <summary>
                Component ref
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.bComponent">
            <summary>
                Component ref
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.aComponent">
            <summary>
                Component ref
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.hexaComponent">
            <summary>
                Component ref
            </summary>
        </member>
        <member name="F:Jotunn.GUI.ColorPicker.colorComponent">
            <summary>
                Component ref
            </summary>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.Create(UnityEngine.Color,System.String,Jotunn.GUI.ColorPicker.ColorEvent,Jotunn.GUI.ColorPicker.ColorEvent,System.Boolean)">
            <summary>
                Creates a new Colorpicker
            </summary>
            <param name="original">Color before editing</param>
            <param name="message">Display message</param>
            <param name="onColorChanged">Event that gets called when the color gets modified</param>
            <param name="onColorSelected">Event that gets called when one of the buttons done or cancel get pressed</param>
            <param name="useAlpha">When set to false the colors used don't have an alpha channel</param>
            <returns>
                False if the instance is already running
            </returns>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.RecalculateMenu(System.Boolean)">
            <summary>
                Called when color is modified, to update other UI components
            </summary>
            <param name="recalculateHSV"></param>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.SetChooser">
            <summary>
                Used by EventTrigger to calculate the chosen value in color box
            </summary>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.SetMain(System.Single)">
            <summary>
                Gets main Slider value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.SetR(System.Single)">
            <summary>
                Gets r Slider value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.SetR(System.String)">
            <summary>
                Gets r InputField value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.SetG(System.Single)">
            <summary>
                Gets g Slider value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.SetG(System.String)">
            <summary>
                Gets g InputField value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.SetB(System.Single)">
            <summary>
                Gets b Slider value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.SetB(System.String)">
            <summary>
                Gets b InputField value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.SetA(System.Single)">
            <summary>
                Gets a Slider value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.SetA(System.String)">
            <summary>
                Gets a InputField value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.SetHexa(System.String)">
            <summary>
                Gets hexa InputField value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.CCancel">
            <summary>
                Cancel button call
            </summary>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.Cancel">
            <summary>
                Manually cancel the ColorPicker and recover the default value
            </summary>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.CDone">
            <summary>
                Done button call
            </summary>
        </member>
        <member name="M:Jotunn.GUI.ColorPicker.Done">
            <summary>
                Manually close the ColorPicker and apply the selected color
            </summary>
        </member>
        <member name="T:Jotunn.GUI.ColorPicker.HSV">
            <summary>
                HSV helper class
            </summary>
        </member>
        <member name="T:Jotunn.GUI.DragWindowCntrl">
            <summary>
                Simple dragging <see cref="T:UnityEngine.MonoBehaviour"/>
            </summary>
        </member>
        <member name="M:Jotunn.GUI.DragWindowCntrl.ApplyDragWindowCntrl(UnityEngine.GameObject)">
            <summary>
                Add this MonoBehaviour to a GameObject
            </summary>
            <param name="go"></param>
        </member>
        <member name="M:Jotunn.GUI.DragWindowCntrl.OnBeginDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
                BeginDrag event trigger
            </summary>
        </member>
        <member name="M:Jotunn.GUI.DragWindowCntrl.OnDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
                Drag event trigger
            </summary>
        </member>
        <member name="T:Jotunn.GUI.GradientPicker">
            <summary>
                Custom MonoBehaviour for the GradientPicker
            </summary>
        </member>
        <member name="T:Jotunn.GUI.GradientPicker.GradientEvent">
            <summary>
                Event that gets called by the GradientPicker.
            </summary>
            <param name="g">received Gradient</param>
        </member>
        <member name="F:Jotunn.GUI.GradientPicker.instance">
            <summary>
                Singeleton instance
            </summary>
        </member>
        <member name="F:Jotunn.GUI.GradientPicker.done">
            <summary>
                True when the GradientPicker is closed
            </summary>
        </member>
        <member name="F:Jotunn.GUI.GradientPicker.onGC">
            <summary>
                OnGradientChanged Event
            </summary>
        </member>
        <member name="F:Jotunn.GUI.GradientPicker.onGS">
            <summary>
                OnGradientSelected Event
            </summary>
        </member>
        <member name="F:Jotunn.GUI.GradientPicker.originalGradient">
            <summary>
                Gradient before editing
            </summary>
        </member>
        <member name="F:Jotunn.GUI.GradientPicker.modifiedGradient">
            <summary>
                Current Gradient
            </summary>
        </member>
        <member name="F:Jotunn.GUI.GradientPicker.key">
            <summary>
                Key template
            </summary>
        </member>
        <member name="F:Jotunn.GUI.GradientPicker.interact">
            <summary>
                Interact bool
            </summary>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.Create(UnityEngine.Gradient,System.String,Jotunn.GUI.GradientPicker.GradientEvent,Jotunn.GUI.GradientPicker.GradientEvent)">
            <summary>
                Creates a new GradiantPicker
            </summary>
            <param name="original">Color before editing</param>
            <param name="message">Display message</param>
            <param name="onGradientChanged">Event that gets called when the gradient gets modified</param>
            <param name="onGradientSelected">Event that gets called when one of the buttons done or cancel gets pressed</param>
            <returns>False if the instance is already running</returns>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.Setup">
            <summary>
                Setup new GradientPicker
            </summary>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.CreateColorKey(UnityEngine.GradientColorKey)">
            <summary>
                Creates a ColorKey UI object
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.CreateNewColorKey(System.Single)">
            <summary>
                Checks if new ColorKey should be created
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.CreateAlphaKey(UnityEngine.GradientAlphaKey)">
            <summary>
                Creates a AlphaKey UI object
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.CreateNewAlphaKey(System.Single)">
            <summary>
                Checks if new AlphaKey should be created
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.SetAlpha(System.Single)">
            <summary>
                Accessed by alpha Slider
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.SetAlpha(System.String)">
            <summary>
                Accessed by alpha InputField
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.CheckDeleteKey(UnityEngine.UI.Slider)">
            <summary>
                Checks if Key can be deleted
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.Select">
            <summary>
                Changes Selected Key
            </summary>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.SetTime(System.Single)">
            <summary>
                Accessed by position Slider
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.SetTime(System.String)">
            <summary>
                Accessed by position InputField
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.ChooseColor">
            <summary>
                Choose color button call
            </summary>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.CCancel">
            <summary>
                Cancel button call
            </summary>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.Cancel">
            <summary>
                Manually cancel the GradientPicker and recovers the default value
            </summary>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.CDone">
            <summary>
                Done button call
            </summary>
        </member>
        <member name="M:Jotunn.GUI.GradientPicker.Done">
            <summary>
                Manually close the GradientPicker and apply the selected color
            </summary>
        </member>
        <member name="T:Jotunn.GUI.MinimapOverlayPanel">
            <summary>
                Panel for displaying and toggling custom map overlays
            </summary>
        </member>
        <member name="F:Jotunn.GUI.MinimapOverlayPanel.OverlayGroup">
            <summary>
                
            </summary>
        </member>
        <member name="F:Jotunn.GUI.MinimapOverlayPanel.Button">
            <summary>
            
            </summary>
        </member>
        <member name="F:Jotunn.GUI.MinimapOverlayPanel.BaseMod">
            <summary>
            
            </summary>
        </member>
        <member name="F:Jotunn.GUI.MinimapOverlayPanel.BaseModText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Jotunn.GUI.MinimapOverlayPanel.BaseToggle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Jotunn.GUI.MinimapOverlayPanel.ToggleOverlayGroup">
            <summary>
                Toggle the overlay list
            </summary>
        </member>
        <member name="M:Jotunn.GUI.MinimapOverlayPanel.AddOverlayToggle(System.String,System.String)">
            <summary>
                Add a new toggle for a map overlay
            </summary>
            <param name="modName"></param>
            <param name="overlayName"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Utils.AssetUtils">
            <summary>
                Util functions related to loading assets at runtime.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.AssetUtils.AssetBundlePathSeparator">
            <summary>
                Path separator for AssetBundles
            </summary>
        </member>
        <member name="M:Jotunn.Utils.AssetUtils.LoadTexture(System.String,System.Boolean)">
            <summary>
                Loads a <see cref="T:UnityEngine.Texture2D"/> from file at runtime.
            </summary>
            <param name="texturePath">Texture path relative to "plugins" BepInEx folder</param>
            <param name="relativePath">Is the given path relative</param>
            <returns>Texture2D loaded, or null if invalid path</returns>
        </member>
        <member name="M:Jotunn.Utils.AssetUtils.LoadSpriteFromFile(System.String)">
            <summary>
                Loads a <see cref="T:UnityEngine.Sprite"/> from file at runtime.
            </summary>
            <param name="spritePath">Texture path relative to "plugins" BepInEx folder</param>
            <returns>Texture2D loaded, or null if invalid path</returns>
        </member>
        <member name="M:Jotunn.Utils.AssetUtils.LoadSpriteFromFile(System.String,UnityEngine.Vector2)">
            <summary>
                Loads a <see cref="T:UnityEngine.Sprite"/> from file at runtime.
            </summary>
            <param name="spritePath">Texture path relative to "plugins" BepInEx folder</param>
            <param name="pivot">The pivot to use in the resulting Sprite</param>
            <returns>Texture2D loaded, or null if invalid path</returns>
        </member>
        <member name="M:Jotunn.Utils.AssetUtils.LoadMesh(System.String)">
            <summary>
                Loads a mesh from a .obj file at runtime.
            </summary>
            <param name="meshPath">Mesh path relative to "plugins" BepInEx folder</param>
            <returns>Texture2D loaded, or null if invalid path</returns>
        </member>
        <member name="M:Jotunn.Utils.AssetUtils.LoadAssetBundle(System.String)">
            <summary>
                Loads an asset bundle at runtime.
            </summary>
            <param name="bundlePath">Asset bundle path relative to "plugins" BepInEx folder</param>
            <returns>AssetBundle loaded, or null if invalid path</returns>
        </member>
        <member name="M:Jotunn.Utils.AssetUtils.LoadAssetBundleFromResources(System.String,System.Reflection.Assembly)">
            <summary>
                Load an assembly-embedded <see cref="T:UnityEngine.AssetBundle" />. Use this if the automatic detection of the assembly fails.
            </summary>
            <param name="bundleName">Name of the bundle. Folders are point-seperated e.g. folder/bundle becomes folder.bundle</param>
            <param name="resourceAssembly">Executing assembly</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.AssetUtils.LoadAssetBundleFromResources(System.String)">
            <summary>
                Load an assembly-embedded <see cref="T:UnityEngine.AssetBundle" />. The calling assembly is automatically detected.
            </summary>
            <param name="bundleName">Name of the bundle. Folders are point-seperated e.g. folder/bundle becomes folder.bundle</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.AssetUtils.LoadTextFromResources(System.String,System.Reflection.Assembly)">
            <summary>
                Load an assembly-embedded file as a char string />
            </summary>
            <param name="fileName">Name of the file. Folders are point-seperated e.g. folder/file.json becomes folder.file.json</param>
            <param name="resourceAssembly">Executing assembly</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.AssetUtils.LoadText(System.String)">
            <summary>
                Loads the contents of a file as a char string
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.AssetUtils.LoadSprite(System.String)">
            <summary>
                Loads a <see cref="T:UnityEngine.Sprite"/> from a file path or an asset bundle (separated by <see cref="F:Jotunn.Utils.AssetUtils.AssetBundlePathSeparator"/>)
            </summary>
            <param name="assetPath"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Utils.BepInExUtils">
            <summary>
                Helper methods to access BepInEx plugin information
            </summary>
        </member>
        <member name="F:Jotunn.Utils.BepInExUtils.Plugins">
            <summary>
                Cached plugin list
            </summary>
        </member>
        <member name="M:Jotunn.Utils.BepInExUtils.CacheDependentPlugins">
            <summary>
                Cache loaded plugins which depend on Jotunn.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.BepInExUtils.GetDependentPlugins(System.Boolean)">
            <summary>
                Get a dictionary of loaded plugins which depend on Jotunn.
            </summary>
            <returns>Dictionary of plugin GUID and <see cref="T:BepInEx.BaseUnityPlugin"/></returns>
        </member>
        <member name="M:Jotunn.Utils.BepInExUtils.GetPlugins(System.Boolean)">
            <summary>
                Get a dictionary of all plugins loaded by BepInEx
            </summary>
            <returns>Dictionary of plugin GUID and <see cref="T:BepInEx.BaseUnityPlugin"/></returns>
        </member>
        <member name="M:Jotunn.Utils.BepInExUtils.GetPluginInfoFromType(System.Type)">
            <summary>
                Get <see cref="T:BepInEx.PluginInfo"/> from a <see cref="T:System.Type"/>
            </summary>
            <param name="type"><see cref="T:System.Type"/> of the plugin main class</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.BepInExUtils.GetPluginInfoFromAssembly(System.Reflection.Assembly)">
            <summary>
                Get <see cref="T:BepInEx.PluginInfo"/> from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> of the plugin</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.BepInExUtils.GetPluginInfoFromPath(System.IO.FileInfo)">
            <summary>
                Get <see cref="T:BepInEx.PluginInfo"/> from a path, also matches subfolder paths
            </summary>
            <param name="fileInfo"><see cref="T:System.IO.FileInfo"/> object of the plugin path</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.BepInExUtils.GetSourceModMetadata">
            <summary>
                Get metadata information from the current calling mod
            </summary>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Utils.BoneReorder">
            <summary>
                Original code from https://github.com/GoldenJude.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.BoneReorder.ApplyOnEquipmentChanged">
            <summary>
                Corrects any bone disorder caused by unity incorrectly importing ripped assets.
                Once enabled, bone reordering will occur whenever the equipment changes.
                If one plug-in requests application of reordering, it will be applied globally for all EquipmentChanged events.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.BoneReorder.IsReorderingEnabled">
            <summary>
                The state of reordering bones OnEquipmentChanged.
            </summary>
            <returns>Returns true when bone reordering is enabled.</returns>
        </member>
        <member name="M:Jotunn.Utils.BoneReorder.ReorderBones(VisEquipment,System.Int32,System.Collections.Generic.List{UnityEngine.GameObject})">
            <summary>
                Reorders bone ordering caused by importing ripped assets into unity.
                It effectively matches the bone ordering from the ItemPrefab (itemPrefabHash parameter).
            </summary>
            <param name="visEquipment"></param>
            <param name="itemPrefabHash"></param>
            <param name="instancesToFix">GameObjects that need to match the ordering from the ItemPrefab (itemPrefabHash parameter)</param>
        </member>
        <member name="M:Jotunn.Utils.BoneReorder.SetBones(UnityEngine.SkinnedMeshRenderer,System.String[],UnityEngine.Transform)">
            <summary>
            Reorders incorrect bone ordering caused by importing ripped assets into unity.
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <param name="boneNames"></param>
            <param name="skeletonRoot"></param>
        </member>
        <member name="M:Jotunn.Utils.BoneReorder.GetBoneNames(UnityEngine.SkinnedMeshRenderer)">
            <summary>
                Returns a list of bone names, given a SkinnedMeshRenderer.
            </summary>
            <param name="skinnedMeshRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.BoneReorder.FindInChildren(UnityEngine.Transform,System.String)">
            <summary>
                Returns a transform matching the given name within the transforms children.
            </summary>
            <param name="transform"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Utils.ConfigurationSynchronizationEventArgs">
            <summary>
                Event args class for configuration synchronization event
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ConfigurationSynchronizationEventArgs.InitialSynchronization">
            <summary>
                Is this the initial synchronization?
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ExtEquipment.VisEquipment_UpdateEquipmentVisuals(VisEquipment)">
            <summary>
                Get non-vanilla variant indices from the ZDO
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ExtEquipment.VisEquipment_SetRightHandEquiped(MonoMod.Cil.ILContext)">
            <summary>
                Check for variant changes and pass the variant to AttachItem
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ExtEquipment.VisEquipment_SetBackEquiped(MonoMod.Cil.ILContext)">
            <summary>
                Check for variant changes and pass the variant to AttachBackItem
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ExtEquipment.VisEquipment_SetChestEquiped(MonoMod.Cil.ILContext)">
            <summary>
                Check for variant changes and pass the variant to AttachArmor
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ExtEquipment.VisEquipment_SetRightItem(VisEquipment,System.String)">
            <summary>
                Store the variant index of the right hand item to the ZDO if the variant has changed
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ExtEquipment.VisEquipment_SetRightBackItem(VisEquipment,System.String)">
            <summary>
                Store the variant index of the right back item to the ZDO if the variant has changed
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ExtEquipment.VisEquipment_SetChestItem(VisEquipment,System.String)">
            <summary>
                Store the variant index of the chest item to the ZDO if the variant has changed
            </summary>
        </member>
        <member name="T:Jotunn.Utils.GameConstants">
            <summary>
                Constants of hardcoded strings used in-game
            </summary>
        </member>
        <member name="T:Jotunn.Utils.GameConstants.GlobalKey">
            <summary>
                GlobalKey strings
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.GlobalKey.None">
            <summary>
                <para>In-game value: ""</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.GlobalKey.KilledBonemass">
            <summary>
                <para>In-game value: "defeated_bonemass"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.GlobalKey.KilledElder">
            <summary>
                <para>In-game value: "defeated_gdking"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.GlobalKey.KilledYagluth">
            <summary>
                <para>In-game value: "defeated_goblinking"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.GlobalKey.KilledModer">
            <summary>
                <para>In-game value: "defeated_dragon"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.GlobalKey.KilledEikthyr">
            <summary>
                <para>In-game value: "defeated_eikthyr"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.GlobalKey.KilledTroll">
            <summary>
                <para>In-game value: "KilledTroll"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.GlobalKey.KilledSurtling">
            <summary>
                <para>In-game value: "killed_surtling"</para>
            </summary>
        </member>
        <member name="T:Jotunn.Utils.GameConstants.Weather">
            <summary>
                Weather strings
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.ClearSkies">
            <summary>
                <para>In-game value: "Clear"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.MeadowsClearSkies">
            <summary>
                <para>In-game value: "Heath_clear"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.LightRain">
            <summary>
                <para>In-game value: "LightRain"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.Rain">
            <summary>
                <para>In-game value: "Rain"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.ThunderStorm">
            <summary>
                <para>In-game value: "ThunderStorm"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.ClearThunderStorm">
            <summary>
                <para>In-game value: "nofogts"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.SwampRain">
            <summary>
                <para>In-game value: "SwampRain"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.MistlandsDark">
            <summary>
                <para>In-game value: "Darklands_dark"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.AshlandsAshrain">
            <summary>
                <para>In-game value: "Ashrain"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.MountainSnow">
            <summary>
                <para>In-game value: "Snow"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.MountainBlizzard">
            <summary>
                <para>In-game value: "SnowStorm"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.BlackForestFog">
            <summary>
                <para>In-game value: "DeepForest Mist"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.Fog">
            <summary>
                <para>In-game value: "Misty"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.DeepNorthSnow">
            <summary>
                <para>In-game value: "Twilight_Snow"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.DeepNorthSnowStorm">
            <summary>
                <para>In-game value: "Twilight_SnowStorm"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.DeepNorthClear">
            <summary>
                <para>In-game value: "Twilight_Clear"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.EikthyrsThunderstorm">
            <summary>
                <para>In-game value: "Eikthyr"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.EldersHaze">
            <summary>
                <para>In-game value: "GDKing"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.BonemassDownpour">
            <summary>
                <para>In-game value: "Bonemass"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.ModersVortex">
            <summary>
                <para>In-game value: "Moder"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.YagluthsMagicBlizzard">
            <summary>
                <para>In-game value: "GoblinKing"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.Crypt">
            <summary>
                <para>In-game value: "Crypt"</para>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.GameConstants.Weather.SunkenCrypt">
            <summary>
                <para>In-game value: "SunkenCrypt"</para>
            </summary>
        </member>
        <member name="T:Jotunn.Utils.HashUtils">
            <summary>
                A util class for computing various hashes
            </summary>
        </member>
        <member name="M:Jotunn.Utils.HashUtils.ComputeSha256Hash(System.String)">
            <summary>
                Compute a SHA256 hash from a given string
            </summary>
            <param name="rawData"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Utils.IModPrefab">
            <summary>
                Interface to match a prefab to the mod that has created it. 
            </summary>
        </member>
        <member name="P:Jotunn.Utils.IModPrefab.Prefab">
            <summary>
                The target prefab.
            </summary>
        </member>
        <member name="P:Jotunn.Utils.IModPrefab.SourceMod">
            <summary>
                Reference to the <see cref="T:BepInEx.BepInPlugin"/> which added this prefab.
            </summary>
        </member>
        <member name="T:Jotunn.Utils.ModCompatibility">
            <summary>
                Implementation of the mod compatibility features.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.ModCompatibility.LastServerVersion">
            <summary>
                Stores the last server message.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ModCompatibility.RPC_Jotunn_ReceiveVersionData(ZRpc,ZPackage)">
            <summary>
                Store server's message.
            </summary>
            <param name="sender"></param>
            <param name="data"></param>
        </member>
        <member name="M:Jotunn.Utils.ModCompatibility.ShowModCompatibilityErrorMessage(System.String)">
            <summary>
                Create and show mod compatibility error message
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ModCompatibility.CreateErrorMessage(Jotunn.Utils.ModuleVersionData,Jotunn.Utils.ModuleVersionData)">
            <summary>
                Create the error message(s) from the server and client message data
            </summary>
            <param name="serverData">server data</param>
            <param name="clientData">client data</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.ModCompatibility.ClientVersionLowerMessage(Jotunn.Utils.ModModule)">
            <summary>
                Generate message for client's mod version lower than server's version
            </summary>
            <param name="module">Module version data</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.ModCompatibility.ServerVersionLowerMessage(Jotunn.Utils.ModModule,Jotunn.Utils.ModModule)">
            <summary>
                Generate message for server's mod version lower than client's version
            </summary>
            <param name="module">server module data</param>
            <param name="clientModule">client module data</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.ModCompatibility.GetEnforcableMods">
            <summary>
                Get module.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Utils.ModuleVersionData">
            <summary>
                Deserialize version string into a usable format.
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModuleVersionData.ValheimVersion">
            <summary>
                Valheim version
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModuleVersionData.Modules">
            <summary>
                Module data
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ModuleVersionData.#ctor(System.Collections.Generic.List{Jotunn.Utils.ModModule})">
            <summary>
                Create from module data
            </summary>
            <param name="versionData"></param>
        </member>
        <member name="M:Jotunn.Utils.ModuleVersionData.#ctor(ZPackage)">
            <summary>
                Create from ZPackage
            </summary>
            <param name="pkg"></param>
        </member>
        <member name="M:Jotunn.Utils.ModuleVersionData.ToZPackage">
            <summary>
                Create ZPackage
            </summary>
            <returns>ZPackage</returns>
        </member>
        <member name="M:Jotunn.Utils.ModuleVersionData.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Jotunn.Utils.CompatibilityLevel">
            <summary>
                Determines the level of compatibility of a mod which is enforced by Jötunn.
                Servers disconnect clients with mods which enforce their compatibility when 
                the version does not match as defined by the VersionStrictness attribute.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.CompatibilityLevel.NoNeedForSync">
            <summary>
                Mod is not checked at all, VersionsStrictness does not apply.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.CompatibilityLevel.OnlySyncWhenInstalled">
            <summary>
                Mod is checked only if the client and server have loaded it and ignores if just one side has it.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.CompatibilityLevel.EveryoneMustHaveMod">
            <summary>
                Mod must be loaded on server and client. Version checking depends on the VersionStrictness.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.CompatibilityLevel.ClientMustHaveMod">
            <summary>
                If mod is installed on the server, every client has to have it. VersionStrictness does apply when both sides have it.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.CompatibilityLevel.ServerMustHaveMod">
            <summary>
                If mod is installed on the client, the server has to have it. VersionStrictness does apply when both sides have it.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.CompatibilityLevel.VersionCheckOnly">
            <summary>
                Version check is performed when both server and client have the mod, no check if the mod is actually installed.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.CompatibilityLevel.NotEnforced">
            <summary>
                Mod is not checked at all, VersionsStrictness does not apply.
            </summary>
        </member>
        <member name="T:Jotunn.Utils.VersionStrictness">
            <summary>
                Enum used for telling whether or not the same mod version should be used by both the server and the clients.
                This enum is only useful with certain CompatibilityLevel values.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.VersionStrictness.None">
            <summary>
                No version check is done
            </summary>
        </member>
        <member name="F:Jotunn.Utils.VersionStrictness.Major">
            <summary>
                Mod must have the same Major version
            </summary>
        </member>
        <member name="F:Jotunn.Utils.VersionStrictness.Minor">
            <summary>
                Mods must have the same Minor version
            </summary>
        </member>
        <member name="F:Jotunn.Utils.VersionStrictness.Patch">
            <summary>
                Mods must have the same Patch version
            </summary>
        </member>
        <member name="T:Jotunn.Utils.NetworkCompatibilityAttribute">
            <summary>
            Mod compatibility attribute<br />
            <br/>
            PLEASE READ<br />
            Example usage:<br />
            If your mod adds its own RPCs, EnforceModOnClients is likely a must (otherwise clients would just discard the messages from the server), same version you do have to determine, if your sent data changed<br />
            If your mod adds items, you always should enforce mods on client and same version (there could be nasty side effects with different versions of an item)<br />
            If your mod is just GUI changes (for example bigger inventory, additional equip slots) there is no need to set this attribute
            </summary>
        </member>
        <member name="P:Jotunn.Utils.NetworkCompatibilityAttribute.EnforceModOnClients">
            <summary>
                Compatibility Level
            </summary>
        </member>
        <member name="P:Jotunn.Utils.NetworkCompatibilityAttribute.EnforceSameVersion">
            <summary>
                Version Strictness
            </summary>
        </member>
        <member name="M:Jotunn.Utils.NetworkCompatibilityAttribute.#ctor(Jotunn.Utils.CompatibilityLevel,Jotunn.Utils.VersionStrictness)">
            <summary>
                Network Compatibility Attribute
            </summary>
            <param name="enforceMod"></param>
            <param name="enforceVersion"></param>
        </member>
        <member name="T:Jotunn.Utils.ModQuery">
            <summary>
                Utility class to query metadata about added content of any loaded mod, including non-Jötunn ones.
                It is disabled by default, as it unnecessary increases the loading time when not used.<br/>
                <see cref="M:Jotunn.Utils.ModQuery.Enable"/> has to be called anytime before FejdStartup.Awake, meaning in your plugin's Awake or Start.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ModQuery.Enable">
            <summary>
                Enables the collection of mod metadata.
                It is disabled by default, as it unnecessary increases the loading time when not used.<br/>
                This method has to be called anytime before FejdStartup.Awake, meaning in your plugin's Awake or Start.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ModQuery.GetPrefabs">
            <summary>
                Get all prefabs that were added by mods. Does not include Vanilla prefabs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.ModQuery.GetPrefabs(System.String)">
            <summary>
                Get all prefabs that were added by a specific mod
            </summary>
            <param name="modGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.ModQuery.GetPrefab(System.String)">
            <summary>
                Get an prefab by its name.
                Does not include Vanilla prefabs, see <see cref="M:Jotunn.Managers.PrefabManager.GetPrefab(System.String)">PrefabManager.GetPrefab(string)</see>
                for those.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Jotunn.Utils.ModRegistry">
            <summary>
                Utility class to query metadata about loaded Jötunn mods and their added content
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetMods(System.Boolean)">
            <summary>
                Get all loaded mod's metadata
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Utils.ModRegistry.ModInfo"/> for all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetPrefabs">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomPrefab">CustomPrefabs</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomPrefab"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetPrefabs(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomPrefab">CustomPrefabs</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomPrefab"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetItems">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomItem">CustomItems</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomItem"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetItems(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomItem">CustomItems</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomItem"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetRecipes">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomRecipe">CustomRecipes</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomRecipe"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetRecipes(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomRecipe">CustomRecipes</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomRecipe"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetItemConversions">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomItemConversion">CustomItemConversions</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomItemConversion"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetItemConversions(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomItemConversion">CustomItemConversions</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomItemConversion"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetStatusEffects">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomStatusEffect">CustomStatusEffects</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomStatusEffect"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetStatusEffects(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomStatusEffect">CustomStatusEffects</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomStatusEffect"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetPieceTables">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomPieceTable">CustomPieceTables</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomPieceTable"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetPieceTables(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomPieceTable">CustomPieceTables</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomPieceTable"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetPieces">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomPiece">CustomPieces</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomPiece"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetPieces(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomPiece">CustomPieces</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomPiece"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetLocations">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomLocation">CustomLocations</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomLocation"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetLocations(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomLocation">CustomLocations</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomLocation"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetVegetation">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomVegetation">CustomVegetations</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomVegetation"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetVegetation(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomVegetation">CustomVegetations</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomVegetation"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetClutter(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomClutter">CustomClutter</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomClutter"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetCreatures">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomCreature">CustomCreatures</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomCreature"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetCreatures(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomCreature">CustomCreatures</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomCreature"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetCommands">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.ConsoleCommand">ConsoleCommands</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.ConsoleCommand"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetCommands(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.ConsoleCommand">ConsoleCommands</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.ConsoleCommand"/> from a specific mod</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetTranslations">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomLocalization">CustomLocalizations</see>
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomLocalization"/> from all loaded mods</returns>
        </member>
        <member name="M:Jotunn.Utils.ModRegistry.GetTranslations(System.String)">
            <summary>
                Get all added <see cref="T:Jotunn.Entities.CustomLocalization">CustomLocalizations</see> of a mod by GUID
            </summary>
            <param name="modGuid">GUID of the mod</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Jotunn.Entities.CustomLocalization"/> from a specific mod</returns>
        </member>
        <member name="T:Jotunn.Utils.ModRegistry.ModInfo">
            <summary>
                Model class holding metadata of Jötunn mods.
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.GUID">
            <summary>
                The mod GUID
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Name">
            <summary>
                Human readable name
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Version">
            <summary>
                Current version
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Prefabs">
            <summary>
                Custom prefabs added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Items">
            <summary>
                Custom items added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Recipes">
            <summary>
                Custom recipes added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.ItemConversions">
            <summary>
                Custom item conversions added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.StatusEffects">
            <summary>
                Custom status effects added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.PieceTables">
            <summary>
                Custom piece tables added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Pieces">
            <summary>
                Custom pieces added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Locations">
            <summary>
                Custom locations added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Vegetation">
            <summary>
                Custom Vegetation added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Clutter">
            <summary>
                Custom Clutter added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Creatures">
            <summary>
                Custom Creatures added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Commands">
            <summary>
                Custom commands added by that mod
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ModRegistry.ModInfo.Translations">
            <summary>
                Custom commands added by that mod
            </summary>
        </member>
        <member name="T:Jotunn.Utils.PatchInitAttribute">
            <summary>
                Priority attribute for PatchInitalizer.
            </summary>
        </member>
        <member name="P:Jotunn.Utils.PatchInitAttribute.Priority">
            <summary>
                The patch priority.
                <para>
                    negative - early
                    <br />
                    zero - neutral
                    <br />
                    positive - late
                </para>
            </summary>
        </member>
        <member name="M:Jotunn.Utils.PatchInitAttribute.#ctor(System.Int32)">
            <summary>
                Patch Init Attribute
            </summary>
            <param name="priority"><see cref="P:Jotunn.Utils.PatchInitAttribute.Priority"/></param>
        </member>
        <member name="T:Jotunn.Utils.Paths">
            <summary>
                Various Path constants used in Jötunn
            </summary>
        </member>
        <member name="P:Jotunn.Utils.Paths.JotunnFolder">
            <summary>
                Path to the game's save path
            </summary>
        </member>
        <member name="P:Jotunn.Utils.Paths.CustomItemDataFolder">
            <summary>
                Path to the custom item folder
            </summary>
        </member>
        <member name="P:Jotunn.Utils.Paths.LanguageTranslationsFolder">
            <summary>
                Path to the global translation folder
            </summary>
        </member>
        <member name="P:Jotunn.Utils.Paths.IconCachePath">
            <summary>
                Path to cached icons. See <see cref="T:Jotunn.Managers.RenderManager"/>
            </summary>
        </member>
        <member name="T:Jotunn.Utils.ReflectionHelper">
            <summary>
                Various utility methods aiding Reflection tasks.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.ReflectionHelper.AllBindingFlags">
            <summary>
                All possible binding flags
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ReflectionHelper.IsSameOrSubclass(System.Type,System.Type)">
            <summary>
                Determines whether this type is the same or a subclass of another type
            </summary>
            <param name="type">this type</param>
            <param name="base">Type against the type is checked</param>
            <returns>true if this type is the same or a subtype</returns>
        </member>
        <member name="M:Jotunn.Utils.ReflectionHelper.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
                Determine whether the specified type <paramref name= "type"/> is a subtype of the specified generic type or implements the specified generic interface.
            </summary>
            <param name="type">the type to be tested.</param>
            <param name="generic">generic interface type, passing in typeof (IXxx&lt;&gt;)</param>
            <returns>returns true if it is a subtype of the generic interface, or false.</returns>
        </member>
        <member name="M:Jotunn.Utils.ReflectionHelper.IsEnumerable(System.Type)">
            <summary>
                Determines if this type inherits from <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="type">this type</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.ReflectionHelper.GetEnumeratedType(System.Type)">
            <summary>
                Get the generic <see cref="T:System.Collections.IEnumerable"/> type of this type.<br />
                https://stackoverflow.com/a/21995826
            </summary>
            <param name="type">this type</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.ReflectionHelper.GetCallingType">
            <summary>
                Get the <see cref="P:System.Type.ReflectedType"/> of the first caller outside of this assembly
            </summary>
            <returns>The reflected type of the first caller outside of this assembly</returns>
        </member>
        <member name="M:Jotunn.Utils.ReflectionHelper.GetCallingAssembly">
            <summary>
                Get the <see cref="T:System.Reflection.Assembly"/> of the first caller outside of this assembly
            </summary>
            <returns>The assembly of the first caller outside of this assembly</returns>
        </member>
        <member name="M:Jotunn.Utils.ReflectionHelper.InvokePrivate(System.Object,System.String,System.Object[])">
            <summary>
                Invoke a private method of any class instance
            </summary>
            <param name="instance">Instance of the class</param>
            <param name="name">Name of the method</param>
            <param name="args">Argument values (if any) of the method</param>
            <returns>The return of the method as an <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Jotunn.Utils.ReflectionHelper.GetPrivateProperty``1(System.Object,System.String)">
            <summary>
                Get the value of a private property of any class instance
            </summary>
            <typeparam name="T">Generic property type</typeparam>
            <param name="instance">Instance of the class</param>
            <param name="name">Name of the property</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:Jotunn.Utils.ReflectionHelper.GetPrivateField``1(System.Object,System.String)">
            <summary>
                Get the value of a private field of any class instance
            </summary>
            <typeparam name="T">Generic field type</typeparam>
            <param name="instance">Instance of the class</param>
            <param name="name">Name of the field</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:Jotunn.Utils.ReflectionHelper.GetPrivateField``1(System.Type,System.String)">
            <summary>
                Get the value of a private static field of any class
            </summary>
            <typeparam name="T">Generic field type</typeparam>
            <param name="type">Type of the class</param>
            <param name="name">Name of the field</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:Jotunn.Utils.ReflectionHelper.SetPrivateField(System.Object,System.String,System.Object)">
            <summary>
                Set a value of a private field of any class instance
            </summary>
            <param name="instance">Instance of the class</param>
            <param name="name">Name of the field</param>
            <param name="value">New value of the field</param>
        </member>
        <member name="T:Jotunn.Utils.ReflectionHelper.Cache">
            <summary>
                Cache for Reflection tasks.
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ReflectionHelper.Cache.EnumerableToArray">
            <summary>
                <see cref="T:System.Reflection.MethodInfo"/> of <see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})"/>
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ReflectionHelper.Cache.EnumerableToList">
            <summary>
                <see cref="T:System.Reflection.MethodInfo"/> of <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"/>
            </summary>
        </member>
        <member name="P:Jotunn.Utils.ReflectionHelper.Cache.EnumerableCast">
            <summary>
                <see cref="T:System.Reflection.MethodInfo"/> of <see cref="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)"/>
            </summary>
        </member>
        <member name="T:Jotunn.Utils.ShaderHelper">
            <summary>
                Various static utility methods for working with Shaders
            </summary>
        </member>
        <member name="M:Jotunn.Utils.ShaderHelper.GetRenderers(UnityEngine.GameObject)">
            <summary>
                Get a list of all <see cref="T:UnityEngine.MeshRenderer"/> and <see cref="T:UnityEngine.SkinnedMeshRenderer"/> in this GameObject and its childs.
            </summary>
            <param name="gameObject">Parent GameObject</param>
            <returns>List of <see cref="T:UnityEngine.MeshRenderer"/> and <see cref="T:UnityEngine.SkinnedMeshRenderer"/></returns>
        </member>
        <member name="M:Jotunn.Utils.ShaderHelper.GetRendererMaterials(UnityEngine.GameObject)">
            <summary>
                Get a list of all renderer <see cref="T:UnityEngine.Material"/> of a GameObject and its childs
            </summary>
            <param name="gameObject">Parent GameObject</param>
            <returns>List of <see cref="T:UnityEngine.Material"/></returns>
        </member>
        <member name="M:Jotunn.Utils.ShaderHelper.GetRendererSharedMaterials(UnityEngine.GameObject)">
            <summary>
                Get a list of all shared renderer <see cref="T:UnityEngine.Material"/> of a GameObject and its childs
            </summary>
            <param name="gameObject">Parent GameObject</param>
            <returns>List of <see cref="T:UnityEngine.Material"/></returns>
        </member>
        <member name="M:Jotunn.Utils.ShaderHelper.GetAllRendererMaterials(UnityEngine.GameObject)">
            <summary>
                Get a list of all normal and shared renderer <see cref="T:UnityEngine.Material"/> of a GameObject and its childs
            </summary>
            <param name="gameObject">Parent GameObject</param>
            <returns>List of <see cref="T:UnityEngine.Material"/></returns>
        </member>
        <member name="M:Jotunn.Utils.ShaderHelper.CreateScaledTexture(UnityEngine.Texture2D,System.Int32)">
            <summary>
                Create a new, scaled texture from a given texture.
            </summary>
            <param name="texture">Source texture to scale</param>
            <param name="width">New width of the scaled texture</param>
            <returns></returns>
        </member>
        <member name="M:Jotunn.Utils.ShaderHelper.ScaleTexture(UnityEngine.Texture2D,System.Int32)">
            <summary>
                Scale a texture to a certain width, aspect ratio is preserved.
            </summary>
            <param name="texture">Texture to scale</param>
            <param name="width">New width of the scaled texture</param>
        </member>
        <member name="M:Jotunn.Utils.ShaderHelper.ShaderDump(UnityEngine.GameObject)">
            <summary>
                Dumps all shader information of a GameObject and its childs onto debug log
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="T:Jotunn.Utils.UndoActions">
            <summary>
                Pre-defined actions to use with the <see cref="T:Jotunn.Managers.UndoManager"/>.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoHelper.IsValid(ZNetView)">
            <summary>Helper to check object validity.</summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoHelper.IsValid(ZDO)">
            <summary>Helper to check object validity.</summary>
        </member>
        <member name="T:Jotunn.Utils.UndoActions.UndoCreate">
            <summary>
                "Create" action for the <see cref="T:Jotunn.Managers.UndoManager"/>. Can undo and redo ZDO creation.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.UndoActions.UndoCreate.Data">
            <summary>
                Current ZDO data of this action.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoCreate.#ctor(System.Collections.Generic.IEnumerable{ZDO})">
            <summary>
                Create new undo data for ZDO creation operations. Clones all ZDO data to prevent NREs.
            </summary>
            <param name="data">Enumerable of ZDOs which were created.</param>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoCreate.Description">
            <summary>
                Description of the executed action.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoCreate.Undo">
            <summary>
                Remove stored ZDOs again.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoCreate.UndoMessage">
            <summary>
                Success message.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoCreate.Redo">
            <summary>
                Recreate stored ZDOs again.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoCreate.RedoMessage">
            <summary>
                Success message.
            </summary>
        </member>
        <member name="T:Jotunn.Utils.UndoActions.UndoRemove">
            <summary>
                "Remove" action for the <see cref="T:Jotunn.Managers.UndoManager"/>. Can undo and redo ZDO removal.
            </summary>
        </member>
        <member name="F:Jotunn.Utils.UndoActions.UndoRemove.Data">
            <summary>
                Current ZDO data of this action.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoRemove.#ctor(System.Collections.Generic.IEnumerable{ZDO})">
            <summary>
                Create new undo data for ZDO removal operations. Clones all ZDO data to prevent NREs.
            </summary>
            <param name="data">Enumerable of ZDOs which were removed.</param>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoRemove.Description">
            <summary>
                Description of the executed action.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoRemove.Undo">
            <summary>
                Recreate stored ZDOs again.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoRemove.UndoMessage">
            <summary>
                Success message.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoRemove.Redo">
            <summary>
                Remove stored ZDOs again.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoRemove.RedoMessage">
            <summary>
                Success message.
            </summary>
        </member>
        <member name="T:Jotunn.Utils.UndoActions.HeightUndoData">
            <summary>
                Heightmap data wrapper
            </summary>
        </member>
        <member name="F:Jotunn.Utils.UndoActions.HeightUndoData.Smooth">
            <summary>
                "Smooth" member of the heightmap
            </summary>
        </member>
        <member name="F:Jotunn.Utils.UndoActions.HeightUndoData.Level">
            <summary>
                "Level" member of the heightmap
            </summary>
        </member>
        <member name="F:Jotunn.Utils.UndoActions.HeightUndoData.Index">
            <summary>
                "Index" member of the heightmap
            </summary>
        </member>
        <member name="F:Jotunn.Utils.UndoActions.HeightUndoData.HeightModified">
            <summary>
                "HeightModified" member of the heightmap
            </summary>
        </member>
        <member name="T:Jotunn.Utils.UndoActions.PaintUndoData">
            <summary>
                Paint data wrapper
            </summary>
        </member>
        <member name="F:Jotunn.Utils.UndoActions.PaintUndoData.PaintModified">
            <summary>
                "PaintModified" member of the heightmap paint
            </summary>
        </member>
        <member name="F:Jotunn.Utils.UndoActions.PaintUndoData.Paint">
            <summary>
                "Paint" member of the heightmap paint
            </summary>
        </member>
        <member name="F:Jotunn.Utils.UndoActions.PaintUndoData.Index">
            <summary>
                "Index" member of the heightmap paint
            </summary>
        </member>
        <member name="T:Jotunn.Utils.UndoActions.TerrainUndoData">
            <summary>
                Heightmap and Paint data collection
            </summary>
        </member>
        <member name="F:Jotunn.Utils.UndoActions.TerrainUndoData.Heights">
            <summary>
                Collection of <see cref="T:Jotunn.Utils.UndoActions.HeightUndoData"/>
            </summary>
        </member>
        <member name="F:Jotunn.Utils.UndoActions.TerrainUndoData.Paints">
            <summary>
                Collection of <see cref="T:Jotunn.Utils.UndoActions.PaintUndoData"/>
            </summary>
        </member>
        <member name="T:Jotunn.Utils.UndoActions.UndoTerrain">
            <summary>
                "Terrain" action for the <see cref="T:Jotunn.Managers.UndoManager"/>. Can undo and redo terrain modifications.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoTerrain.#ctor(System.Collections.Generic.Dictionary{UnityEngine.Vector3,Jotunn.Utils.UndoActions.TerrainUndoData},System.Collections.Generic.Dictionary{UnityEngine.Vector3,Jotunn.Utils.UndoActions.TerrainUndoData},UnityEngine.Vector3,System.Single)">
            <summary>
                Create new undo data for terrain modifications.
            </summary>
            <param name="before">Terrain state before modification</param>
            <param name="after">Terrain state after modification</param>
            <param name="position">Position of the terrain modification center</param>
            <param name="radius">Radius of the terrain modification</param>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoTerrain.Description">
            <summary>
                Description of the executed action.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoTerrain.Undo">
            <summary>
                Sets terrain data to the stored values of the "before" state.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoTerrain.UndoMessage">
            <summary>
                Success message.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoTerrain.Redo">
            <summary>
                Sets terrain data to the stored values of the "after" state.
            </summary>
        </member>
        <member name="M:Jotunn.Utils.UndoActions.UndoTerrain.RedoMessage">
            <summary>
                Success message.
            </summary>
        </member>
        <member name="T:Jotunn.Utils.WeightedList`2">
            <summary>
                Like a list but stores elements in the order specified by the weight.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="ItemType"></typeparam>
        </member>
        <member name="T:Jotunn.Utils.WeightedItem`1">
            <summary>
                Weighted item used in <see cref="T:Jotunn.Utils.WeightedList`2"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ConfigurationManagerAttributes">
            <summary>
                Class that specifies how a setting should be displayed inside the ConfigurationManager settings window.
                
                Usage:
                This class template has to be copied inside the plugin's project and referenced by its code directly.
                make a new instance, assign any fields that you want to override, and pass it as a tag for your setting.
                
                If a field is null (default), it will be ignored and won't change how the setting is displayed.
                If a field is non-null (you assigned a value to it), it will override default behavior.
            </summary>
            
            <example> 
                Here's an example of overriding order of settings and marking one of the settings as advanced:
                <code>
                    // Override IsAdvanced and Order
                    Config.AddSetting("X", "1", 1, new ConfigDescription("", null, new ConfigurationManagerAttributes { IsAdvanced = true, Order = 3 }));
                    // Override only Order, IsAdvanced stays as the default value assigned by ConfigManager
                    Config.AddSetting("X", "2", 2, new ConfigDescription("", null, new ConfigurationManagerAttributes { Order = 1 }));
                    Config.AddSetting("X", "3", 3, new ConfigDescription("", null, new ConfigurationManagerAttributes { Order = 2 }));
                </code>
            </example>
            
            <remarks> 
                You can read more and see examples in the readme at https://github.com/BepInEx/BepInEx.ConfigurationManager
                You can optionally remove fields that you won't use from this class, it's the same as leaving them null.
            </remarks>
        </member>
        <member name="M:ConfigurationManagerAttributes.#ctor">
            <summary>
                ctor
            </summary>
        </member>
        <member name="F:ConfigurationManagerAttributes.Browsable">
            <summary>
                Show this setting in the settings screen at all? If false, don't show.
            </summary>
        </member>
        <member name="F:ConfigurationManagerAttributes.DefaultValue">
            <summary>
                If set, a "Default" button will be shown next to the setting to allow resetting to default.
            </summary>
        </member>
        <member name="F:ConfigurationManagerAttributes.HideDefaultButton">
            <summary>
                Force the "Reset" button to not be displayed, even if a valid DefaultValue is available. 
            </summary>
        </member>
        <member name="F:ConfigurationManagerAttributes.Order">
            <summary>
                Order of the setting on the settings list relative to other settings in a category.
                0 by default, higher number is higher on the list.
            </summary>
        </member>
        <member name="F:ConfigurationManagerAttributes.ReadOnly">
            <summary>
                Only show the value, don't allow editing it.
            </summary>
        </member>
        <member name="F:ConfigurationManagerAttributes.IsAdvanced">
            <summary>
                If true, don't show the setting by default. User has to turn on showing advanced settings or search for it.
            </summary>
        </member>
        <member name="P:ConfigurationManagerAttributes.IsAdminOnly">
            <summary>
                Whether a config is only writable by admins and gets overwritten on connecting clients
            </summary>
        </member>
        <member name="P:ConfigurationManagerAttributes.EntryColor">
            <summary>
                Color of the entry text
            </summary>
        </member>
        <member name="P:ConfigurationManagerAttributes.DescriptionColor">
            <summary>
                Color of the description text
            </summary>
        </member>
        <member name="P:ConfigurationManagerAttributes.IsUnlocked">
            <summary>
                Whether a config is locked for direct writing
            </summary>
        </member>
        <member name="P:ConfigurationManagerAttributes.LocalValue">
            <summary>
                When a config is locked, cache the local value
            </summary>
        </member>
        <member name="M:ConfigurationManagerAttributes.SetFromAttributes(System.Object[])">
            <summary>
                Set config values from an attribute array
            </summary>
            <param name="attribs">Array of attribute values</param>
        </member>
        <member name="T:SimpleJson.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray"/> class. 
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray"/> class. 
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:SimpleJson.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:SimpleJson.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:SimpleJson.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject"/>.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:SimpleJson.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:SimpleJson.SimpleJson">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and JsonObject(IDictionary&lt;string,object>).
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:SimpleJson.SimpleJson.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.SerializeObject(System.Object,SimpleJson.IJsonSerializerStrategy)">
            <summary>
            Converts a IDictionary&lt;string,object> / IList&lt;object> object into a JSON string
            </summary>
            <param name="json">A IDictionary&lt;string,object> / IList&lt;object></param>
            <param name="jsonSerializerStrategy">Serializer strategy to use</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
    </members>
</doc>
